<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>20.有效的括号</title>
    <url>/2022/05/10/20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>
<p>有效字符串需满足</p>
<ul>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
</ul>
<p>例如：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;()&quot;</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;()[]&#123;&#125;&quot;</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;(]&quot;</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>即左右括号必须是闭合的。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用栈结构来处理这个问题非常简单。</p>
<p>我们从左到右依次扫描字符串的每一个字符，如果是<code>([&#123;</code>左括号就入栈，如果是<code>)]&#125;</code>右括号就从栈里弹出栈顶的元素，然后匹配该字符和栈顶元素是否是成对的。</p>
<p>例如扫描到字符<code>(</code>,然后栈顶元素是<code>)</code>,则成对，否则不成对则返回<code>False</code></p>
<p>扫描完字符串，如果栈里没有元素则说明括号都是成对的，匹配成功。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="comment"># 字符串匹配成功的话其长度一定是偶数, 否则一定不成功</span></span><br><span class="line">        <span class="comment"># 这里可以先检查长度, 可以省略之后的步骤</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 辅助栈</span></span><br><span class="line">        _stack = []</span><br><span class="line">        <span class="comment"># 对照表</span></span><br><span class="line">        _<span class="built_in">map</span> = &#123;</span><br><span class="line">            <span class="string">&quot;)&quot;</span>: <span class="string">&quot;(&quot;</span>,</span><br><span class="line">            <span class="string">&quot;]&quot;</span>: <span class="string">&quot;[&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span>: <span class="string">&quot;&#123;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> _char <span class="keyword">in</span> <span class="built_in">list</span>(s):</span><br><span class="line">            <span class="keyword">if</span> _char <span class="keyword">in</span> <span class="string">&quot;([&#123;&quot;</span>:</span><br><span class="line">                _stack.append(_char)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 当遇到右括号时, 从栈顶弹出元素检测是否</span></span><br><span class="line">                <span class="comment"># 成对, 即是否闭合, 不成对则返回 False</span></span><br><span class="line">                <span class="keyword">if</span> _stack:</span><br><span class="line">                    <span class="keyword">if</span> _char <span class="keyword">in</span> _<span class="built_in">map</span>:</span><br><span class="line">                        _top = _stack.pop()</span><br><span class="line">                        <span class="keyword">if</span> _<span class="built_in">map</span>[_char] != _top:</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 右括号溢出</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 这里要判断栈里是否还有元素</span></span><br><span class="line">        <span class="comment"># 有元素则说明该字符串匹配不成功</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(_stack) == <span class="number">0</span></span><br></pre></td></tr></table></figure>


<p>原链接</p>
<blockquote>
<p><a href="https://leetcode.cn/problems/valid-parentheses/">https://leetcode.cn/problems/valid-parentheses/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>CentOS8安装Docker</title>
    <url>/2020/06/10/CentOS8%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<p><a href="https://developer.aliyun.com/mirror/docker-ce?spm=a2c6h.13651102.0.0.3e221b11A4nUxe">使用阿里源进行安装</a></p>
<p>CentOS7用阿里源安装Docker</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># Step 2: 添加软件源信息</span></span><br><span class="line">sudo yum-config-manager --add-repo https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/docker-ce/</span>linux<span class="regexp">/centos/</span>docker-ce.repo</span><br><span class="line"><span class="comment"># Step 3: 更新并安装Docker-CE</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"><span class="comment"># Step 4: 开启Docker服务</span></span><br><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure>

<p>根据CentOS7的安装方式安装遇到如下问题。<br>错误描述</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">上次元数据过期检查：<span class="number">0</span>:<span class="number">00</span>:<span class="number">11</span> 前，执行于 <span class="number">2020</span>年<span class="number">06</span>月<span class="number">10</span>日 星期三 <span class="number">02</span>时<span class="number">05</span>分<span class="number">21</span>秒。</span><br><span class="line">错误：</span><br><span class="line"> 问题: package docker-ce-<span class="number">3</span>:<span class="number">19.03</span>.<span class="number">11</span>-<span class="number">3</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span> requires containerd<span class="selector-class">.io</span> &gt;= <span class="number">1.2</span>.<span class="number">2</span>-<span class="number">3</span>, but <span class="attribute">none</span> of the providers can be installed</span><br><span class="line">  - cannot install the best candidate <span class="keyword">for</span> the job</span><br><span class="line">  - package containerd<span class="selector-class">.io-1</span>.<span class="number">2.10</span>-<span class="number">3.2</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span> is excluded</span><br><span class="line">  - package containerd<span class="selector-class">.io-1</span>.<span class="number">2.13</span>-<span class="number">3.1</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span> is excluded</span><br><span class="line">  - package containerd<span class="selector-class">.io-1</span>.<span class="number">2.13</span>-<span class="number">3.2</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span> is excluded</span><br><span class="line">  - package containerd<span class="selector-class">.io-1</span>.<span class="number">2.2</span>-<span class="number">3.3</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span> is excluded</span><br><span class="line">  - package containerd<span class="selector-class">.io-1</span>.<span class="number">2.2</span>-<span class="number">3</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span> is excluded</span><br><span class="line">  - package containerd<span class="selector-class">.io-1</span>.<span class="number">2.4</span>-<span class="number">3.1</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span> is excluded</span><br><span class="line">  - package containerd<span class="selector-class">.io-1</span>.<span class="number">2.5</span>-<span class="number">3.1</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span> is excluded</span><br><span class="line">  - package containerd<span class="selector-class">.io-1</span>.<span class="number">2.6</span>-<span class="number">3.3</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span> is excluded</span><br><span class="line">(尝试添加 <span class="string">&#x27;--skip-broken&#x27;</span> 来跳过无法安装的软件包 或 <span class="string">&#x27;--nobest&#x27;</span> 来不只使用最佳选择的软件包)</span><br></pre></td></tr></table></figure>

<p>使用阿里源安装containerd.io安装不低于1.2.2-3的版本</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">yum install -y https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/docker-ce/</span>linux<span class="regexp">/centos/</span><span class="number">7</span><span class="regexp">/x86_64/</span>edge<span class="regexp">/Packages/</span>containerd.io-<span class="number">1.2</span>.<span class="number">13</span>-<span class="number">3.2</span>.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>然后继续根据CentOS7的安装方法安装即可。</p>
<p>参考链接：<a href="https://blog.csdn.net/RtxTitanV/article/details/106550640">https://blog.csdn.net/RtxTitanV/article/details/106550640</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS8</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker删除None镜像</title>
    <url>/2021/04/21/Docker%E5%88%A0%E9%99%A4None%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"># 停止docker</span><br><span class="line">docker stop <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> -<span class="params">a</span> | <span class="params">grep</span> <span class="string">&quot;Exited&quot;</span> | <span class="params">awk</span> &#x27;&#123;<span class="params">print</span> $1 &#125;&#x27;)</span></span><br><span class="line"># 删除docker</span><br><span class="line">docker rm <span class="constructor">$(<span class="params">docker</span> <span class="params">ps</span> -<span class="params">a</span> | <span class="params">grep</span> <span class="string">&quot;Exited&quot;</span> | <span class="params">awk</span> &#x27;&#123;<span class="params">print</span> $1 &#125;&#x27;)</span></span><br><span class="line"># 删除images</span><br><span class="line">docker rmi <span class="constructor">$(<span class="params">docker</span> <span class="params">images</span> | <span class="params">grep</span> <span class="string">&quot;none&quot;</span> | <span class="params">awk</span> &#x27;&#123;<span class="params">print</span> $3&#125;&#x27;)</span></span><br></pre></td></tr></table></figure>

<p>参考链接</p>
<blockquote>
<p> <a href="https://www.jianshu.com/p/d06830de219f">https://www.jianshu.com/p/d06830de219f</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Cloudflare CDN 的一些问题</title>
    <url>/2021/04/24/Cloudflare-CDN-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>Cloudflare 免费版的 CDN 似乎不支持三级域名.</p>
<p>例如 </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">A -&gt; www<span class="selector-class">.abc</span><span class="selector-class">.xxx</span><span class="selector-class">.com</span></span><br><span class="line">B -&gt; abc<span class="selector-class">.xxx</span>.com</span><br></pre></td></tr></table></figure>

<p>访问 A 域名时会提示 SSL 错误, 访问 B 则一切正常.</p>
<p>参考链接</p>
<blockquote>
<p><a href="https://community.cloudflare.com/t/third-level-domain/63383">https://community.cloudflare.com/t/third-level-domain/63383</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker推送镜像遇到的问题</title>
    <url>/2020/06/09/Docker%E6%8E%A8%E9%80%81%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="denied-requested-access-to-the-resource-is-denied"><a href="#denied-requested-access-to-the-resource-is-denied" class="headerlink" title="denied: requested access to the resource is denied"></a>denied: requested access to the resource is denied</h1><figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line">The push refers to repository [docker.io/library/flask-mark-12306-captcha]</span><br><span class="line"><span class="attribute">0566a0ade762</span>: Preparing </span><br><span class="line"><span class="attribute">a82f13d5c08d</span>: Preparing </span><br><span class="line"><span class="attribute">6680b518709b</span>: Preparing </span><br><span class="line"><span class="attribute">42d3338c1387</span>: Preparing </span><br><span class="line"><span class="attribute">380d9d1be624</span>: Preparing </span><br><span class="line"><span class="attribute">5bf497fc7ae4</span>: Waiting </span><br><span class="line"><span class="attribute">079e0a70bca0</span>: Waiting </span><br><span class="line"><span class="attribute">569e5571a3eb</span>: Waiting </span><br><span class="line"><span class="attribute">697765a85531</span>: Waiting </span><br><span class="line"><span class="attribute">8c39f7b1a31a</span>: Waiting </span><br><span class="line"><span class="attribute">88cfc2fcd059</span>: Waiting </span><br><span class="line"><span class="attribute">760e8d95cf58</span>: Waiting </span><br><span class="line"><span class="attribute">7cc1c2d7e744</span>: Waiting </span><br><span class="line"><span class="attribute">8c02234b8605</span>: Waiting </span><br><span class="line"><span class="attribute">denied</span>: requested access to the resource is denied</span><br></pre></td></tr></table></figure>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>push 的时候加上用户名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">docker push <span class="tag">&lt;<span class="name">username</span>&gt;</span>/<span class="tag">&lt;<span class="name">image</span> <span class="attr">name</span>&gt;</span>:<span class="tag">&lt;<span class="name">tag</span> <span class="attr">name</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="An-image-does-not-exist-locally-with-the-tag"><a href="#An-image-does-not-exist-locally-with-the-tag" class="headerlink" title="An image does not exist locally with the tag"></a>An image does not exist locally with the tag</h1><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">(base) root<span class="variable">@ubuntu</span><span class="symbol">:/home/ubuntu/docker/python/FlaskMark12306Captcha</span><span class="comment"># docker push wudinaonao/flask-mark-12306-captcha:v1</span></span><br><span class="line">The push refers to repository [docker.io/wudinaonao/flask-mark<span class="number">-12306</span>-captcha]</span><br><span class="line">An image does <span class="keyword">not</span> exist locally <span class="keyword">with</span> the <span class="symbol">tag:</span> wudinaonao/flask-mark<span class="number">-12306</span>-captcha</span><br></pre></td></tr></table></figure>
<h2 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h2><p>本地不存在指定的镜像，可能构建镜像的时候没有指定tag</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">tag</span> <span class="variable">&lt;old image name&gt;</span> <span class="variable">&lt;username&gt;</span>/<span class="variable">&lt;new image name&gt;</span>:<span class="variable">&lt;tag name&gt;</span></span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">tag</span> flask-<span class="keyword">mark</span>-<span class="number">12306</span>-captcha wudinaonao/flask-<span class="keyword">mark</span>-<span class="number">12306</span>-captch<span class="variable">a:v1</span></span><br></pre></td></tr></table></figure>

<p>完成</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200609193818.png" alt="20200609193818"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker搭建Gitlab服务器</title>
    <url>/2020/05/01/Docker%E6%90%AD%E5%BB%BAGitlab%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Docker搭建Gitlab服务器"><a href="#Docker搭建Gitlab服务器" class="headerlink" title="Docker搭建Gitlab服务器"></a>Docker搭建Gitlab服务器</h1><h2 id="获取-Gitlab-镜像"><a href="#获取-Gitlab-镜像" class="headerlink" title="获取 Gitlab 镜像"></a>获取 Gitlab 镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure>

<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>映射端口，配置访问方式</p>
<ul>
<li>8443  https </li>
<li>8080  http</li>
<li>8022  ssh</li>
</ul>
<p>挂载3个volume到容器里，分别用于配置，持久化，日志。</p>
<span id="more"></span>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">    -p <span class="number">8443</span>:<span class="number">443</span> \</span><br><span class="line">    -p <span class="number">8080</span>:<span class="number">80</span> \</span><br><span class="line">    -p <span class="number">8022</span>:<span class="number">22</span> \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    -v <span class="regexp">/etc/gi</span>tlab<span class="regexp">/config:/</span>etc/gitlab \</span><br><span class="line">    -v <span class="regexp">/var/</span>log<span class="regexp">/gitlab/</span>logs:<span class="regexp">/var/</span>log/gitlab \</span><br><span class="line">    -v <span class="regexp">/var/</span>opt<span class="regexp">/gitlab/</span>data:<span class="regexp">/var/</span>opt/gitlab \</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure>

<h2 id="配置-Gitlab"><a href="#配置-Gitlab" class="headerlink" title="配置 Gitlab"></a>配置 Gitlab</h2><p>进入容器修改配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker exec -it gitlab <span class="regexp">/bin/</span>bash</span><br><span class="line">vim <span class="regexp">/etc/gi</span>tlab/gitlab.rb</span><br></pre></td></tr></table></figure>

<p>或者你可以直接修改宿主机的配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/gi</span>tlab<span class="regexp">/config/gi</span>tlab.rb</span><br></pre></td></tr></table></figure>

<p>然后进入容器重新加载配置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker exec -it gitlab <span class="regexp">/bin/</span>bash</span><br><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>

<h3 id="gitlab-rb-配置文件"><a href="#gitlab-rb-配置文件" class="headerlink" title="gitlab.rb 配置文件"></a>gitlab.rb 配置文件</h3><p>假如你有一个域名：gitlab.wudinaonao.com (这是我的域名)</p>
<p>增加内容</p>
<ul>
<li>external_url 设置<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># 注意要有前缀，不能直接写域名，http或https</span></span><br><span class="line"><span class="meta"># example</span></span><br><span class="line"><span class="meta"># external_url &quot;https:<span class="comment">//gitlab.wudinaonao.com&quot;</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">external_url <span class="string">&quot;https://gitlab.wudinaonao.com&quot;</span></span><br></pre></td></tr></table></figure>
如果使用https的话记得配置nginx选项。具体参见nginx配置ssl</li>
</ul>
<p>重载配置</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gitlab-ctl reconfigure</span></span><br></pre></td></tr></table></figure>

<h2 id="反向代理到容器提供的8848端口"><a href="#反向代理到容器提供的8848端口" class="headerlink" title="反向代理到容器提供的8848端口"></a>反向代理到容器提供的8848端口</h2><h3 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">...省略其他</span><br><span class="line"></span><br><span class="line">location ~/ &#123;</span><br><span class="line">    <span class="comment"># 如果代理到一个动态域名，这里需要设置解析DNS</span></span><br><span class="line">    <span class="comment"># 不然Nginx只在启动的时候解析一次</span></span><br><span class="line">    resolver <span class="number">8.8</span>.<span class="number">8.8</span> <span class="number">114.114</span>.<span class="number">114.114</span> valid=<span class="number">10</span>s;</span><br><span class="line">    resolver_timeout <span class="number">3</span>s;</span><br><span class="line">    <span class="comment"># 假如你要代理到 127.0.0.1:8848</span></span><br><span class="line">    set <span class="variable">$target</span> <span class="string">&quot;127.0.0.1:8848&quot;</span>;</span><br><span class="line">    <span class="comment"># 这里之前填写成 $proxy_host 导致代理失败</span></span><br><span class="line">    proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">    proxy_set_header X-Forwarder-For <span class="variable">$remote_addr</span>;</span><br><span class="line">    proxy_ssl_certificate     <span class="comment"># 证书路径;  </span></span><br><span class="line">    proxy_ssl_certificate_key <span class="comment"># 私钥路径;</span></span><br><span class="line">    proxy_pass https:<span class="regexp">//</span><span class="variable">$target</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>tlab.wudinaonao.com</span><br></pre></td></tr></table></figure>

<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200501235435.png" alt="20200501235435"></p>
<p>第一次登录需要设置root密码。</p>
<p>这里我已经设置好了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker日志查看与清理</title>
    <url>/2020/11/26/Docker%E6%97%A5%E5%BF%97%E6%9F%A5%E7%9C%8B%E4%B8%8E%E6%B8%85%E7%90%86/</url>
    <content><![CDATA[<p>查看日志</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker logs container_name_or_id</span></span><br></pre></td></tr></table></figure>

<p>Docker 日志目录</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>containers/container_id</span><br></pre></td></tr></table></figure>

<h2 id="设置Docker容器日志大小-以docker-compose文件为例"><a href="#设置Docker容器日志大小-以docker-compose文件为例" class="headerlink" title="设置Docker容器日志大小, 以docker-compose文件为例"></a>设置Docker容器日志大小, 以docker-compose文件为例</h2><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">v2ray:</span> </span><br><span class="line"><span class="symbol">  image:</span> v2ray</span><br><span class="line"><span class="symbol">  restart:</span> always </span><br><span class="line"><span class="symbol">  logging:</span> </span><br><span class="line"><span class="symbol">    driver:</span> <span class="string">&quot;json-file&quot;</span></span><br><span class="line"><span class="symbol">    options:</span> </span><br><span class="line">      max-size: <span class="string">&quot;5g&quot;</span></span><br></pre></td></tr></table></figure>
<p>日志被限制在5g大小.</p>
<h2 id="更改全局设置"><a href="#更改全局设置" class="headerlink" title="更改全局设置"></a>更改全局设置</h2><p>增加项文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;log-driver&quot;</span><span class="punctuation">:</span><span class="string">&quot;json-file&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;max-size&quot;</span><span class="punctuation">:</span><span class="string">&quot;500m&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;max-file&quot;</span><span class="punctuation">:</span><span class="string">&quot;3&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>到文件, 如果没有则新建.</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/</span>docker/daemon.json</span><br></pre></td></tr></table></figure>

<p>重启docker</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service docker restart</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署Jupyter</title>
    <url>/2020/12/21/Docker%E9%83%A8%E7%BD%B2Jupyter/</url>
    <content><![CDATA[<p>为了方便随时随地测试一些算法，做一些研究。笔者在自己的服务器上安装了jupyter-lab，这个是jupyter的下一代版本。但是因为不想搞乱自己服务器的环境，于是尝试寻找看看有没有jupyter的docker镜像，发现还真的有官方出的镜像。</p>
<p>官方出了很多镜像，根据不同的需求选择合适的镜像。本次搭建笔者选择了<code>jupyter/datascience-notebook</code>这个镜像，具体镜像列表参考:</p>
<blockquote>
<p><a href="https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html">https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html</a></p>
</blockquote>
<p>拉取镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull jupyter/datascience-notebook</span><br></pre></td></tr></table></figure>

<p>运行一个容器</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -p <span class="number">8888</span>:<span class="number">8888</span> jupyter/datascience-notebook</span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># docker run -p 8888:8888 jupyter/datascience-notebook</span></span><br><span class="line">Executing the command: jupyter notebook</span><br><span class="line">[I <span class="number">12</span>:<span class="number">28</span>:<span class="number">00.559</span> NotebookApp] Writing notebook server cookie secret to <span class="regexp">/home/</span>jovyan<span class="regexp">/.local/</span>share<span class="regexp">/jupyter/</span>runtime/notebook_cookie_secret</span><br><span class="line">[I <span class="number">12</span>:<span class="number">28</span>:<span class="number">02.995</span> NotebookApp] JupyterLab extension loaded from <span class="regexp">/opt/</span>conda<span class="regexp">/lib/</span>python3.<span class="number">8</span><span class="regexp">/site-packages/</span>jupyterlab</span><br><span class="line">[I <span class="number">12</span>:<span class="number">28</span>:<span class="number">02.996</span> NotebookApp] JupyterLab application directory is <span class="regexp">/opt/</span>conda<span class="regexp">/share/</span>jupyter/lab</span><br><span class="line">[I <span class="number">12</span>:<span class="number">28</span>:<span class="number">03.006</span> NotebookApp] Serving notebooks from local directory: <span class="regexp">/home/</span>jovyan</span><br><span class="line">[I <span class="number">12</span>:<span class="number">28</span>:<span class="number">03.006</span> NotebookApp] Jupyter Notebook <span class="number">6.1</span>.<span class="number">5</span> is running at:</span><br><span class="line">[I <span class="number">12</span>:<span class="number">28</span>:<span class="number">03.007</span> NotebookApp] http:<span class="regexp">//</span>a0a0fecd00d5:<span class="number">8888</span>/?token=<span class="number">2</span>f725d16b757283384db037ff1707b590eca49d9ac037f3b</span><br><span class="line">[I <span class="number">12</span>:<span class="number">28</span>:<span class="number">03.007</span> NotebookApp]  or http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8888</span>/?token=<span class="number">2</span>f725d16b757283384db037ff1707b590eca49d9ac037f3b</span><br><span class="line">[I <span class="number">12</span>:<span class="number">28</span>:<span class="number">03.007</span> NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).</span><br><span class="line">[C <span class="number">12</span>:<span class="number">28</span>:<span class="number">03.019</span> NotebookApp] </span><br><span class="line">    </span><br><span class="line">    To access the notebook, open this file <span class="keyword">in</span> a browser:</span><br><span class="line">        file:<span class="regexp">//</span><span class="regexp">/home/</span>jovyan<span class="regexp">/.local/</span>share<span class="regexp">/jupyter/</span>runtime/nbserver-<span class="number">7</span>-open.html</span><br><span class="line">    Or copy and paste one of these URLs:</span><br><span class="line">        http:<span class="regexp">//</span>a0a0fecd00d5:<span class="number">8888</span>/?token=<span class="number">2</span>f725d16b757283384db037ff1707b590eca49d9ac037f3b</span><br><span class="line">     or http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8888</span>/?token=<span class="number">2</span>f725d16b757283384db037ff1707b590eca49d9ac037f3b</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>访问你部署docker的那台主机，例如本次我部署在<code>jupyter.local</code>这台主机上，我们访问<code>http://jupyter.local:8888</code>会看到如下界面。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20201222203043.png" alt="20201222203043"></p>
<p>你可以使用token登录或使用token设置一个新密码。本次的token为<code>2f725d16b757283384db037ff1707b590eca49d9ac037f3b</code></p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20201222203206.png" alt="20201222203206"></p>
<p>用token设置一个新密码然后登录。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20201222203257.png" alt="20201222203257"></p>
<p>这样就进来了。</p>
<p>但是这样我们的所有工作都在这个容器里，没有挂载外部的数据卷进来，当容器消失后我们的工作内容也将烟消云散。所以我们需要挂载外部的数据卷进来。</p>
<p>这里推荐使用<code>docker-compose</code>来启动容器，yaml格式的语法阅读非常清晰。</p>
<p>ubuntu 可以使用以下命令安装</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> docker-compose -y</span><br></pre></td></tr></table></figure>

<p>这里我们来看一个 docker compose 模板</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">  Jupyter:</span></span><br><span class="line"><span class="symbol">    image:</span> jupyter/datascience-notebook:latest</span><br><span class="line"><span class="symbol">    tty:</span> true</span><br><span class="line"><span class="symbol">    restart:</span> always</span><br><span class="line"><span class="symbol">    container_name:</span> jupyter</span><br><span class="line"><span class="symbol">    user:</span> root</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">&quot;8888:8888&quot;</span></span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="string">&quot;$&#123;PWD&#125;/work:/home/jovyan/work&quot;</span></span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line">      - JUPYTER_ENABLE_LAB=yes</span><br><span class="line">      - GRANT_SUDO=yes</span><br><span class="line"><span class="symbol">    logging:</span></span><br><span class="line"><span class="symbol">      driver:</span> <span class="string">&quot;json-file&quot;</span></span><br><span class="line"><span class="symbol">      options:</span></span><br><span class="line">        max-size: <span class="string">&quot;100m&quot;</span></span><br></pre></td></tr></table></figure>

<p>在当前目录下新建一个<code>work</code>目录， 我们把这个目录挂载到容器里。<br><code>JUPYTER_ENABLE_LAB=yes</code>启用jupyter-lab，这个是jupyter的下一代版本。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@ubuntu</span><span class="symbol">:/home/naonao</span><span class="comment"># mkdir work</span></span><br><span class="line">root<span class="variable">@ubuntu</span><span class="symbol">:/home/naonao</span><span class="comment"># ls</span></span><br><span class="line">work</span><br><span class="line">root<span class="variable">@ubuntu</span><span class="symbol">:/home/naonao</span><span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>例如我在<code>/home/naonao</code>这个目录下新建一个<code>work</code>文件夹，然后再本目录下创建一个<code>docker-compose.yaml</code>文件，复制上面的内容进去。</p>
<p>运行容器</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker-compose up</span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">root@ubuntu:<span class="regexp">/home/</span>naonao<span class="comment"># nano docker-compose.yaml</span></span><br><span class="line">root@ubuntu:<span class="regexp">/home/</span>naonao<span class="comment"># ls</span></span><br><span class="line">docker-compose.yaml  work</span><br><span class="line">root@ubuntu:<span class="regexp">/home/</span>naonao<span class="comment"># docker-compose up</span></span><br><span class="line">Creating network <span class="string">&quot;naonao_default&quot;</span> with the default driver</span><br><span class="line">Creating jupyter ... done</span><br><span class="line">Attaching to jupyter</span><br><span class="line">jupyter    | Set username to: jovyan</span><br><span class="line">jupyter    | usermod: no changes</span><br><span class="line">jupyter    | Granting jovyan sudo access and appending <span class="regexp">/opt/</span>conda/bin to sudo PATH</span><br><span class="line">jupyter    | Executing the command: jupyter lab</span><br><span class="line">jupyter    | [I <span class="number">12</span>:<span class="number">40</span>:<span class="number">59.811</span> LabApp] Writing notebook server cookie secret to <span class="regexp">/home/</span>jovyan<span class="regexp">/.local/</span>share<span class="regexp">/jupyter/</span>runtime/notebook_cookie_secret</span><br><span class="line">jupyter    | [I <span class="number">12</span>:<span class="number">41</span>:<span class="number">00.953</span> LabApp] JupyterLab extension loaded from <span class="regexp">/opt/</span>conda<span class="regexp">/lib/</span>python3.<span class="number">8</span><span class="regexp">/site-packages/</span>jupyterlab</span><br><span class="line">jupyter    | [I <span class="number">12</span>:<span class="number">41</span>:<span class="number">00.954</span> LabApp] JupyterLab application directory is <span class="regexp">/opt/</span>conda<span class="regexp">/share/</span>jupyter/lab</span><br><span class="line">jupyter    | [I <span class="number">12</span>:<span class="number">41</span>:<span class="number">00.957</span> LabApp] Serving notebooks from local directory: <span class="regexp">/home/</span>jovyan</span><br><span class="line">jupyter    | [I <span class="number">12</span>:<span class="number">41</span>:<span class="number">00.958</span> LabApp] Jupyter Notebook <span class="number">6.1</span>.<span class="number">5</span> is running at:</span><br><span class="line">jupyter    | [I <span class="number">12</span>:<span class="number">41</span>:<span class="number">00.958</span> LabApp] http:<span class="regexp">//</span><span class="number">051</span>c0b8b860b:<span class="number">8888</span>/?token=a37dc92a50b7b6f3fb0f01abfee6a374b5fb74d23a0a3114</span><br><span class="line">jupyter    | [I <span class="number">12</span>:<span class="number">41</span>:<span class="number">00.958</span> LabApp]  or http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8888</span>/?token=a37dc92a50b7b6f3fb0f01abfee6a374b5fb74d23a0a3114</span><br><span class="line">jupyter    | [I <span class="number">12</span>:<span class="number">41</span>:<span class="number">00.958</span> LabApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).</span><br><span class="line">jupyter    | [C <span class="number">12</span>:<span class="number">41</span>:<span class="number">00.963</span> LabApp] </span><br><span class="line">jupyter    |     </span><br><span class="line">jupyter    |     To access the notebook, open this file <span class="keyword">in</span> a browser:</span><br><span class="line">jupyter    |         file:<span class="regexp">//</span><span class="regexp">/home/</span>jovyan<span class="regexp">/.local/</span>share<span class="regexp">/jupyter/</span>runtime/nbserver-<span class="number">14</span>-open.html</span><br><span class="line">jupyter    |     Or copy and paste one of these URLs:</span><br><span class="line">jupyter    |         http:<span class="regexp">//</span><span class="number">051</span>c0b8b860b:<span class="number">8888</span>/?token=a37dc92a50b7b6f3fb0f01abfee6a374b5fb74d23a0a3114</span><br><span class="line">jupyter    |      or http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8888</span>/?token=a37dc92a50b7b6f3fb0f01abfee6a374b5fb74d23a0a3114</span><br></pre></td></tr></table></figure>

<p>同刚才一样，你可以用token设置一个密码，或者也可以直接访问连接<code>http://jupyter.local:8888/?token=a37dc92a50b7b6f3fb0f01abfee6a374b5fb74d23a0a3114</code>，这里注意访问你部署docker的主机的地址，本例我部署在<code>jupyter.local</code>主机。我们将看到jupyer-lab的界面。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20201222204526.png" alt="20201222204526"></p>
<p>进入<code>/work</code>目录新建一个文件。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20201222204649.png" alt="20201222204649"></p>
<p>我的得到了一个Permission denied错误。</p>
<p>查阅资料发现</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">You must <span class="keyword">grant</span> the <span class="keyword">within</span>-container notebook <span class="keyword">user</span> <span class="keyword">or</span> <span class="keyword">group</span> (NB_UID <span class="keyword">or</span> NB_GID) <span class="keyword">write</span> <span class="keyword">access</span> <span class="keyword">to</span> the host directory (e.g., sudo chown <span class="number">1000</span> /<span class="keyword">some</span>/host/folder/<span class="keyword">for</span>/<span class="keyword">work</span>).</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://jupyter-docker-stacks.readthedocs.io/en/latest/using/common.html">https://jupyter-docker-stacks.readthedocs.io/en/latest/using/common.html</a></p>
</blockquote>
<p>你必须允许容器的用户或组写你设置的这个目录</p>
<p>例如我挂载目录<code>/home/naonao/work</code>到容器里, 那么我需要更改这个目录的权限.<code>chown 1000 /home/naonao/work</code></p>
<p>重启容器，问题解决。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20201222204942.png" alt="20201222204942"></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@ubuntu</span><span class="symbol">:/home/naonao</span><span class="comment"># cd work</span></span><br><span class="line">root<span class="variable">@ubuntu</span><span class="symbol">:/home/naonao/work</span><span class="comment"># ls</span></span><br><span class="line">Untitled.ipynb</span><br><span class="line">root<span class="variable">@ubuntu</span><span class="symbol">:/home/naonao/work</span><span class="comment"># </span></span><br></pre></td></tr></table></figure>



<p>如果把它架设在公共云上，那么我们可以通过域名在任意位置访问到jupyter环境。</p>
<h2 id="Nginx-SSL"><a href="#Nginx-SSL" class="headerlink" title="Nginx + SSL"></a>Nginx + SSL</h2><p>通过Nginx反向代理并使用SSL加密HTTP</p>
<p>笔者用宝塔新建了一个静态网站，并设置了Let’s Encrpyt证书。<br><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20201222205257.png" alt="20201222205257"></p>
<p>在华为云上部署docker，因为8888端口被占用，所以本次使用10000端口，在宝塔面板添加一个反向代理，当然你也可以自己配置Nginx。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20201222205721.png" alt="20201222205721"></p>
<p>完成单击配置文件</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20201222210023.png" alt="20201222210023"></p>
<p>增加websocket</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># websocket headers</span></span><br><span class="line"><span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Connection <span class="variable">$connection_upgrade</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Scheme <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br></pre></td></tr></table></figure>

<p>然后在点击左边目录的配置文件增加</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">map</span> $http_upgrade $connection_upgrade &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    <span class="string">&#x27;&#x27;</span>      <span class="keyword">close</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20201222205825.png" alt="20201222205825"></p>
<p>保存。</p>
<p>访问<code>https://jupyter.wudinaonao.com</code>一切正常</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20201222210506.png" alt="20201222210506"></p>
<h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><h3 id="Python3-connecting"><a href="#Python3-connecting" class="headerlink" title="Python3 connecting"></a>Python3 connecting</h3><p>有时候通过Nginx反向代理会出现可以访问界面但是无法连接到python，这是因为没有配置websocket导致。</p>
<p>通常出现在这种情况下，用户通过HTTPS访问Nginx的反向代理。即</p>
<p>user —https—&gt; nginx —http—&gt; docker</p>
<blockquote>
<p><a href="https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html">https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html</a></p>
<p><a href="https://jupyterhub.readthedocs.io/en/stable/reference/config-proxy.html">https://jupyterhub.readthedocs.io/en/stable/reference/config-proxy.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>ESXI 更改网卡速率并设置脚本</title>
    <url>/2020/04/28/ESXI-%E6%9B%B4%E6%94%B9%E7%BD%91%E5%8D%A1%E9%80%9F%E7%8E%87%E5%B9%B6%E8%AE%BE%E7%BD%AE%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="ESXI-更改网卡速率并设置脚本"><a href="#ESXI-更改网卡速率并设置脚本" class="headerlink" title="ESXI 更改网卡速率并设置脚本"></a>ESXI 更改网卡速率并设置脚本</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>用闲置主机搭了一个ESXI，上面用Ubuntu跑了一个Samba服务做家庭文件中心。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428162239.png" alt=""></p>
<p>平常从PT站下的资源直接放到这里提供给家里的小米电视和各种盒子等。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一次从服务器拷贝文件的时候发现速度只有</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428162559.png" alt=""></p>
<p>百兆带宽不到？</p>
<span id="more"></span>

<p>登录 ESXI 查看网卡设置</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428162711.png" alt=""></p>
<p>我千兆网卡怎么设置的是百兆速度？</p>
<p>点击 编辑设置 更改链路速度</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428162801.png" alt=""></p>
<p>保存</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428162906.png" alt=""></p>
<p>速度正常了。</p>
<h2 id="好景不长"><a href="#好景不长" class="headerlink" title="好景不长"></a>好景不长</h2><p>本以为这样设置好就万事大吉了。But！Too young too simple! 第二天又成这样了。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428162711.png" alt=""></p>
<p>仿佛又自动设置成百兆速度了？</p>
<p>于是乎，痛定思痛！</p>
<p>我们需要编写一个脚本来判断网卡是不是又自动改回百兆了，如果改回来了就自动改过去！</p>
<h3 id="撸起袖子开始干"><a href="#撸起袖子开始干" class="headerlink" title="撸起袖子开始干"></a>撸起袖子开始干</h3><ul>
<li><p>开启ESXI SSH 登录</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428163347.png" alt=""></p>
</li>
<li><p>登录 ESXI </p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428163524.png" alt=""></p>
</li>
<li><p>我们在 /vmfs/volumes/datastore1 这样的位置保存，为毛？</p>
</li>
<li><p>这样重启不会重置，之前我在根目录下创建的script目录在一次意外断电重启后神秘消失了，人间惨剧！</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /vmfs/volumes/datastore1</span><br><span class="line"><span class="built_in">mkdir</span> script</span><br><span class="line"><span class="built_in">cd</span> script</span><br></pre></td></tr></table></figure>

<ul>
<li>创建脚本 <code>vi ChangeNetworkAdapterSpeed.sh</code> </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">Change Network Adapter Speed 1000Mbps</span></span><br><span class="line"></span><br><span class="line">currentSpeed=`esxcfg-nics -l|grep Mbps|awk &#x27;&#123;print $5&#125;&#x27;`</span><br><span class="line">if [ $currentSpeed != &quot;1000Mbps&quot; ]; then</span><br><span class="line">    # 注意 vmnic0 是你网卡的名字</span><br><span class="line">    esxcfg-nics -s 1000 -d full vmnic0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<ul>
<li><p>保存 :wq</p>
</li>
<li><p>执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x ChangeNetworkAdapterSpeed.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>加入定时任务 每分钟检测一次</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /var/spool/cron/crontabs/root &lt;&lt;&quot;EOF&quot;</span><br><span class="line">*/1    *   *   *   *   /bin/sh /vmfs/volumes/datastore1/script/ChangeNetworkAdapterSpeed.sh</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<ul>
<li><p>每次重启 ESXI 它的定时任务是会重置的，所以我们需要修改<code>/etc/rc.local.d/local.sh</code></p>
</li>
<li><p>在里面添加</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">add script to crontab</span></span><br><span class="line">cat &gt;&gt; /var/spool/cron/crontabs/root &lt;&lt;&quot;EOF&quot;</span><br><span class="line">*/1    *   *   *   *   /bin/sh /vmfs/volumes/datastore1/script/ChangeNetworkAdapterSpeed.sh</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">restart crontabs</span></span><br><span class="line">/bin/kill $(cat /var/run/crond.pid)</span><br><span class="line">/usr/lib/vmware/busybox/bin/busybox crond</span><br></pre></td></tr></table></figure>
<ul>
<li><p>注意添加在 <code>exit 0</code> 前面</p>
</li>
<li><p>重启 crontabs</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/bin/kill $(cat /var/run/crond.pid)</span><br><span class="line">/usr/lib/vmware/busybox/bin/busybox crond</span><br></pre></td></tr></table></figure>
<p>大功告成。</p>
]]></content>
      <categories>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>Vmware</tag>
        <tag>ESXI</tag>
        <tag>Shell</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask部署Keras模型遇到的问题</title>
    <url>/2020/04/28/Flask%E9%83%A8%E7%BD%B2Keras%E6%A8%A1%E5%9E%8B%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Flask部署Keras模型遇到的问题"><a href="#Flask部署Keras模型遇到的问题" class="headerlink" title="Flask部署Keras模型遇到的问题"></a>Flask部署Keras模型遇到的问题</h1><h2 id="AttributeError-‘-thread-local’-object-has-no-attribute-‘value’"><a href="#AttributeError-‘-thread-local’-object-has-no-attribute-‘value’" class="headerlink" title="AttributeError: ‘_thread._local’ object has no attribute ‘value’"></a>AttributeError: ‘_thread._local’ object has no attribute ‘value’</h2><p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428200312.png" alt="20200428200312"></p>
<ul>
<li><p>定位到 <code>tensorflow_backend.py</code> 这个文件</p>
</li>
<li><p>在这个位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@functools.wraps(<span class="params">func</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">symbolic_fn_wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    <span class="keyword">if</span> _SYMBOLIC_SCOPE.value:</span><br><span class="line">        <span class="keyword">with</span> get_graph().as_default():</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="keyword">return</span> symbolic_fn_wrapper</span><br></pre></td></tr></table></figure>
</li>
<li><p>增加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_SYMBOLIC_SCOPE.value = <span class="literal">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>变成这样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@functools.wraps(<span class="params">func</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">symbolic_fn_wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    _SYMBOLIC_SCOPE.value = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> _SYMBOLIC_SCOPE.value:</span><br><span class="line">        <span class="keyword">with</span> get_graph().as_default():</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="keyword">return</span> symbolic_fn_wrapper</span><br></pre></td></tr></table></figure>
</li>
<li><p>问题解决</p>
</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428200702.png" alt="20200428200702"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Keras</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>ESXI下无损扩展Linux硬盘空间</title>
    <url>/2020/06/03/ESXI%E4%B8%8B%E6%97%A0%E6%8D%9F%E6%89%A9%E5%B1%95Linux%E7%A1%AC%E7%9B%98%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200603160434.png" alt="20200603160434"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在ESXI下扩容磁盘是非常简单的。例如，我制作了一个通用Ubuntu镜像。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200603160729.png" alt="20200603160729"></p>
<p>当我像创建一个基于Ubuntu的虚拟机时，我直接导入ESXI即可，不用重新安装一个，非常便捷。</p>
<p>但是我制作的这个镜像文件设置磁盘大小只有16G，在长期使用后可能磁盘空间就不够了，这个时候我们需要对磁盘进行扩容。</p>
<p>你可能会问为什么制作镜像的时候不设置个大点的硬盘空间？因为当ESXI进行硬盘扩容的时候，空间只能改大不能改小。</p>
<h1 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h1><p>我们以Database这个虚拟机为例</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200603161130.png" alt="20200603161130"></p>
<p>先使虚拟机处于关闭状态。然后点击编辑</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200603161200.png" alt="20200603161200"></p>
<p>我们把<strong>硬盘1</strong>改成64GB，保存</p>
<p>打开虚拟机。</p>
<p>登录虚拟机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure>

<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200603161352.png" alt="20200603161352"></p>
<p>可以看到空间并没有增加。我们需要把扩容的空间无损增加到根目录。<strong>以下操作有风险，建议创建快照</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">fdisk <span class="regexp">/dev/</span>sda</span><br><span class="line">d</span><br><span class="line"><span class="number">2</span></span><br><span class="line">n</span><br><span class="line">回车(默认)</span><br><span class="line">回车(默认)</span><br><span class="line">y</span><br><span class="line">wq</span><br></pre></td></tr></table></figure>

<p><strong>注意，我的根目录挂载在/dev/sda2，所以删除的分区号是2</strong></p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200603161840.png" alt="20200603161840"></p>
<p>原理就是把之间个根目录挂载的分区删除了，然后重建一个扩容的分区。</p>
<p>然后格式化磁盘</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">resize2fs <span class="regexp">/dev/</span>sda2</span><br></pre></td></tr></table></figure>

<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200603162037.png" alt="20200603162037"></p>
<p>查看一下结果。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200603162100.png" alt="20200603162100"></p>
<p>可以看到已经扩容成功了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask集成React前端部署</title>
    <url>/2020/04/29/Flask%E9%9B%86%E6%88%90React%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="Flask集成React前端部署"><a href="#Flask集成React前端部署" class="headerlink" title="Flask集成React前端部署"></a>Flask集成React前端部署</h1><h2 id="Build-React-文件"><a href="#Build-React-文件" class="headerlink" title="Build React 文件"></a>Build React 文件</h2><ul>
<li><p>打包 React</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">run</span> build</span><br></pre></td></tr></table></figure>
</li>
<li><p>得到build目录下的静态文件</p>
</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200429234258.png" alt="20200429234258"></p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200429234325.png" alt="20200429234325"></p>
<h2 id="设置-Flask"><a href="#设置-Flask" class="headerlink" title="设置 Flask"></a>设置 Flask</h2><p>Flask 默认静态资源在static目录，html文件在template目录，我们设置成我们自定义的路径。</p>
<ul>
<li><p>例如我们的目录结构</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200429234735.png" alt="20200429234735"></p>
</li>
<li><p>我们构建好的静态文件放在/frontend/flask-mark-12306-captcha-frontend/build这个目录里</p>
</li>
<li><p>我们的在 App.py （你的应用程序入口）里面设置</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> mark</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> get</span><br><span class="line"><span class="keyword">from</span> controller <span class="keyword">import</span> errorHandler</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态文件目录</span></span><br><span class="line">frontEndDir = os.path.join(<span class="string">&quot;frontend&quot;</span>, <span class="string">&quot;flask-mark-12306-captcha-frontend&quot;</span>, <span class="string">&quot;build&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, static_url_path=<span class="string">&#x27;&#x27;</span>, static_folder=frontEndDir)</span><br><span class="line">app.register_blueprint(errorHandler)</span><br><span class="line">app.register_blueprint(mark)</span><br><span class="line">app.register_blueprint(get)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 渲染 index.html</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>这样我们就设置好了。</p>
</li>
<li><p>跑一下项目看一下。</p>
</li>
<li><p>问题解决。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200429235845.png" alt="20200429235845"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Your local changes to the following files would be overwritten by merge</title>
    <url>/2020/11/20/Git-Your-local-changes-to-the-following-files-would-be-overwritten-by-merge/</url>
    <content><![CDATA[<h1 id="Your-local-changes-to-the-following-files-would-be-overwritten-by-merge"><a href="#Your-local-changes-to-the-following-files-would-be-overwritten-by-merge" class="headerlink" title="Your local changes to the following files would be overwritten by merge"></a>Your local changes to the following files would be overwritten by merge</h1><h2 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h2><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">e66515c..389e67f  master     -&gt; gitlab/master</span><br><span class="line"><span class="keyword">error: </span>Your local changes to the following files would be overwritten by merge:</span><br><span class="line">        config/clash/haikou.yaml</span><br><span class="line">        config/clash/yuncheng.yaml</span><br><span class="line">Please commit your changes or stash them before you merge.</span><br><span class="line">Aborting</span><br></pre></td></tr></table></figure>

<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>放弃本地修改,直接覆盖</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab 迁移服务器</title>
    <url>/2020/05/22/Gitlab-%E8%BF%81%E7%A7%BB%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="确定版本"><a href="#确定版本" class="headerlink" title="确定版本"></a>确定版本</h1><p>确定源服务器和目标服务器的版本。不然恢复备份时候会出现版本不一致的问题。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200522224718.png" alt="20200522224718"></p>
<p>基于Docker的Gitlab，可以先更新一下镜像。再进行备份。或者目标服务器拉取指定版本的镜像。</p>
<h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><p>进入镜像，执行命令生成备份</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create <span class="attribute">RAILS_ENV</span>=production </span><br></pre></td></tr></table></figure>

<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200522225121.png" alt="20200522225121"></p>
<p>备份完成。<strong>注意！gitlab.rb 这个配置文件需要手动复制到目标服务器。</strong></p>
<h1 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h1><p>找到备份的配置文件。在你挂载的/data/backups目录下</p>
<p>例如我的位置</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200522225742.png" alt="20200522225742"></p>
<p>拷贝到目标服务器的相同目录下，例如</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200522230003.png" alt="20200522230003"></p>
<p>进入容器执行</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:restore <span class="attribute">RAILS_ENV</span>=production   <span class="attribute">BACKUP</span>=1590159208_2020_05_22_13.0.0</span><br></pre></td></tr></table></figure>
<p><strong>注意BACKUP的时间标记。</strong>为你需要恢复的备份。</p>
<p>复制gitlab.rb这个文件到目标服务器。</p>
<p>重启Gitlab</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gitlab-ctl reconfigure</span></span><br><span class="line"><span class="attribute">gitlab-ctl restart</span></span><br></pre></td></tr></table></figure>

<p>迁移完成。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab添加邮箱</title>
    <url>/2020/05/06/Gitlab%E6%B7%BB%E5%8A%A0%E9%82%AE%E7%AE%B1/</url>
    <content><![CDATA[<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200506000117.png" alt="20200506000117"></p>
<p>腾讯企业邮箱配置如下，其他邮箱同样适用。</p>
<p>找到配置</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = true</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.exmail.qq.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = <span class="number">465</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;gitlab@wudinaonao.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;xxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;wudinaonao.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = true</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = true</span><br></pre></td></tr></table></figure>

<p>在找到配置</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># gitlab 发件邮箱</span></span><br><span class="line">gitlab_rails[&#x27;gitlab_email_from&#x27;] = &#x27;gitlab@wudinaonao.com&#x27;</span><br><span class="line"><span class="meta"># 默认标题</span></span><br><span class="line">gitlab_rails[&#x27;gitlab_email_display_name&#x27;] = &#x27;Gitlab&#x27;</span><br></pre></td></tr></table></figure>

<p>重载gitlab配置</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gitlab-ctl reconfigure</span></span><br></pre></td></tr></table></figure>

<p>登录到你搭建的Gitlab发一封重置密码的邮件试试</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200506000733.png" alt="20200506000733"></p>
<p>成功</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200506000803.png" alt="20200506000803"></p>
<p>阿里云企业邮箱配置</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = true</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.yourself.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = <span class="number">465</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;yourself user name&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;yourself password&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;yourself hostname&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = false</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = true</span><br><span class="line"></span><br><span class="line">###! **<span class="symbol">Can</span> be: <span class="string">&#x27;none&#x27;</span>, <span class="string">&#x27;peer&#x27;</span>, <span class="string">&#x27;client_once&#x27;</span>, <span class="string">&#x27;fail_if_no_peer_cert&#x27;</span>**</span><br><span class="line">###! <span class="symbol">Docs</span>: http://api.rubyonrails.org/classes/<span class="symbol">ActionMailer</span>/<span class="symbol">Base</span>.html</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_openssl_verify_mode&#x27;</span>] = <span class="string">&#x27;none&#x27;</span></span><br></pre></td></tr></table></figure>

<p>更多邮箱配置参见官方</p>
<p><a href="https://docs.gitlab.com/omnibus/settings/smtp.html">https://docs.gitlab.com/omnibus/settings/smtp.html</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://docs.gitlab.com/omnibus/settings/smtp.html">https://docs.gitlab.com/omnibus/settings/smtp.html</a></p>
<p><a href="https://gitlab.com/gitlab-org/gitlab-foss/-/issues/446">https://gitlab.com/gitlab-org/gitlab-foss/-/issues/446</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript 中那些奇怪的符号</title>
    <url>/2022/04/04/Javascript-%E4%B8%AD%E9%82%A3%E4%BA%9B%E5%A5%87%E6%80%AA%E7%9A%84%E7%AC%A6%E5%8F%B7/</url>
    <content><![CDATA[<p>摘自</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a></p>
</blockquote>
<h2 id="展开语法-Spread-syntax"><a href="#展开语法-Spread-syntax" class="headerlink" title="展开语法(Spread syntax)"></a>展开语法(Spread syntax)</h2><p>展开语法(Spread syntax), 可以在函数调用/数组构造时, 将数组表达式或者string在语法层面展开；还可以在构造字面量对象时, 将对象表达式按key-value的方式展开。(译者注: 字面量一般指 [1, 2, 3] 或者 {name: “mdn”} 这种简洁的构造方式)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(...numbers));</span><br><span class="line"><span class="comment">// expected output: 6</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum.<span class="title function_">apply</span>(<span class="literal">null</span>, numbers));</span><br><span class="line"><span class="comment">// expected output: 6</span></span><br></pre></td></tr></table></figure>

<h3 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [...arr]; <span class="comment">// like arr.slice()</span></span><br><span class="line">arr2.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr2 此时变成 [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// arr 不受影响</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>实际上, 展开语法和 Object.assign() 行为一致, 执行的都是浅拷贝(只遍历一层)。如果想对多维数组进行深拷贝, 下面的示例就有些问题了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]];</span><br><span class="line"><span class="keyword">var</span> b = [...a];</span><br><span class="line">b.<span class="title function_">shift</span>().<span class="title function_">shift</span>(); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// Now array a is affected as well: [[2], [3]]</span></span><br></pre></td></tr></table></figure>

<h3 id="链接多个数组"><a href="#链接多个数组" class="headerlink" title="链接多个数组"></a>链接多个数组</h3><p><code>Array.concat</code>函数常用于将一个数组连接到另一个数组的后面。如果不使用展开语法, 代码可能是下面这样的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 将 arr2 中所有元素附加到 arr1 后面并返回</span></span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.<span class="title function_">concat</span>(arr2);</span><br></pre></td></tr></table></figure>

<p>使用展开语法:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = [...arr1, ...arr2];</span><br></pre></td></tr></table></figure>

<p>详情参考</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax</a></p>
</blockquote>
<h2 id="可选链操作符"><a href="#可选链操作符" class="headerlink" title="可选链操作符(?.)"></a>可选链操作符(?.)</h2><p><strong>可选链操作符( ?. )</strong>允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。?. 操作符的功能类似于 . 链式操作符，不同之处在于，在引用为空(<code>nullish</code>) (<code>null</code>或者<code>undefined</code>) 的情况下不会引起错误，该表达式短路返回值是 <code>undefined</code>。与函数调用一起使用时，如果给定的函数不存在，则返回 <code>undefined</code>。</p>
<p>当尝试访问可能不存在的对象属性时，可选链操作符将会使表达式更短、更简明。在探索一个对象的内容时，如果不能确定哪些属性必定存在，可选链操作符也是很有帮助的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> adventurer = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">cat</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Dinah&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dogName = adventurer.<span class="property">dog</span>?.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dogName);</span><br><span class="line"><span class="comment">// expected output: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(adventurer.<span class="property">someNonExistentMethod</span>?.());</span><br><span class="line"><span class="comment">// expected output: undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj?.<span class="property">prop</span></span><br><span class="line">obj?.[expr]</span><br><span class="line">arr?.[index]</span><br><span class="line">func?.(args)</span><br></pre></td></tr></table></figure>

<p>详情参考</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining</a></p>
</blockquote>
<h2 id="空值合并运算符"><a href="#空值合并运算符" class="headerlink" title="空值合并运算符(??)"></a>空值合并运算符(??)</h2><p>空值合并操作符（<code>??</code>）是一个逻辑操作符，当左侧的操作数为 <code>null</code> 或者 <code>undefined</code> 时，返回其右侧操作数，否则返回左侧操作数。</p>
<p>与逻辑或操作符（<code>||</code>）不同，逻辑或操作符会在左侧操作数为假值时返回右侧操作数。也就是说，如果使用 <code>||</code> 来为某些变量设置默认值，可能会遇到意料之外的行为。比如为假值（例如，<code>&#39;&#39;</code> 或 <code>0</code>）时。见下面的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="literal">null</span> ?? <span class="string">&#x27;default string&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line"><span class="comment">// expected output: &quot;default string&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baz = <span class="number">0</span> ?? <span class="number">42</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(baz);</span><br><span class="line"><span class="comment">// expected output: 0</span></span><br></pre></td></tr></table></figure>

<h3 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">leftExpr ?? rightExpr</span><br></pre></td></tr></table></figure>

<p>详情参考</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Javascript 快速生成数组的方法</title>
    <url>/2022/04/11/Javascript-%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="循环赋值"><a href="#循环赋值" class="headerlink" title="循环赋值"></a>循环赋值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr1.<span class="property">length</span>;i++)&#123;</span><br><span class="line">  arr1[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br></pre></td></tr></table></figure>

<h2 id="push方法实现"><a href="#push方法实现" class="headerlink" title="push方法实现"></a>push方法实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">  arr2.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br></pre></td></tr></table></figure>

<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">  arr3.<span class="title function_">push</span>(i);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3);</span><br></pre></td></tr></table></figure>

<h2 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr4 = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  arr4.<span class="title function_">push</span>(i);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr4);</span><br></pre></td></tr></table></figure>

<h2 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys"></a>Object.keys</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr5 = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Array</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, &#123;<span class="attr">length</span>:<span class="number">100</span>&#125;)).<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> +item;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr5);</span><br></pre></td></tr></table></figure>

<h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr6 = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123;<span class="attr">length</span>:<span class="number">100</span>&#125;, <span class="function">(<span class="params">v,k</span>) =&gt;</span> k);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr6);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr7 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(<span class="number">100</span>), <span class="function">(<span class="params">v,k</span>) =&gt;</span>k);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr7);</span><br></pre></td></tr></table></figure>

<h2 id="new-Array-100-keys"><a href="#new-Array-100-keys" class="headerlink" title="new Array(100).keys()"></a>new Array(100).keys()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr8 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">100</span>).<span class="title function_">keys</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(arr8));</span><br></pre></td></tr></table></figure>

<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MakeArray</span>(<span class="params">num</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;num)&#123;</span><br><span class="line">    arr[i] = i++;</span><br><span class="line">    <span class="title class_">MakeArray</span>(num);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MakeArray</span>(<span class="number">100</span>));</span><br></pre></td></tr></table></figure>

<h2 id="new-Array-100-toString"><a href="#new-Array-100-toString" class="headerlink" title="new Array(100).toString()"></a>new Array(100).toString()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr11 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">100</span>).<span class="title function_">toString</span>().<span class="title function_">split</span>(‘,‘).<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item,index</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> index;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr11);</span><br></pre></td></tr></table></figure>

<p>参考链接</p>
<blockquote>
<p><a href="https://www.cnblogs.com/fuzitu/p/10723869.html">https://www.cnblogs.com/fuzitu/p/10723869.html</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Javascript中的函数返回多个值</title>
    <url>/2022/04/11/Javascript%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%A4%9A%E4%B8%AA%E5%80%BC/</url>
    <content><![CDATA[<p>当使用 Javascript 调用函数的时候只能通过 <code>return</code> 返回一个值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getAge</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">37</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getName</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> ‘<span class="title class_">Flavio</span>’</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当需要返回多个值的时候可以通过解构的方式获得</p>
<h2 id="通过数组"><a href="#通过数组" class="headerlink" title="通过数组"></a>通过数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getDetails</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">37</span>, <span class="string">&#x27;Flavio&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过数组结构, 我们可以这样获得</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [age, name] = <span class="title function_">getDetails</span>()</span><br></pre></td></tr></table></figure>

<p>现在我们有了<code>age</code>和<code>name</code>包含这些值的变量</p>
<p>但是需要注意获取的顺序.</p>
<h2 id="通过对象"><a href="#通过对象" class="headerlink" title="通过对象"></a>通过对象</h2><p>也可以返回一个对象然后解构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getDetails</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; </span><br><span class="line">    <span class="attr">age</span>: <span class="number">37</span>, </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Flavio&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; age, name &#125; = <span class="title function_">getDetails</span>()</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; age, name &#125; = <span class="title function_">getDetails</span>()</span><br></pre></td></tr></table></figure>
<p>此时顺序将不再重要, 因为这些都是命名参数</p>
<p>参考链接</p>
<blockquote>
<p><a href="https://tech-wiki.online/tw/javascript-return-multiple-values.html">https://tech-wiki.online/tw/javascript-return-multiple-values.html</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Jupyter 无法连接到 Python</title>
    <url>/2022/02/22/Jupyter-%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E5%88%B0-Python/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">kernel connecting</span></span><br></pre></td></tr></table></figure>

<p>及无法连接到后端的 Python, Shell 也无法打开</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>笔者采用 jupyter docker + nginx 反向代理这个模式</p>
<p>打开日志发现</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[W 2022-02-22 15:14:10.078 ServerApp] 400 <span class="built_in">GET</span> /terminals/websocket/1 (172.18.0.1) 0.67ms <span class="attribute">referer</span>=None</span><br></pre></td></tr></table></figure>

<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>更改 nginx 反向代理配置, 可能是没有识别websocket请求所致, 具体原因尚不清楚, 但以下这个配置在笔者这里可用</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~* \.(gif|png|jpg|css|js|woff|woff2)$</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attribute">proxy_pass</span> https://127.0.0.1:10000;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">expires</span> <span class="number">12h</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">location</span> /</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> https://127.0.0.1:10000;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_http_version</span>    <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span>      Upgrade <span class="string">&quot;websocket&quot;</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span>      Connection <span class="string">&quot;Upgrade&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">add_header</span> X-Cache <span class="variable">$upstream_cache_status</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#Set Nginx Cache</span></span><br><span class="line">    </span><br><span class="line">    	<span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-cache;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Jupyter配合Nginx反向代理的问题</title>
    <url>/2021/09/22/Jupyter%E9%85%8D%E5%90%88Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="SSL-Error"><a href="#SSL-Error" class="headerlink" title="SSL Error"></a>SSL Error</h1><p>当 jupyter 配置了 SSL 时, Nginx 反向代理时也需要用 https 协议</p>
<p>例如, 反向代理到本地的 10000 端口</p>
<p>错误示范</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">proxy_pass http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">10000</span>;</span><br></pre></td></tr></table></figure>

<p>正确示范</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">proxy_pass https:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">10000</span>;</span><br></pre></td></tr></table></figure>

<h1 id="Websocket-连接问题"><a href="#Websocket-连接问题" class="headerlink" title="Websocket 连接问题"></a>Websocket 连接问题</h1><p>在基于 Docker 部署 jupyter 工作环境时, 可能会发生可以打开网页, 可以创建文件, 但是无法与后端 python 连接的情况.</p>
<p>查看 jupyter 日志显示</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">jupyter    | [W 2021-09-21 16:09:24.778 ServerApp] 400 <span class="built_in">GET</span> /terminals/websocket/1 (172.27.0.1) 1.21ms <span class="attribute">referer</span>=None</span><br><span class="line">jupyter    | [W 2021-09-21 16:09:26.418 ServerApp] 400 <span class="built_in">GET</span> /terminals/websocket/1 (172.27.0.1) 1.13ms <span class="attribute">referer</span>=None</span><br><span class="line">jupyter    | [W 2021-09-21 16:09:28.696 ServerApp] 400 <span class="built_in">GET</span> /terminals/websocket/1 (172.27.0.1) 1.28ms <span class="attribute">referer</span>=None</span><br><span class="line">jupyter    | [W 2021-09-21 16:09:30.660 ServerApp] 400 <span class="built_in">GET</span> /terminals/websocket/1 (172.27.0.1) 1.24ms <span class="attribute">referer</span>=None</span><br><span class="line">jupyter    | [W 2021-09-21 16:09:37.605 ServerApp] 400 <span class="built_in">GET</span> /terminals/websocket/1 (172.27.0.1) 1.15ms <span class="attribute">referer</span>=None</span><br><span class="line">jupyter    | [W 2021-09-21 16:09:41.758 ServerApp] 400 <span class="built_in">GET</span> /terminals/websocket/1 (172.27.0.1) 1.11ms <span class="attribute">referer</span>=None</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当我尝试用 jupyter 提供的 terminal 时, 发现以上日志.</p>
<p>这说明这个请求没有成功, 400 状态码参考 MDN</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">HTTP</span> <span class="number">400</span> Bad Request 响应状态码表示由于语法无效，服务器无法理解该请求。 客户端不应该在未经修改的情况下重复此请求。</span><br></pre></td></tr></table></figure>

<p>所以应该是 nginx 在与 jupyter 通信时发生了问题.</p>
<p>Google …</p>
<p>找到以下解决方案, 一个可用的 Nginx 反向代理配置</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://jupyter;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> <span class="regexp">~* /(api/kernels/[^/]+/(channels|iopub|shell|stdin)|terminals/websocket)/?</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://jupyter;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># WebSocket support</span></span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="variable">$connection_upgrade</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意添加这三项</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Connection <span class="variable">$connection_upgrade</span>;</span><br></pre></td></tr></table></figure>

<p>参考链接</p>
<blockquote>
<p><a href="https://github.com/jupyter/notebook/issues/625">https://github.com/jupyter/notebook/issues/625</a></p>
</blockquote>
<blockquote>
<p><a href="https://jupyter-notebook.readthedocs.io/en/latest/config.html#options">https://jupyter-notebook.readthedocs.io/en/latest/config.html#options</a></p>
</blockquote>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/400">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/400</a></p>
</blockquote>
<blockquote>
<p><a href="https://gist.github.com/cboettig/8643341bd3c93b62b5c2">https://gist.github.com/cboettig/8643341bd3c93b62b5c2</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Docker</category>
        <category>Jupyter</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>Keras 实现识别 12306 验证码</title>
    <url>/2020/04/27/Keras-%E5%AE%9E%E7%8E%B0%E8%AF%86%E5%88%AB-12306-%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    <content><![CDATA[<h1 id="Python-Keras-实现识别12306验证码"><a href="#Python-Keras-实现识别12306验证码" class="headerlink" title="Python+Keras 实现识别12306验证码"></a>Python+Keras 实现识别12306验证码</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CNN卷积神经网络在图像识别领域大放异彩使图形验证码的防护作用大大下降，我们需要寻找一种新的方式来代替传统的验证方式，识别操作者究竟是屏幕前的真人还是网络中的机器人。</p>
<p>本文旨在通过识别12306验证码为例来验证，来探讨图形验证码在当下深度学习技术的支持下，究竟还有多少用武之地。</p>
<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>tensorflow-gpu 2.1.0</li>
<li>keras 2.3.1</li>
<li>python 3.7.4</li>
<li>flask 1.1.1</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/origin.jpg" alt=""></p>
<p>分析12306的验证码，我们发现识别分为两个部分。第一步识别文字部分，然后再根据文字部分识别图片部分。</p>
<p>以及通过大量的观察，我们发现验证码图片类型分为80个类。</p>
<h2 id="获取样本"><a href="#获取样本" class="headerlink" title="获取样本"></a>获取样本</h2><p>12306 验证码接口</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>kyfw.<span class="number">12306</span>.cn<span class="regexp">/passport/</span>captcha/captcha-image64</span><br></pre></td></tr></table></figure>

<p>返回的结果是一串base64编码后的图片</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200427144133.png" alt=""></p>
<p>我们可以编写一个脚本批量下载验证码。<br>编写 GetCapcha.py 并在当前目录下新建文件夹 originCaptcha 用于保存验证码图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://kyfw.12306.cn/passport/captcha/captcha-image64&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getCaptcha</span>(<span class="params">savePath</span>):</span><br><span class="line">    <span class="keyword">try</span>：</span><br><span class="line">        req = requests.get(url=url, headers=headers)</span><br><span class="line">        imageBase64str = json.loads(req.content)[<span class="string">&quot;image&quot;</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(imageBase64str, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(base64.b64decode(imageBase64str))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ = <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载验证码的数量</span></span><br><span class="line">    downloadCount = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证码保存目录</span></span><br><span class="line">    saveDir = os.path.join(os.getcwd(), <span class="string">&quot;originCaptcha&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(downloadCount):</span><br><span class="line">        savePath = os.path.join(saveDir, <span class="built_in">str</span>(i) + <span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">        getCaptcha(savePath)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>, downloadCount))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>拿到的验证码样本</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200427145437.png" alt=""></p>
<h2 id="分割样本"><a href="#分割样本" class="headerlink" title="分割样本"></a>分割样本</h2><p>分割样本，分别提取label部分和image部分</p>
<p>这里使用了一个Python图像处理库PIL和进度显示库tqdm，安装方式。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pillow</span><br><span class="line">pip <span class="keyword">install</span> tqdm</span><br></pre></td></tr></table></figure>

<h3 id="分割Label部分"><a href="#分割Label部分" class="headerlink" title="分割Label部分"></a>分割Label部分</h3><p>新建 CutCaptcha.py 以及 cutedCaptcha 目录进行保存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_img_sha1</span>(<span class="params">img</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    计算图像的sha1值为文件名</span></span><br><span class="line"><span class="string">    :param img:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    img = np.asarray(img)</span><br><span class="line">    sha1obj = hashlib.sha1()</span><br><span class="line">    sha1obj.update(img)</span><br><span class="line">    <span class="built_in">hash</span> = sha1obj.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">hash</span>).upper()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_label</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    切割标签</span></span><br><span class="line"><span class="string">    :param path:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(path)</span><br><span class="line">    x = <span class="number">117</span></span><br><span class="line">    y = <span class="number">0</span></span><br><span class="line">    w = <span class="number">180</span></span><br><span class="line">    h = <span class="number">30</span></span><br><span class="line">    <span class="keyword">return</span> image.crop((x, y, w, h))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_image</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    切割图片</span></span><br><span class="line"><span class="string">    :param path:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(path)</span><br><span class="line">    space = <span class="number">67</span> + <span class="number">5</span></span><br><span class="line">    x0, y0, w0, h0 = <span class="number">0</span>*space+<span class="number">5</span>, <span class="number">0</span>*space+<span class="number">41</span>, <span class="number">1</span>*space, <span class="number">0</span>*space+<span class="number">41</span>+<span class="number">67</span></span><br><span class="line">    x1, y1, w1, h1 = <span class="number">0</span>*space+<span class="number">5</span>, <span class="number">1</span>*space+<span class="number">41</span>, <span class="number">1</span>*space, <span class="number">1</span>*space+<span class="number">41</span>+<span class="number">67</span></span><br><span class="line">    x2, y2, w2, h2 = <span class="number">1</span>*space+<span class="number">5</span>, <span class="number">0</span>*space+<span class="number">41</span>, <span class="number">2</span>*space, <span class="number">0</span>*space+<span class="number">41</span>+<span class="number">67</span></span><br><span class="line">    x3, y3, w3, h3 = <span class="number">1</span>*space+<span class="number">5</span>, <span class="number">1</span>*space+<span class="number">41</span>, <span class="number">2</span>*space, <span class="number">1</span>*space+<span class="number">41</span>+<span class="number">67</span></span><br><span class="line">    x4, y4, w4, h4 = <span class="number">2</span>*space+<span class="number">5</span>, <span class="number">0</span>*space+<span class="number">41</span>, <span class="number">3</span>*space, <span class="number">0</span>*space+<span class="number">41</span>+<span class="number">67</span></span><br><span class="line">    x5, y5, w5, h5 = <span class="number">2</span>*space+<span class="number">5</span>, <span class="number">1</span>*space+<span class="number">41</span>, <span class="number">3</span>*space, <span class="number">1</span>*space+<span class="number">41</span>+<span class="number">67</span></span><br><span class="line">    x6, y6, w6, h6 = <span class="number">3</span>*space+<span class="number">5</span>, <span class="number">0</span>*space+<span class="number">41</span>, <span class="number">4</span>*space, <span class="number">0</span>*space+<span class="number">41</span>+<span class="number">67</span></span><br><span class="line">    x7, y7, w7, h7 = <span class="number">3</span>*space+<span class="number">5</span>, <span class="number">1</span>*space+<span class="number">41</span>, <span class="number">4</span>*space, <span class="number">1</span>*space+<span class="number">41</span>+<span class="number">67</span></span><br><span class="line">    image0 = image.crop((x0, y0, w0, h0))</span><br><span class="line">    image1 = image.crop((x1, y1, w1, h1))</span><br><span class="line">    image2 = image.crop((x2, y2, w2, h2))</span><br><span class="line">    image3 = image.crop((x3, y3, w3, h3))</span><br><span class="line">    image4 = image.crop((x4, y4, w4, h4))</span><br><span class="line">    image5 = image.crop((x5, y5, w5, h5))</span><br><span class="line">    image6 = image.crop((x6, y6, w6, h6))</span><br><span class="line">    image7 = image.crop((x7, y7, w7, h7))</span><br><span class="line">    <span class="keyword">return</span> image0, image1, image2, image3, image4, image5, image6, image7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化各个参数</span></span><br><span class="line">ImageFile.LOAD_TRUNCATED_IMAGES = <span class="literal">True</span></span><br><span class="line">captcha_path_list = []</span><br><span class="line">captcha_input_dir = os.path.join(os.getcwd(), <span class="string">&quot;originCaptcha&quot;</span>)</span><br><span class="line">captcha_output_dir = os.path.join(os.getcwd(), <span class="string">&quot;cutedCaptcha&quot;</span>)</span><br><span class="line"><span class="comment"># 遍历验证码目录获取路径列表</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, imgs <span class="keyword">in</span> os.walk(captcha_input_dir):</span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">        captcha_path_list.append(os.path.join(root, img))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割验证码</span></span><br><span class="line"><span class="keyword">with</span> tqdm(total=<span class="built_in">len</span>(captcha_path_list), desc=<span class="string">&quot;Cut captcha&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">    <span class="keyword">for</span> captcha_input_path <span class="keyword">in</span> captcha_path_list:</span><br><span class="line">        original_captcha_name = os.path.basename(captcha_input_path).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        captcha_output_dir_second = os.path.join(captcha_output_dir, original_captcha_name)</span><br><span class="line">        image = [ n <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">        image_name = [ <span class="built_in">str</span>(n) <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">        image[<span class="number">0</span>], image[<span class="number">1</span>], image[<span class="number">2</span>], image[<span class="number">3</span>], image[<span class="number">4</span>], image[<span class="number">5</span>], image[<span class="number">6</span>], image[<span class="number">7</span>] = cut_image(captcha_input_path)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(image)):</span><br><span class="line">            image_name[i] = get_img_sha1(image[i])</span><br><span class="line">        <span class="keyword">for</span> i, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(image):</span><br><span class="line">            captcha_output_path = os.path.join(captcha_output_dir_second, <span class="built_in">str</span>(image_name[i]) + <span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(captcha_output_dir_second):</span><br><span class="line">                os.makedirs(captcha_output_dir_second)</span><br><span class="line">            img.save(captcha_output_path)</span><br><span class="line">        captcha_output_label_name = <span class="string">&quot;label_&quot;</span> + <span class="built_in">str</span>(original_captcha_name) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">        captcha_output_label_path = os.path.join(captcha_output_dir_second, captcha_output_label_name)</span><br><span class="line">        cut_label(captcha_input_path).save(<span class="built_in">str</span>(captcha_output_label_path))</span><br><span class="line">        pbar.update()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>每个目录保存一个切割后的验证码的label部分和image部分。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200427151337.png" alt=""></p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200427151427.png" alt=""></p>
<p>我们先把label部分提取出来放在一个目录</p>
<p>新建 CopyLabel.py 和 label 目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, <span class="built_in">dir</span>, imgs <span class="keyword">in</span> os.walk(<span class="string">&quot;cutedCaptcha&quot;</span>):</span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">        img_path = os.path.join(root, img)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;label&quot;</span> <span class="keyword">in</span> img:</span><br><span class="line">            new_img_path = os.path.join(os.getcwd(), <span class="string">&quot;label&quot;</span>, img)</span><br><span class="line">            shutil.copy(img_path, new_img_path)</span><br><span class="line">            <span class="built_in">print</span>(new_img_path)</span><br></pre></td></tr></table></figure>
<p>结果如下</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200427152003.png" alt=""></p>
<p>接下来就到了最枯燥的时候了，我们需要预先标记一些样本，标记成这样的。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200427154441.png" alt=""></p>
<h3 id="分割Image部分"><a href="#分割Image部分" class="headerlink" title="分割Image部分"></a>分割Image部分</h3><p>图像部分同理，处理成如下格式</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200427162056.png" alt=""></p>
<h2 id="创建字符集"><a href="#创建字符集" class="headerlink" title="创建字符集"></a>创建字符集</h2><p>新建一个 Python Package 命名为 charset，并在里面新建一个label.py文件用于保存图像分类标签</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200427142550.png" alt=""></p>
<p>label.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LABEL = [</span><br><span class="line">    <span class="string">&quot;蒸笼&quot;</span>,</span><br><span class="line">    <span class="string">&quot;蚂蚁&quot;</span>,</span><br><span class="line">    <span class="string">&quot;篮球&quot;</span>,</span><br><span class="line">    <span class="string">&quot;苍蝇拍&quot;</span>,</span><br><span class="line">    <span class="string">&quot;菠萝&quot;</span>,</span><br><span class="line">    <span class="string">&quot;薯条&quot;</span>,</span><br><span class="line">    <span class="string">&quot;耳塞&quot;</span>,</span><br><span class="line">    <span class="string">&quot;剪纸&quot;</span>,</span><br><span class="line">    <span class="string">&quot;绿豆&quot;</span>,</span><br><span class="line">    <span class="string">&quot;蜥蜴&quot;</span>,</span><br><span class="line">    <span class="string">&quot;热水袋&quot;</span>,</span><br><span class="line">    <span class="string">&quot;红酒&quot;</span>,</span><br><span class="line">    <span class="string">&quot;红枣&quot;</span>,</span><br><span class="line">    <span class="string">&quot;漏斗&quot;</span>,</span><br><span class="line">    <span class="string">&quot;公交卡&quot;</span>,</span><br><span class="line">    <span class="string">&quot;红豆&quot;</span>,</span><br><span class="line">    <span class="string">&quot;金字塔&quot;</span>,</span><br><span class="line">    <span class="string">&quot;狮子&quot;</span>,</span><br><span class="line">    <span class="string">&quot;文具盒&quot;</span>,</span><br><span class="line">    <span class="string">&quot;棉棒&quot;</span>,</span><br><span class="line">    <span class="string">&quot;海鸥&quot;</span>,</span><br><span class="line">    <span class="string">&quot;开瓶器&quot;</span>,</span><br><span class="line">    <span class="string">&quot;沙拉&quot;</span>,</span><br><span class="line">    <span class="string">&quot;电线&quot;</span>,</span><br><span class="line">    <span class="string">&quot;盘子&quot;</span>,</span><br><span class="line">    <span class="string">&quot;网球拍&quot;</span>,</span><br><span class="line">    <span class="string">&quot;烛台&quot;</span>,</span><br><span class="line">    <span class="string">&quot;老虎&quot;</span>,</span><br><span class="line">    <span class="string">&quot;药片&quot;</span>,</span><br><span class="line">    <span class="string">&quot;订书机&quot;</span>,</span><br><span class="line">    <span class="string">&quot;中国结&quot;</span>,</span><br><span class="line">    <span class="string">&quot;双面胶&quot;</span>,</span><br><span class="line">    <span class="string">&quot;茶几&quot;</span>,</span><br><span class="line">    <span class="string">&quot;挂钟&quot;</span>,</span><br><span class="line">    <span class="string">&quot;档案袋&quot;</span>,</span><br><span class="line">    <span class="string">&quot;创可贴&quot;</span>,</span><br><span class="line">    <span class="string">&quot;安全帽&quot;</span>,</span><br><span class="line">    <span class="string">&quot;樱桃&quot;</span>,</span><br><span class="line">    <span class="string">&quot;调色板&quot;</span>,</span><br><span class="line">    <span class="string">&quot;冰箱&quot;</span>,</span><br><span class="line">    <span class="string">&quot;钟表&quot;</span>,</span><br><span class="line">    <span class="string">&quot;黑板&quot;</span>,</span><br><span class="line">    <span class="string">&quot;卷尺&quot;</span>,</span><br><span class="line">    <span class="string">&quot;印章&quot;</span>,</span><br><span class="line">    <span class="string">&quot;手掌印&quot;</span>,</span><br><span class="line">    <span class="string">&quot;话梅&quot;</span>,</span><br><span class="line">    <span class="string">&quot;铃铛&quot;</span>,</span><br><span class="line">    <span class="string">&quot;牌坊&quot;</span>,</span><br><span class="line">    <span class="string">&quot;蜜蜂&quot;</span>,</span><br><span class="line">    <span class="string">&quot;茶盅&quot;</span>,</span><br><span class="line">    <span class="string">&quot;路灯&quot;</span>,</span><br><span class="line">    <span class="string">&quot;锦旗&quot;</span>,</span><br><span class="line">    <span class="string">&quot;雨靴&quot;</span>,</span><br><span class="line">    <span class="string">&quot;刺绣&quot;</span>,</span><br><span class="line">    <span class="string">&quot;本子&quot;</span>,</span><br><span class="line">    <span class="string">&quot;拖把&quot;</span>,</span><br><span class="line">    <span class="string">&quot;珊瑚&quot;</span>,</span><br><span class="line">    <span class="string">&quot;锅铲&quot;</span>,</span><br><span class="line">    <span class="string">&quot;海苔&quot;</span>,</span><br><span class="line">    <span class="string">&quot;锣&quot;</span>,</span><br><span class="line">    <span class="string">&quot;排风机&quot;</span>,</span><br><span class="line">    <span class="string">&quot;龙舟&quot;</span>,</span><br><span class="line">    <span class="string">&quot;鞭炮&quot;</span>,</span><br><span class="line">    <span class="string">&quot;仪表盘&quot;</span>,</span><br><span class="line">    <span class="string">&quot;跑步机&quot;</span>,</span><br><span class="line">    <span class="string">&quot;日历&quot;</span>,</span><br><span class="line">    <span class="string">&quot;毛线&quot;</span>,</span><br><span class="line">    <span class="string">&quot;打字机&quot;</span>,</span><br><span class="line">    <span class="string">&quot;电饭煲&quot;</span>,</span><br><span class="line">    <span class="string">&quot;海报&quot;</span>,</span><br><span class="line">    <span class="string">&quot;高压锅&quot;</span>,</span><br><span class="line">    <span class="string">&quot;沙包&quot;</span>,</span><br><span class="line">    <span class="string">&quot;护腕&quot;</span>,</span><br><span class="line">    <span class="string">&quot;口哨&quot;</span>,</span><br><span class="line">    <span class="string">&quot;电子秤&quot;</span>,</span><br><span class="line">    <span class="string">&quot;辣椒酱&quot;</span>,</span><br><span class="line">    <span class="string">&quot;航母&quot;</span>,</span><br><span class="line">    <span class="string">&quot;蜡烛&quot;</span>,</span><br><span class="line">    <span class="string">&quot;啤酒&quot;</span>,</span><br><span class="line">    <span class="string">&quot;风铃&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="新建配置文件"><a href="#新建配置文件" class="headerlink" title="新建配置文件"></a>新建配置文件</h2><p>新建一个 Config.py 文件方便我们把需要用的配置拿出来统一处理</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200427160055.png" alt=""></p>
<p>Config.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> charset <span class="keyword">import</span> LABEL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置配置文件的工作目录</span></span><br><span class="line">CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目设置</span></span><br><span class="line">ITEM_NAME = <span class="string">&quot;Label_12306_SmallCNN4&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像尺寸以及放大倍率</span></span><br><span class="line">IMAGE_MAGNIFICATION = <span class="number">1</span></span><br><span class="line">IMAGE_HEIGHT = <span class="number">30</span> * IMAGE_MAGNIFICATION</span><br><span class="line">IMAGE_WIDTH = <span class="number">63</span> * IMAGE_MAGNIFICATION</span><br><span class="line">IMAGE_CHANNEL = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符集</span></span><br><span class="line">CHAR_SET_LIST = LABEL</span><br><span class="line"><span class="comment"># 验证码长度</span></span><br><span class="line">CAPTCHA_LENGTH = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练设置</span></span><br><span class="line"><span class="comment"># INIT_EPOCHS 如果不是第一次训练, 可以设置初始化EPOCHS, 这样可以避免Tensorboard显示混乱</span></span><br><span class="line">INIT_EPOCHS = <span class="number">0</span></span><br><span class="line"><span class="comment"># INIT_EPOCHS = 31</span></span><br><span class="line">EPOCHS = <span class="number">200</span></span><br><span class="line">BATCH_SIZE = <span class="number">32</span></span><br><span class="line">STEP = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型保存路径</span></span><br><span class="line">MODEL_SAVE_PATH = os.path.join(CURRENT_DIR, <span class="string">&quot;model&quot;</span>, ITEM_NAME + <span class="string">&quot;.model&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集目录</span></span><br><span class="line">DATA_SET_DIR = <span class="string">&quot;这里写训练数据集的目录&quot;</span></span><br><span class="line">VALID_SET_DIR = <span class="string">&quot;这里写验证数据集的目录&quot;</span></span><br><span class="line">TEST_SET_DIR = <span class="string">&quot;这里写测试数据集的目录&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor board 目录</span></span><br><span class="line">TENSOR_BOARD_DIR = os.path.join(CURRENT_DIR, <span class="string">&quot;tensorboard&quot;</span>, ITEM_NAME)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CSV 文件保存路径, 用于可视化训练过程</span></span><br><span class="line">CSV_SAVE_PATH = os.path.join(CURRENT_DIR, <span class="string">&quot;csv&quot;</span>, ITEM_NAME + <span class="string">&quot;.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型结构图</span></span><br><span class="line">MODEL_STRUCTURE_IMAGE_DIR = os.path.join(CURRENT_DIR, <span class="string">&quot;model_structure_image&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h2><p>新建 net_model 包并在里面新建 SmallCNN.py 用于定义一个简单的CNN模型</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200427155647.png" alt=""></p>
<p>SmallCNN.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">from</span> keras.regularizers <span class="keyword">import</span> l2</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dropout, Input, Lambda, Activation, Conv2D, MaxPooling2D, ZeroPadding2D, Reshape, Concatenate, Flatten, Dense, BatchNormalization, MaxPool2D</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> SGD, Adam</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> optimizers</span><br><span class="line"><span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_l2_reg = <span class="number">0.0005</span>  <span class="comment"># L2 正则化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_conv2d</span>(<span class="params"><span class="built_in">input</span>, filters, kernel_size, name</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    创建卷积层</span></span><br><span class="line"><span class="string">    :param input:</span></span><br><span class="line"><span class="string">    :param filters: 整数, 输出空间的维度, 卷积中滤波器的输出数量</span></span><br><span class="line"><span class="string">    :param kernel_size: 一个整数, 或者是2个整数表示的元组或列表, 指明2D卷积窗口的宽度和高度, 可以是一个整数, 为所有空间维度指定相同的值</span></span><br><span class="line"><span class="string">    :param name: 卷积层的名字</span></span><br><span class="line"><span class="string">    :return: 卷积层</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> Conv2D(</span><br><span class="line">        filters,</span><br><span class="line">        kernel_size,</span><br><span class="line">        activation=<span class="string">&quot;relu&quot;</span>,</span><br><span class="line">        padding=<span class="string">&quot;same&quot;</span>,</span><br><span class="line">        kernel_initializer=<span class="string">&quot;he_normal&quot;</span>,</span><br><span class="line">        kernel_regularizer=l2(_l2_reg),</span><br><span class="line">        name=name</span><br><span class="line">    )(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_pooling</span>(<span class="params"><span class="built_in">input</span>, name</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    池化层</span></span><br><span class="line"><span class="string">    :param name:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> MaxPooling2D(</span><br><span class="line">        pool_size=(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">        strides=(<span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">        padding=<span class="string">&quot;same&quot;</span>,</span><br><span class="line">        name=name</span><br><span class="line">    )(<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">layres=<span class="number">2</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    构建一个简单CNN网络</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    input_tensor = Input((Config.IMAGE_HEIGHT, Config.IMAGE_WIDTH, Config.IMAGE_CHANNEL))</span><br><span class="line">    x = input_tensor</span><br><span class="line">    layresList = [<span class="number">2</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(layres)]</span><br><span class="line">    <span class="keyword">for</span> i, n_cnn <span class="keyword">in</span> <span class="built_in">enumerate</span>(layresList):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n_cnn):</span><br><span class="line">            x = Conv2D(<span class="number">32</span> * <span class="number">2</span> ** <span class="built_in">min</span>(i, <span class="number">3</span>), kernel_size=<span class="number">3</span>, padding=<span class="string">&#x27;same&#x27;</span>, kernel_initializer=<span class="string">&#x27;he_uniform&#x27;</span>)(x)</span><br><span class="line">            x = BatchNormalization()(x)</span><br><span class="line">            x = Activation(<span class="string">&#x27;relu&#x27;</span>)(x)</span><br><span class="line">        x = MaxPooling2D(<span class="number">2</span>)(x)</span><br><span class="line">        x = Dropout(rate=<span class="number">0.5</span>)(x)</span><br><span class="line"></span><br><span class="line">    x = Flatten()(x)</span><br><span class="line">    x = [</span><br><span class="line">        Dense(<span class="built_in">len</span>(Config.CHAR_SET_LIST), activation=<span class="string">&#x27;softmax&#x27;</span>, name=<span class="string">&#x27;c%d&#x27;</span> % (i + <span class="number">1</span>))(x)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Config.CAPTCHA_LENGTH)</span><br><span class="line">    ]</span><br><span class="line">    model = Model(inputs=input_tensor, outputs=x, name=<span class="string">&quot;SmallCNN-Layers-&#123;&#125;&quot;</span>.<span class="built_in">format</span>(layres))</span><br><span class="line">    model.summary()</span><br><span class="line">    model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>,</span><br><span class="line">                  optimizer=Adam(<span class="number">1e-3</span>, amsgrad=<span class="literal">True</span>),</span><br><span class="line">                  metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    model = build(layres=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<h2 id="新建一个工具类"><a href="#新建一个工具类" class="headerlink" title="新建一个工具类"></a>新建一个工具类</h2><p>新建一个工具类用于图像处理的操作</p>
<p>Utils.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CheckInvalid</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">cls, dstDir</span>):</span><br><span class="line">        pathList = []</span><br><span class="line">        <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(dstDir):</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                pathList.append(os.path.join(root, file))</span><br><span class="line">        total = <span class="built_in">len</span>(pathList)</span><br><span class="line">        removed = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, imagePath <span class="keyword">in</span> <span class="built_in">enumerate</span>(pathList):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                Image.<span class="built_in">open</span>(imagePath).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> OSError:</span><br><span class="line">                os.remove(imagePath)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;remove ---&gt; &quot;</span>, imagePath)</span><br><span class="line">                removed += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>, total))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;remove number &quot;</span>, removed)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Preprocess</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">convertImageToArrayByChannel</span>(<span class="params">cls, image</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        input image (PIL) object convert to array by channel</span></span><br><span class="line"><span class="string">        :param image: image obj</span></span><br><span class="line"><span class="string">        :return:      numpy array obj</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> Config.IMAGE_CHANNEL == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> np.array(image.convert(<span class="string">&quot;RGB&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> Config.IMAGE_CHANNEL == <span class="number">1</span>:</span><br><span class="line">            imageArray = np.array(image.convert(<span class="string">&quot;L&quot;</span>))</span><br><span class="line">            imageArray = np.expand_dims(imageArray, axis=<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> imageArray</span><br><span class="line">        <span class="keyword">return</span> np.array(image.convert(<span class="string">&quot;RGB&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">convertImageFormat</span>(<span class="params">cls, image, <span class="built_in">format</span>=<span class="string">&quot;PNG&quot;</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        input image obj, convert to png format</span></span><br><span class="line"><span class="string">        :param image: image obj</span></span><br><span class="line"><span class="string">        :return:      image obj</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> image <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;image object is none.&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> BytesIO() <span class="keyword">as</span> imageIO:</span><br><span class="line">            image.save(imageIO, <span class="built_in">format</span>=<span class="built_in">format</span>)</span><br><span class="line">            imageByte = imageIO.getvalue()</span><br><span class="line">        <span class="keyword">return</span> Image.<span class="built_in">open</span>(BytesIO(imageByte))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><p>创建一个读取数据的类</p>
<p>LoadData.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> <span class="type">Sequence</span></span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> Utils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoadTrainData</span>(<span class="title class_ inherited__">Sequence</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                 dataSetDir,</span></span><br><span class="line"><span class="params">                 characters=Config.CHAR_SET_LIST,</span></span><br><span class="line"><span class="params">                 batchSize=Config.BATCH_SIZE,</span></span><br><span class="line"><span class="params">                 steps=Config.STEP,</span></span><br><span class="line"><span class="params">                 n_len=Config.CAPTCHA_LENGTH,</span></span><br><span class="line"><span class="params">                 width=Config.IMAGE_WIDTH,</span></span><br><span class="line"><span class="params">                 height=Config.IMAGE_HEIGHT,</span></span><br><span class="line"><span class="params">                 isGRU=<span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">        self.dataSetDir = dataSetDir</span><br><span class="line">        self.characters = characters</span><br><span class="line">        self.batchSize = batchSize</span><br><span class="line">        self.steps = steps</span><br><span class="line">        self.n_len = n_len</span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">        self.n_class = <span class="built_in">len</span>(characters)</span><br><span class="line">        <span class="comment"># self.generator = ImageCaptcha(width=width, height=height)</span></span><br><span class="line">        self.dataSetlist = self._getDataSetList()</span><br><span class="line">        self.isGRU = isGRU</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parseImageText</span>(<span class="params">self, image_path</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        解析验证码的标签.</span></span><br><span class="line"><span class="string">        验证码格式为 --&gt;  标签_XXX.png</span></span><br><span class="line"><span class="string">        XXX为一串随机数, 后缀任意格式, PIL 或 cv2 会自动解析</span></span><br><span class="line"><span class="string">        :param image_path: c:/123_XXX.jpg</span></span><br><span class="line"><span class="string">        :return:XXX</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> os.path.basename(image_path).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>].split(<span class="string">&quot;_&quot;</span>)[<span class="number">0</span>].strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_getDataSetList</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        获取全部验证码路径用于喂数据</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        dataSetList = []</span><br><span class="line">        <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(self.dataSetDir):</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                imagePath = os.path.join(root, file)</span><br><span class="line">                dataSetList.append(&#123;</span><br><span class="line">                    <span class="string">&quot;tag&quot;</span>: self._parseImageText(imagePath),</span><br><span class="line">                    <span class="string">&quot;image_path&quot;</span>: imagePath</span><br><span class="line">                &#125;)</span><br><span class="line">        <span class="keyword">return</span> dataSetList</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.steps</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        x = np.zeros((self.batchSize, self.height, self.width, Config.IMAGE_CHANNEL), dtype=np.float32)</span><br><span class="line">        y = [np.zeros((self.batchSize, self.n_class), dtype=np.uint8) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.n_len)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.batchSize):</span><br><span class="line">            entity = random.choice(self.dataSetlist)</span><br><span class="line">            tag = entity[<span class="string">&quot;tag&quot;</span>]</span><br><span class="line">            <span class="comment"># 加载图片</span></span><br><span class="line">            image = Image.<span class="built_in">open</span>(entity[<span class="string">&quot;image_path&quot;</span>]).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">            <span class="comment"># 统一图片格式, 默认: PNG</span></span><br><span class="line">            image = Utils.Preprocess.convertImageFormat(image)</span><br><span class="line">            <span class="comment"># 缩放图片到指定尺寸</span></span><br><span class="line">            image = image.resize((Config.IMAGE_WIDTH, Config.IMAGE_HEIGHT), Image.ANTIALIAS)</span><br><span class="line">            <span class="comment"># 检测通道数并转换</span></span><br><span class="line">            imageArray = Utils.Preprocess.convertImageToArrayByChannel(image)</span><br><span class="line">            <span class="comment"># 把色度值压缩到 0-1 区间</span></span><br><span class="line">            x[i] = imageArray / <span class="number">255.0</span></span><br><span class="line">            <span class="comment"># 编码验证码标签</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(Config.CAPTCHA_LENGTH):</span><br><span class="line">                y[j][i, :] = <span class="number">0</span></span><br><span class="line">                y[j][i, self.characters.index(tag)] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoadPredictData</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, y, isIndefiniteLength=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        将向量列表解码成字符</span></span><br><span class="line"><span class="string">        :param y:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> isIndefiniteLength:</span><br><span class="line">            y = np.array(y)</span><br><span class="line">            y = np.argmax(y, axis=<span class="number">2</span>)[:, <span class="number">0</span>]</span><br><span class="line">            text = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> y:</span><br><span class="line">                <span class="keyword">if</span> x &lt; <span class="built_in">len</span>(Config.CHAR_SET_LIST):</span><br><span class="line">                    text += Config.CHAR_SET_LIST[x]</span><br><span class="line">            <span class="keyword">return</span> text</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            y = np.array(y)</span><br><span class="line">            y = np.argmax(y, axis=<span class="number">2</span>)[:, <span class="number">0</span>]</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([Config.CHAR_SET_LIST[x] <span class="keyword">for</span> x <span class="keyword">in</span> y])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parseImageText</span>(<span class="params">self, imagePath</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        解析验证码的标签.</span></span><br><span class="line"><span class="string">        验证码格式为 --&gt;  XXX_标签.png</span></span><br><span class="line"><span class="string">        XXX为一串随机数, 后缀任意格式, PIL 或 cv2 会自动解析</span></span><br><span class="line"><span class="string">        :param image_path:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        image_name = os.path.basename(imagePath)</span><br><span class="line">        tag = image_name.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>].split(<span class="string">&quot;_&quot;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        <span class="keyword">return</span> tag</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多通道</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPredictDataFromPath</span>(<span class="params">self, imagePath</span>):</span><br><span class="line">        x = np.zeros((<span class="number">1</span>, Config.IMAGE_HEIGHT, Config.IMAGE_WIDTH, Config.IMAGE_CHANNEL), dtype=np.float32)</span><br><span class="line">        image = Image.<span class="built_in">open</span>(imagePath).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        <span class="comment"># 统一格式, 训练和预测的格式不同会导致准确率急剧下降(我也不知道为啥)</span></span><br><span class="line">        image = Utils.Preprocess.convertImageFormat(image)</span><br><span class="line">        <span class="comment"># 缩放图片到指定尺寸</span></span><br><span class="line">        image = image.resize((Config.IMAGE_WIDTH, Config.IMAGE_HEIGHT), Image.ANTIALIAS)</span><br><span class="line">        <span class="comment"># 检测通道数并转换</span></span><br><span class="line">        imageArray = Utils.Preprocess.convertImageToArrayByChannel(image)</span><br><span class="line">        <span class="comment"># 把色度值压缩到 0-1 区间</span></span><br><span class="line">        x[<span class="number">0</span>] = imageArray / <span class="number">255.0</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPredictDataFromByte</span>(<span class="params">self, imageByte</span>):</span><br><span class="line">        x = np.zeros((<span class="number">1</span>, Config.IMAGE_HEIGHT, Config.IMAGE_WIDTH, Config.IMAGE_CHANNEL), dtype=np.float32)</span><br><span class="line">        image = Image.<span class="built_in">open</span>(BytesIO(imageByte)).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        image = Utils.Preprocess.convertImageFormat(image)</span><br><span class="line">        image = image.resize((Config.IMAGE_WIDTH, Config.IMAGE_HEIGHT), Image.ANTIALIAS)</span><br><span class="line">        imageArray = Utils.Preprocess.convertImageToArrayByChannel(image)</span><br><span class="line">        x[<span class="number">0</span>] = imageArray / <span class="number">255.0</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPredictDataFromIO</span>(<span class="params">self, imageIO</span>):</span><br><span class="line">        x = np.zeros((<span class="number">1</span>, Config.IMAGE_HEIGHT, Config.IMAGE_WIDTH, Config.IMAGE_CHANNEL), dtype=np.float32)</span><br><span class="line">        image = Image.<span class="built_in">open</span>(imageIO).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        image = Utils.Preprocess.convertImageFormat(image)</span><br><span class="line">        image = image.resize((Config.IMAGE_WIDTH, Config.IMAGE_HEIGHT), Image.ANTIALIAS)</span><br><span class="line">        imageArray = Utils.Preprocess.convertImageToArrayByChannel(image)</span><br><span class="line">        x[<span class="number">0</span>] = imageArray / <span class="number">255.0</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><p>新建 Training.py 用于训练模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> EarlyStopping, CSVLogger, ModelCheckpoint, ReduceLROnPlateau, TensorBoard</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> LoadData <span class="keyword">import</span> LoadTrainData</span><br><span class="line"><span class="keyword">import</span> net_model.ResNet <span class="keyword">as</span> ResNet</span><br><span class="line"><span class="keyword">import</span> net_model.SmallCNN <span class="keyword">as</span> SmallCNN</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Training</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 构建模型</span></span><br><span class="line">        <span class="comment"># self.model = SmallCNN.build(layres=4)</span></span><br><span class="line">        <span class="comment"># self.model = ResNet.build(numberOfLayers=32)</span></span><br><span class="line">        self.model = SmallCNN.build(layres=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取已构建的模型继续训练</span></span><br><span class="line">        <span class="comment"># self.model = load_model(Config.MODEL_SAVE_PATH)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取训练和验证数据序列</span></span><br><span class="line">        self.trainSetSequence = LoadTrainData(Config.DATA_SET_DIR)</span><br><span class="line">        self.validSetSequence = LoadTrainData(Config.VALID_SET_DIR)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建回调</span></span><br><span class="line">        callbacks = [</span><br><span class="line">            <span class="comment"># 当监测值不再改善时，该回调函数将中止训练</span></span><br><span class="line">            EarlyStopping(patience=<span class="number">20</span>),</span><br><span class="line">            <span class="comment"># 将epoch的训练结果保存在csv文件中，支持所有可被转换为string的值，包括1D的可迭代数值如np.ndarray.</span></span><br><span class="line">            CSVLogger(Config.CSV_SAVE_PATH),</span><br><span class="line">            <span class="comment"># 该回调函数将在每个epoch后保存模型到filepath</span></span><br><span class="line">            ModelCheckpoint(Config.MODEL_SAVE_PATH, save_best_only=<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># 当评价指标不在提升时，减少学习率</span></span><br><span class="line">            ReduceLROnPlateau(factor=<span class="number">0.1</span>, patience=<span class="number">5</span>),</span><br><span class="line">            <span class="comment"># 该回调函数是一个可视化的展示器</span></span><br><span class="line">            TensorBoard(Config.TENSOR_BOARD_DIR)</span><br><span class="line">        ]</span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        self.model.fit_generator(</span><br><span class="line">            generator=self.trainSetSequence,</span><br><span class="line">            <span class="comment"># 训练多少步, step = data set size / batch size</span></span><br><span class="line">            steps_per_epoch=Config.STEP,</span><br><span class="line">            <span class="comment"># 迭代多少遍数据集</span></span><br><span class="line">            epochs=Config.EPOCHS,</span><br><span class="line">            validation_data=self.validSetSequence,</span><br><span class="line">            validation_steps=<span class="number">64</span>,</span><br><span class="line">            callbacks=callbacks,</span><br><span class="line">            workers=<span class="number">2</span>,</span><br><span class="line">            use_multiprocessing=<span class="literal">False</span>,</span><br><span class="line">            initial_epoch=Config.INIT_EPOCHS</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prediction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">evaluation</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    task = Training()</span><br><span class="line">    task.train()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>在我的GTX980ti上训练了20个epoch准确率达到0.99</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200427161654.png" alt=""></p>
<h2 id="测试模型"><a href="#测试模型" class="headerlink" title="测试模型"></a>测试模型</h2><p>新建 Prediction.py </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> EarlyStopping, CSVLogger, ModelCheckpoint, ReduceLROnPlateau, TensorBoard</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> LoadData <span class="keyword">import</span> LoadPredictData</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prediction</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 读取已构建的模型</span></span><br><span class="line">        self.model = load_model(Config.MODEL_SAVE_PATH)</span><br><span class="line">        <span class="comment"># self.model = load_model(&quot;./model/itgood_resnet20.model&quot;)</span></span><br><span class="line">        self.loadData = LoadPredictData()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predictFromImagePath</span>(<span class="params">self, imagePath</span>):</span><br><span class="line">        X = self.loadData.getPredictDataFromPath(imagePath)</span><br><span class="line">        y_pred = self.model.predict(X)</span><br><span class="line">        origin = os.path.basename(imagePath).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>].split(<span class="string">&quot;_&quot;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        <span class="keyword">if</span> Config.CAPTCHA_LENGTH == <span class="number">1</span>:</span><br><span class="line">            predict = self.loadData.decode([y_pred])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            predict = self.loadData.decode(y_pred, isIndefiniteLength=<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;original:&#123;0: &lt;10&#125; prediction:&#123;1: &lt;10&#125;&quot;</span>.<span class="built_in">format</span>(origin, predict))</span><br><span class="line">        <span class="keyword">if</span> origin.lower() == predict.lower():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predictFromImageByte</span>(<span class="params">self, imageByte</span>):</span><br><span class="line">        X = self.loadData.getPredictDataFromByte(imageByte)</span><br><span class="line">        y_pred = self.model.predict(X)</span><br><span class="line">        origin = os.path.basename(imageByte).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>].split(<span class="string">&quot;_&quot;</span>)[-<span class="number">1</span>].strip()</span><br><span class="line">        <span class="keyword">if</span> Config.CAPTCHA_LENGTH == <span class="number">1</span>:</span><br><span class="line">            predict = self.loadData.decode([y_pred])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            predict = self.loadData.decode(y_pred)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;original:&#123;&#125;  prediction:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(origin, predict))</span><br><span class="line">        <span class="keyword">return</span> self.loadData.decode(y_pred)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predictFromImageDir</span>(<span class="params">self, imageDir</span>):</span><br><span class="line">        imageNameList = os.listdir(imageDir)</span><br><span class="line">        total = <span class="built_in">len</span>(imageNameList)</span><br><span class="line">        error = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, imageName <span class="keyword">in</span> <span class="built_in">enumerate</span>(imageNameList):</span><br><span class="line">            imagePath = os.path.join(imageDir, imageName)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.predictFromImagePath(imagePath):</span><br><span class="line">                error += <span class="number">1</span></span><br><span class="line">        correct = total - error</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sample total: &#123;&#125;   accuracy: &#123;:.5f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(imageNameList), correct / total))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    t1 = time.time()</span><br><span class="line">    task = Prediction()</span><br><span class="line"></span><br><span class="line">    task.predictFromImageDir(Config.TEST_SET_DIR)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>准确率基本为1.0</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200427161846.png" alt=""></p>
<h2 id="训练图像部分"><a href="#训练图像部分" class="headerlink" title="训练图像部分"></a>训练图像部分</h2><p>同训练Label部分一样。</p>
<p>略</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Keras</tag>
        <tag>Tensorflow</tag>
        <tag>深度学习</tag>
        <tag>神经网络</tag>
        <tag>验证码识别</tag>
      </tags>
  </entry>
  <entry>
    <title>Koolshare Clash 更新 Clash 版本</title>
    <url>/2021/04/22/Koolshare-Clash-%E6%9B%B4%E6%96%B0-Clash-%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>Koolshare-Clash 的 Github 地址</p>
<p><code>https://github.com/SukkaW/Koolshare-Clash</code></p>
<p>这个项目已经两年没更新了, 项目自带的 Clash 版本为 Clash v0.20.0 已经很旧了.</p>
<p>目前为止 Clash 的最新版本为 Clash v1.5.0</p>
<p>笔者尝试更新 Clash 版本, 但是遇到的一些问题, 这里记录一下解决方案.</p>
<h2 id="更新-Clash-版本"><a href="#更新-Clash-版本" class="headerlink" title="更新 Clash 版本"></a>更新 Clash 版本</h2><p>笔者的路由器为LEDE_X86 for linux, 首先通过 SSH 登录后台.</p>
<p>切换到目录</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/koolshare/</span>bin</span><br></pre></td></tr></table></figure>

<p>去 Github 下载对应的平台的最新的 Clash </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Dreamacro/</span>clash</span><br></pre></td></tr></table></figure>

<p>删除旧的 Clash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> clash</span><br></pre></td></tr></table></figure>

<p>把新的 Clash 拷贝进去, 然后更改权限</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chmod</span> <span class="number">755</span> clash</span><br></pre></td></tr></table></figure>

<p>然后去 Koolshare 重启 Clash</p>
<h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><h3 id="访问代理后台看不见配置的代理"><a href="#访问代理后台看不见配置的代理" class="headerlink" title="访问代理后台看不见配置的代理"></a>访问代理后台看不见配置的代理</h3><p>出现这种原因是因为 0.20.0 的配置文件和 1.5.0 配置文件有些字段更改了, 需要更改 Clash 的配置文件</p>
<p>访问该网址可以查看最新的配置文件规则</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Dreamacro/</span>clash<span class="regexp">/wiki/</span>configuration</span><br></pre></td></tr></table></figure>

<p>一些差异</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">0</span>.<span class="number">20</span>.<span class="number">0</span> -&gt; Proxy</span><br><span class="line"><span class="attribute">1</span>.<span class="number">5</span>.<span class="number">0</span>  -&gt; proxies</span><br><span class="line"></span><br><span class="line"><span class="attribute">0</span>.<span class="number">20</span>.<span class="number">0</span> -&gt; Proxy Group</span><br><span class="line"><span class="attribute">1</span>.<span class="number">5</span>.<span class="number">0</span>  -&gt; proxy-groups</span><br><span class="line"></span><br><span class="line"><span class="attribute">0</span>.<span class="number">20</span>.<span class="number">0</span> -&gt; Rule</span><br><span class="line"><span class="attribute">1</span>.<span class="number">5</span>.<span class="number">0</span>  -&gt; rules</span><br></pre></td></tr></table></figure>

<p>配置文件从1.0.0版本开始更改.</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Clash</tag>
        <tag>Koolshare</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux添加环境变量</title>
    <url>/2022/02/22/Linux%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>比如要添加一个环境变量</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">NAME</span><span class="operator">=</span>NAONAO</span><br></pre></td></tr></table></figure>

<h2 id="临时添加"><a href="#临时添加" class="headerlink" title="临时添加"></a>临时添加</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">NAME</span>=NAONAO</span><br></pre></td></tr></table></figure>

<h2 id="永久添加"><a href="#永久添加" class="headerlink" title="永久添加"></a>永久添加</h2><h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">nano <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>

<p>在文件底部添加</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">NAME</span>=NAONAO</span><br></pre></td></tr></table></figure>

<h3 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2"></a>Method 2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>在文件底部添加</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">NAME</span>=NAONAO</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Linux里设置环境变量的方法</title>
    <url>/2021/05/06/Linux%E9%87%8C%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>实验路径</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/opt/</span>au1200_rm<span class="regexp">/build_tools/</span>bin</span><br></pre></td></tr></table></figure>

<h2 id="直接用export命令"><a href="#直接用export命令" class="headerlink" title="直接用export命令"></a>直接用export命令</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/opt/au1200_rm/build_tools/bin</span></span><br></pre></td></tr></table></figure>

<p>以上命令将实验路径导入到环境变量, 下次登录失效</p>
<h2 id="修改profile文件"><a href="#修改profile文件" class="headerlink" title="修改profile文件"></a>修改profile文件</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">nano <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>

<p>加入</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/opt/au1200_rm/build_tools/bin</span></span><br></pre></td></tr></table></figure>

<p>以上命令将实验路径导入到环境变量, 下次登录有效</p>
<h2 id="修改-bashrc文件"><a href="#修改-bashrc文件" class="headerlink" title="修改.bashrc文件"></a>修改.bashrc文件</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">nano <span class="regexp">/root/</span>.bashrc</span><br></pre></td></tr></table></figure>

<p>加入</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/opt/au1200_rm/build_tools/bin</span></span><br></pre></td></tr></table></figure>
<p>以上命令将实验路径导入到环境变量, 未测试下次登录是否有效</p>
<p>参考链接</p>
<blockquote>
<p><a href="https://www.cnblogs.com/leezx/p/5589941.html">https://www.cnblogs.com/leezx/p/5589941.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Next 主题设置代码高亮</title>
    <url>/2020/04/27/Next-%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/</url>
    <content><![CDATA[<h1 id="Next-主题设置代码高亮"><a href="#Next-主题设置代码高亮" class="headerlink" title="Next 主题设置代码高亮"></a>Next 主题设置代码高亮</h1><p>Next 主题默认使用 tomorrow-theme 来做代码高亮。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200427185002.png" alt=""></p>
<p>找到Next主题目录下的_config.xml文件</p>
<span id="more"></span>

<p>在这里可以修改风格</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure>

<p>我们更改为 <code>highlight_theme: night eighties</code></p>
<p>得到深色系的Code风格</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200427185242.png" alt=""></p>
<p>但是我们发现一个问题。。。</p>
<p>为什么字体颜色都是一样的？这个问题困扰了我许久，后来我发现因为Hexo使用了HighLight.js这个插件来显示代码高亮，之前把这个插件选项打开了，应该同Next主题使用的tomorrow-theme产生了冲突。在Hexo的_config.xml里把 highlight 的 hljs 选项关了即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br><span class="line"><span class="attribute">hexo g</span></span><br></pre></td></tr></table></figure>

<p>即可</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200427190006.png" alt=""></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx反向代理HTTPS</title>
    <url>/2020/05/01/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86HTTPS/</url>
    <content><![CDATA[<h1 id="Nginx反向代理HTTPS"><a href="#Nginx反向代理HTTPS" class="headerlink" title="Nginx反向代理HTTPS"></a>Nginx反向代理HTTPS</h1><h2 id="Nginx-Server-设置"><a href="#Nginx-Server-设置" class="headerlink" title="Nginx Server 设置"></a>Nginx Server 设置</h2><p>例如 转发到 <a href="https://127.0.0.1:8848">https://127.0.0.1:8848</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ~/ &#123;</span><br><span class="line">    <span class="comment"># 如果代理到一个动态域名，这里需要设置解析DNS</span></span><br><span class="line">    <span class="comment"># 不然Nginx只在启动的时候解析一次</span></span><br><span class="line">    resolver 8.8.8.8 114.114.114.114 valid=10s;</span><br><span class="line">    resolver_timeout 3s;</span><br><span class="line">    假如你要代理到 127.0.0.1:8848</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$target</span> <span class="string">&quot;127.0.0.1:8848&quot;</span>;</span><br><span class="line">    <span class="comment"># 这里之前填写成 $proxy_host 导致代理失败</span></span><br><span class="line">    proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">    proxy_set_header X-Forwarder-For <span class="variable">$remote_addr</span>;</span><br><span class="line">    proxy_ssl_certificate        /xxx.crt   <span class="comment"># 证书路径;  </span></span><br><span class="line">    proxy_ssl_certificate_key    /xxx.key   <span class="comment">#私钥路径;</span></span><br><span class="line">    proxy_pass https://<span class="variable">$target</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Odoo Challenge</title>
    <url>/2022/06/23/Odoo-Challenge/</url>
    <content><![CDATA[<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/imagea0e1da977196172c.png" alt=""></p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Odoo Challenge 挑战赛是一个很有意思的项目, 起源于一次面试时, HR发来个链接说测试一下水平.</p>
<p>好了, 开始挑战</p>
<h1 id="LEVEL-1"><a href="#LEVEL-1" class="headerlink" title="LEVEL 1"></a>LEVEL 1</h1><p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image6d19ff4a2b75f01c.png" alt=""></p>
<p>先随便输一个密码, 点 Check Answer, 很不意外的密码错误, 不过这时候有提示, 可以根据提示的线索来找到密码.</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image196452be9426f798.png" alt=""></p>
<p>看到提示</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Hint: <span class="keyword">if</span> <span class="selector-tag">form</span><span class="selector-attr">[<span class="string">&#x27;the_password&#x27;</span>]</span> == <span class="selector-tag">form</span><span class="selector-attr">[<span class="string">&#x27;pwd&#x27;</span>]</span>: return True</span><br></pre></td></tr></table></figure>
<p>看看网页的源码, 猜测应该在里面能找到.</p>
<p>部分源码</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;form method<span class="operator">=</span><span class="string">&quot;POST&quot;</span> action<span class="operator">=</span><span class="string">&quot;/jobs/challenge/submit&quot;</span> role<span class="operator">=</span><span class="string">&quot;form&quot;</span>&gt;</span><br><span class="line">    &lt;input class<span class="operator">=</span><span class="string">&quot;d-none&quot;</span> name<span class="operator">=</span><span class="string">&quot;csrf_token&quot;</span> value<span class="operator">=</span><span class="string">&quot;6ad9541dcf313efc428fa7f50dda9ca079adfe4ao1687487891&quot;</span>/&gt;</span><br><span class="line">    &lt;div class<span class="operator">=</span><span class="string">&quot;form-group row&quot;</span>&gt;</span><br><span class="line">        &lt;label for<span class="operator">=</span><span class="string">&quot;password&quot;</span> class<span class="operator">=</span><span class="string">&quot;col-md-2 offset-md-2 col-form-label&quot;</span>&gt;Password&lt;/label&gt;</span><br><span class="line">        &lt;div class<span class="operator">=</span><span class="string">&quot;col-md-6&quot;</span>&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;input type<span class="operator">=</span><span class="string">&quot;hidden&quot;</span> name<span class="operator">=</span><span class="string">&quot;the_password&quot;</span> value<span class="operator">=</span><span class="string">&quot;796ff3e72821cf412787389c6d5f301e00e3efb6&quot;</span>/&gt;</span><br><span class="line">            &lt;input type<span class="operator">=</span><span class="string">&quot;text&quot;</span> required<span class="operator">=</span><span class="string">&quot;required&quot;</span> class<span class="operator">=</span><span class="string">&quot;form-control&quot;</span> name<span class="operator">=</span><span class="string">&quot;pwd&quot;</span> id<span class="operator">=</span><span class="string">&quot;password&quot;</span> placeholder<span class="operator">=</span><span class="string">&quot;&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class<span class="operator">=</span><span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button id<span class="operator">=</span><span class="string">&quot;submit&quot;</span> type<span class="operator">=</span><span class="string">&quot;submit&quot;</span> name<span class="operator">=</span><span class="string">&quot;signup&quot;</span> class<span class="operator">=</span><span class="string">&quot;btn btn-primary&quot;</span>&gt;Check Answer&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>注意到</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attribute">name</span>=<span class="string">&quot;the_password&quot;</span> <span class="attribute">value</span>=<span class="string">&quot;796ff3e72821cf412787389c6d5f301e00e3efb6&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="number">796</span>ff<span class="number">3e72821</span>cf<span class="number">412787389</span><span class="keyword">c</span><span class="number">6</span>d<span class="number">5</span>f<span class="number">301e00</span>e<span class="number">3</span>efb<span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>就是本关的密码了</p>
<h1 id="LEVEL-2"><a href="#LEVEL-2" class="headerlink" title="LEVEL 2"></a>LEVEL 2</h1><p>第二关提示如下</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">Hint: <span class="keyword">function</span> <span class="title function_">debug</span><span class="params">()</span> &#123; [<span class="keyword">native</span> code] &#125;</span><br></pre></td></tr></table></figure>

<p>猜测应该是和 debug 有关系, 所以可以 F12 打开开发者工具在命令控制台标签页找线索</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/imagedf7240080d7a8150.png" alt=""></p>
<p>直接出答案了</p>
<h1 id="LEVEL-3"><a href="#LEVEL-3" class="headerlink" title="LEVEL 3"></a>LEVEL 3</h1><p>提示</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Hint</span>: GET / HTTP/<span class="number">1</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>猜测应该在与服务器交互的请求里寻找.</p>
<p>我们随便输一个密码, 提交一下看看与服务器的交互请求都有哪些</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/imageceda9745f1804ab0.png" alt=""></p>
<p>每个请求都点开看一看 request / response 里面有没有什么可以寻找的线索.</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/imagedf2dae0788b0b0b3.png" alt=""></p>
<p>可以看到在 <code>next?wrong=oups</code> 这个请求的响应头里面有内容, 红框标记的猜测应该是答案, 即</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">Grow your business with Odoo and more than 985156</span> <span class="comment">apps</span></span><br></pre></td></tr></table></figure>

<h1 id="LEVEL-4"><a href="#LEVEL-4" class="headerlink" title="LEVEL 4"></a>LEVEL 4</h1><p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/imagea91e68b41299a384.png" alt=""></p>
<p>提示</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Hint:</span> Classy password</span><br></pre></td></tr></table></figure>

<p>笔者在解决这个问题的时候花费了相当长的时间。最开始我猜测提示经典密码也许有可能是弱口令？</p>
<p>我试了如下弱口令</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">admin</span><br><span class="line">root</span><br><span class="line"><span class="number">123456</span></span><br><span class="line"><span class="number">000000</span></span><br><span class="line"><span class="number">888888</span></span><br><span class="line"><span class="number">88888888</span></span><br><span class="line"><span class="number">00000000</span></span><br><span class="line"><span class="number">11111111</span></span><br></pre></td></tr></table></figure>

<p>诸如此类的弱口令发现都没有用。</p>
<p>最后我写了一个脚本, 从 Github 上找了找有没有彩虹表, 常用弱口令之类的仓库. </p>
<p>找到一个 <a href="https://github.com/rootphantomer/Blasting_dictionary">https://github.com/rootphantomer/Blasting_dictionary</a></p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image4a43659ed94388e4.png" alt=""></p>
<p>挂着跑了一下午, 回来一看跑了大概 2w 个密码仍然没有任何起色. 这个时候我开始怀疑一开始的思路是否正确, 提示经典密码的意思究竟是不是弱口令的意思?</p>
<p>但是此时我又没有更好的思路, 于是每个请求都翻了翻, 看看有没有有用的信息. </p>
<p>真让我翻到了….</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image3d73e0bbd917848c.png" alt=""></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.odoo.com<span class="regexp">/jobs/</span>challenge/challenge.css</span><br></pre></td></tr></table></figure>

<p>这个请求的内容就是密码….</p>
<p>呵呵, 踏破铁鞋无觅处…</p>
<p>这个事情告诉我什么道理呢, 如果一个题目看起来很简单, 但是通过暴力方法很难解决时, 一定要寻找其他的突破口….</p>
<h1 id="LEVEL-5"><a href="#LEVEL-5" class="headerlink" title="LEVEL 5"></a>LEVEL 5</h1><p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image9d537f7a650e4297.png" alt=""></p>
<p>提示</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Hint:</span> I<span class="comment">&#x27;m a small piece of data sent from a website and stored on the user&#x27;s computer</span></span><br></pre></td></tr></table></figure>

<p>意思是服务器发送了一个数据片段存储到了用户电脑上.</p>
<p>看到这个首先想到 local storage 和 cookies</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/imaged06179d00d0da120.png" alt=""></p>
<p>印证了我的想法, 我在请求</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.odoo.com<span class="regexp">/jobs/</span>challenge/<span class="keyword">next</span>?wrong=oups</span><br></pre></td></tr></table></figure>

<p>里发现了线索, 密码既是方框里的值</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Odoo</span>-<span class="number">9850101554950100</span></span><br></pre></td></tr></table></figure>

<p>PS: 事后我发现这个页面的图标是一个饼干.</p>
<p>cookies 的意思正是饼干. 看来还是要多观察不一样的细节.</p>
<h1 id="LEVEL-6"><a href="#LEVEL-6" class="headerlink" title="LEVEL 6"></a>LEVEL 6</h1><p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image92a98e09adca3e11.png" alt=""></p>
<p>给了一段 js 代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JS</span></span><br><span class="line"><span class="keyword">var</span> idx = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; pwd.<span class="property">length</span>; i++)</span><br><span class="line">    tmp += <span class="string">&quot; &quot;</span>+idx.<span class="title function_">indexOf</span>(pwd.<span class="title function_">charAt</span>(i));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(tmp == <span class="string">&quot; 2 38 39 36 4 14 11 8 5 12 1 3 37 7 1 0 5 14 8 0&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    $.<span class="title function_">post</span>(<span class="string">&#x27;/jobs/challenge/submit&#x27;</span>, &#123;<span class="attr">pwd</span>: pwd&#125;).<span class="title function_">always</span>(<span class="keyword">function</span>(<span class="params">x</span>) &#123; <span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&#x27;/jobs/challenge/next&#x27;</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看来一下逻辑, tmp 变量存储的应该是 idx 字符串的索引, 我们把索引对应的字符取出来即可.</p>
<p>可以用 Python 实现一个简单的解码函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">idx = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">tmp = <span class="string">&quot;2 38 39 36 4 14 11 8 5 12 1 3 37 7 1 0 5 14 8 0&quot;</span>.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">pwd = <span class="string">&quot;&quot;</span>.join([idx[<span class="built_in">int</span>(index)] <span class="keyword">for</span> index <span class="keyword">in</span> tmp])</span><br><span class="line"><span class="built_in">print</span>(pwd)</span><br></pre></td></tr></table></figure>

<p>得到密文</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>CDA4eb85c<span class="number">13B7105e80</span></span><br></pre></td></tr></table></figure>

<p>本关通过</p>
<h1 id="LEVEL-7"><a href="#LEVEL-7" class="headerlink" title="LEVEL 7"></a>LEVEL 7</h1><p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/imageea4dff6ab52bf293.png" alt=""></p>
<p>哈哈, 从现在开始难度增加了…..</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/imagef075074667a94677.png" alt=""></p>
<p>提示</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Hint:</span> ascii</span><br></pre></td></tr></table></figure>

<p>ascii 码? 这个提示…..简单到等于没什么提示…</p>
<p>还是去翻一翻请求, 看看 request / response / cookies 有什么线索吧.</p>
<p>首先在控制台看到打印了一串信息</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image1dcba71b5d89779e.png" alt=""></p>
<p>翻译了一下大概是说需要调用另一个 URL 来执行下一个任务.</p>
<p>然后在请求</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.odoo.com<span class="regexp">/jobs/</span>challenge/<span class="keyword">next</span>?wrong=oups</span><br></pre></td></tr></table></figure>

<p>里发现了不少信息.</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/imagebcd8624faebd854f.png" alt=""></p>
<p>这个地方有一个奇怪的信息, 我们先记一下.</p>
<table>
<thead>
<tr>
<th>name</th>
<th>value</th>
</tr>
</thead>
<tbody><tr>
<td>It-Is-The-Part-2-Of-Url</td>
<td>“/jobs/challenge/<part1>/1d1/prime.json”</td>
</tr>
</tbody></table>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/imagec790f18f7db82254.png" alt=""></p>
<p>请求头也有一个奇怪的信息</p>
<table>
<thead>
<tr>
<th>name</th>
<th>value</th>
</tr>
</thead>
<tbody><tr>
<td>It-Is-The-Part-1-Of-Url</td>
<td>“/jobs/challenge/ebe/<part2>/prime.json”</td>
</tr>
</tbody></table>
<p>这时候我们可以分析, 这个 URL 被分为了两部分, 放到一起看一下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/jobs/</span>challenge<span class="regexp">/&lt;part1&gt;/</span><span class="number">1</span>d1/prime.json</span><br><span class="line"><span class="regexp">/jobs/</span>challenge<span class="regexp">/ebe/</span>&lt;part2&gt;/prime.json</span><br></pre></td></tr></table></figure>

<p>那么完整的 URL 应该是</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/jobs/</span>challenge<span class="regexp">/ebe/</span><span class="number">1</span>d1/prime.json</span><br></pre></td></tr></table></figure>

<p>我们尝试访问这个 URL</p>
<p>得到一串 JSON</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;instructions&quot;</span>: <span class="string">&quot;Remove non prime numbers from data then right shift [222th decimal of the constant quantity that determines the area of a circle by multiplying it by the radius squared] bits from the remaining numbers, it will give you the alphanumeric password of the next level&quot;</span>,</span><br><span class="line">    <span class="string">&quot;numbers&quot;</span>: [</span><br><span class="line"><span class="built_in">        52191,</span></span><br><span class="line"><span class="built_in">        25453,</span></span><br><span class="line"><span class="built_in">        13613,</span></span><br><span class="line"><span class="built_in">        54064,</span></span><br><span class="line"><span class="built_in">        25111,</span></span><br><span class="line"><span class="built_in">        22425,</span></span><br><span class="line"><span class="built_in">        12821,</span></span><br><span class="line"><span class="built_in">        19580,</span></span><br><span class="line"><span class="built_in">        25163,</span></span><br><span class="line"><span class="built_in">        46513,</span></span><br><span class="line"><span class="built_in">        40022,</span></span><br><span class="line"><span class="built_in">        57039,</span></span><br><span class="line"><span class="built_in">        9167,</span></span><br><span class="line"><span class="built_in">        13697,</span></span><br><span class="line"><span class="built_in">        26041,</span></span><br><span class="line"><span class="built_in">        47396,</span></span><br><span class="line"><span class="built_in">        13577,</span></span><br><span class="line"><span class="built_in">        11932,</span></span><br><span class="line"><span class="built_in">        50399,</span></span><br><span class="line"><span class="built_in">        14591,</span></span><br><span class="line"><span class="built_in">        13323,</span></span><br><span class="line"><span class="built_in">        46296,</span></span><br><span class="line"><span class="built_in">        20704,</span></span><br><span class="line"><span class="built_in">        53379,</span></span><br><span class="line"><span class="built_in">        24889,</span></span><br><span class="line"><span class="built_in">        22289,</span></span><br><span class="line"><span class="built_in">        24989,</span></span><br><span class="line"><span class="built_in">        51709,</span></span><br><span class="line"><span class="built_in">        47000,</span></span><br><span class="line"><span class="built_in">        294,</span></span><br><span class="line"><span class="built_in">        26249,</span></span><br><span class="line"><span class="built_in">        52972,</span></span><br><span class="line"><span class="built_in">        51191,</span></span><br><span class="line"><span class="built_in">        44807,</span></span><br><span class="line"><span class="built_in">        43176,</span></span><br><span class="line"><span class="built_in">        6419,</span></span><br><span class="line"><span class="built_in">        26161,</span></span><br><span class="line"><span class="built_in">        13339,</span></span><br><span class="line"><span class="built_in">        48093,</span></span><br><span class="line"><span class="built_in">        12547,</span></span><br><span class="line"><span class="built_in">        4258,</span></span><br><span class="line"><span class="built_in">        14479,</span></span><br><span class="line"><span class="built_in">        42054,</span></span><br><span class="line"><span class="built_in">        13913,</span></span><br><span class="line"><span class="built_in">        22828,</span></span><br><span class="line"><span class="built_in">        59633,</span></span><br><span class="line"><span class="built_in">        40834,</span></span><br><span class="line"><span class="built_in">        37100,</span></span><br><span class="line"><span class="built_in">        34715,</span></span><br><span class="line"><span class="built_in">        17108,</span></span><br><span class="line"><span class="built_in">        39104,</span></span><br><span class="line"><span class="built_in">        24790,</span></span><br><span class="line"><span class="built_in">        14407,</span></span><br><span class="line"><span class="built_in">        24967,</span></span><br><span class="line"><span class="built_in">        64736,</span></span><br><span class="line"><span class="built_in">        561,</span></span><br><span class="line"><span class="built_in">        38676,</span></span><br><span class="line"><span class="built_in">        14479,</span></span><br><span class="line"><span class="built_in">        17092,</span></span><br><span class="line"><span class="built_in">        62096,</span></span><br><span class="line"><span class="built_in">        42309,</span></span><br><span class="line"><span class="built_in">        26471,</span></span><br><span class="line"><span class="built_in">        59563,</span></span><br><span class="line"><span class="built_in">        25609,</span></span><br><span class="line"><span class="built_in">        13459,</span></span><br><span class="line"><span class="built_in">        2233,</span></span><br><span class="line"><span class="built_in">        14303,</span></span><br><span class="line"><span class="built_in">        52568,</span></span><br><span class="line"><span class="built_in">        50193,</span></span><br><span class="line"><span class="built_in">        28990,</span></span><br><span class="line"><span class="built_in">        34498,</span></span><br><span class="line"><span class="built_in">        25321,</span></span><br><span class="line"><span class="built_in">        21884,</span></span><br><span class="line"><span class="built_in">        26183,</span></span><br><span class="line"><span class="built_in">        13441,</span></span><br><span class="line"><span class="built_in">        25541,</span></span><br><span class="line"><span class="built_in">        57043,</span></span><br><span class="line"><span class="built_in">        4395,</span></span><br><span class="line"><span class="built_in">        25943,</span></span><br><span class="line"><span class="built_in">        25057,</span></span><br><span class="line"><span class="built_in">        41090,</span></span><br><span class="line"><span class="built_in">        14057,</span></span><br><span class="line"><span class="built_in">        38058,</span></span><br><span class="line"><span class="built_in">        7060,</span></span><br><span class="line"><span class="built_in">        26773,</span></span><br><span class="line"><span class="built_in">        37842,</span></span><br><span class="line"><span class="built_in">        25867,</span></span><br><span class="line"><span class="built_in">        33069,</span></span><br><span class="line"><span class="built_in">        8468,</span></span><br><span class="line"><span class="built_in">        46003,</span></span><br><span class="line"><span class="built_in">        24411,</span></span><br><span class="line"><span class="built_in">        20484,</span></span><br><span class="line"><span class="built_in">        19630,</span></span><br><span class="line"><span class="built_in">        3410,</span></span><br><span class="line"><span class="built_in">        35367,</span></span><br><span class="line"><span class="built_in">        26177,</span></span><br><span class="line"><span class="built_in">        25471,</span></span><br><span class="line"><span class="built_in">        35463,</span></span><br><span class="line"><span class="built_in">        12959,</span></span><br><span class="line"><span class="built_in">        25903,</span></span><br><span class="line"><span class="built_in">        25153,</span></span><br><span class="line"><span class="built_in">        13999,</span></span><br><span class="line"><span class="built_in">        44393,</span></span><br><span class="line"><span class="built_in">        25411,</span></span><br><span class="line"><span class="built_in">        2829,</span></span><br><span class="line"><span class="built_in">        51176,</span></span><br><span class="line"><span class="built_in">        25913,</span></span><br><span class="line"><span class="built_in">        13913,</span></span><br><span class="line"><span class="built_in">        52113,</span></span><br><span class="line"><span class="built_in">        17144,</span></span><br><span class="line">        <span class="number">14533</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>翻译一下, 大概意思是, 把这个数组里的非素数删除了, 然后将剩余的数字右移x位(也许是位运算?), 然后就得到了密码</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image4eb218a06afb4088.png" alt=""></p>
<p>x 位指的是应该是 pi 的第 222 位的数字</p>
<p>至此, 我们梳理一下完整的逻辑, 把上面给定的数组里的非素数删除, 然后找到 pi 的第 222 位的值 x, 然后将数组中剩余的数字按位运算右移 x 位.</p>
<p>网上找一个高效的判断是否位素数的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;check if is prime</span></span><br><span class="line"><span class="string">    referencen link https://zhuanlan.zhihu.com/p/107300262&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">2</span> <span class="keyword">or</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">6</span> != <span class="number">1</span> <span class="keyword">and</span> x % <span class="number">6</span> != <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="built_in">int</span>(x ** <span class="number">0.5</span>) + <span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> x % i == <span class="number">0</span> <span class="keyword">or</span> x % (i + <span class="number">2</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>查一下 pi 的第 222 位是几, 这里可以自己写函数计算也可以直接在网上查, 这里仅仅需要知道该值即可, 所以我选择了直接在网上查</p>
<p>直接在网站</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>pai.babihu.com/</span><br></pre></td></tr></table></figure>

<p>查的 pi 的 222 位为 <code>8</code></p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image2f346286bb6078f2.png" alt=""></p>
<p>还记的最开始的提示吗? </p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Hint:</span> ascii</span><br></pre></td></tr></table></figure>

<p>这里运算完的应该是 ascii 码, 我们计算出对应的字符就得到了最后的密文, 至此我们开始编写解码函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;check if is prime</span></span><br><span class="line"><span class="string">    referencen link https://zhuanlan.zhihu.com/p/107300262&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">2</span> <span class="keyword">or</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">6</span> != <span class="number">1</span> <span class="keyword">and</span> x % <span class="number">6</span> != <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="built_in">int</span>(x ** <span class="number">0.5</span>) + <span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> x % i == <span class="number">0</span> <span class="keyword">or</span> x % (i + <span class="number">2</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">arr: <span class="built_in">list</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># 移除非素数</span></span><br><span class="line">    arr = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: is_prime(x), arr))</span><br><span class="line">    <span class="comment"># 将数组中的每个数字按位右移8, 按 ascii 码表取对应的字符</span></span><br><span class="line">    <span class="comment"># 最后将字符数组拼接成字符串, 即可得到密码</span></span><br><span class="line">    dec = <span class="string">&quot;&quot;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">chr</span>(x &gt;&gt; <span class="number">8</span>), arr)))</span><br><span class="line">    <span class="keyword">return</span> dec</span><br></pre></td></tr></table></figure>

<p>解密得密码</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">c</span><span class="number">5</span>b<span class="number">2</span>b<span class="number">5e58</span>aaff<span class="number">41868</span>a<span class="number">8</span>d<span class="number">7</span>bf<span class="number">4</span>cea<span class="number">6</span>efc<span class="number">2</span>eb<span class="number">6</span>ce<span class="number">68</span></span><br></pre></td></tr></table></figure>

<p>本关通过</p>
<h1 id="LEVEL-8"><a href="#LEVEL-8" class="headerlink" title="LEVEL 8"></a>LEVEL 8</h1><p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image6d46faeb7b38c79f.png" alt=""></p>
<p>本关注意到这个图片变得奇怪了, 事出反常必有妖!</p>
<p>我们仔细翻翻跟服务器的请求里有没有什么奇怪的东西.</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image4c3051d639f63ffb.png" alt=""></p>
<p>这个就是请求的图片</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image3a14378059959503.png" alt=""></p>
<p>看起来非常像密码对不对? 突破口一定在这副怪异的图片里.</p>
<p>该请求响应了一个 HTML, 里面全都是 span 标签, 我们尝试把 span 标签的 style 属性去除了(因为我分析应该和密文关系不大),</p>
<p>然后删除 <code>#</code> 这个字符, 看看最后还能剩下什么.</p>
<p>我意外的发现在 Chrome 开发工具的预览窗口可以直接过滤掉 <code>style</code> 属性, 这下就好办了.</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/imagef30de931f297c58f.png" alt=""></p>
<p>我们把这些内容复制出来, 然后删除 <code>#</code></p>
<p>已经可以看出来密码了</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image4f86022daf5c8213.png" alt=""></p>
<p>稍微整理下得到</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">Password:&#x27;7f593a77ef76c1f04d1cc5bc51aebf<span class="number">265559</span>b965&#x27;    </span><br></pre></td></tr></table></figure>

<p>通关</p>
<h1 id="LEVEL-9"><a href="#LEVEL-9" class="headerlink" title="LEVEL 9"></a>LEVEL 9</h1><p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image00490d00881fe195.png" alt=""></p>
<p>注意红框框住的地方</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">b</span>&#x27;iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAIAAAAiOjnJAAAABmJLR0QA/wD/AP+gvaeTAAAE/klEQVR4nO3dwW7bOBSG0clg3v+VM7suhJSQTH4UW5yzbFxJcX4QNH15+fX9/f0PrPbv2w/A30mwSAgWCcEiIVgkBIvEfz/+<span class="number">69</span>fX157bXxY7Lvd99NOxR7/R+MoLH/KQ33fG757KiEVCsEgIFgnBIvHz5P1i4feJM5PKmYnwzKeEzsKnGr85+/+CRiwSgkVCsEgIFolbk/eLhavY24yfeWa5fOGVH71XM2/shr+gEYuEYJEQLBKCReKTyXtnZgW8W1ufKW6ZudHMU73OiEVCsEgIFgnBInHW5P2iq4jvprp/xENuYMQiIVgkBIuEYJH4ZPL+<span class="number">1</span>sx3/OKF91344plLdcUtGz4WGLFICBYJwSIhWCRuTd63beB85FGBysyS98Kyme6nY/v/gkYsEoJFQrBICBaJnyfvhxRsnPmhYaE/sS7oJiMWCcEiIVgkBIvE7m4zC1fAFy61P9Itpm9bW19Yj6TPO1sJFgnBIiFYJHZvWF04ie7KZg6xsPfOwvvevLIRi4RgkRAsEoJFYvfkfeakoRlvHU+<span class="number">6</span>cEvq2CGV+L8YsUgIFgnBIiFYJL5+nHzNTLEX/t+ZJeBtnxIe3WjbGzvzXi15c4xYJASLhGCRECwSC2reZxa1u0nltqKatwpUZn7Bmcew8s6bBIuEYJEQLBKfdJvp9kbOVHmPrzzzf7ct8XfNZx5R8865BIuEYJEQLBI/l82E98u6P26b215s69V+cXhBjhGLhGCRECwSgkXi55X3biNlV8Y+vm83xe6WyxeW+nQFOb9jxCIhWCQEi4Rgkbi18t4tEG9bLn9rjfuQif/+v4IRi4RgkRAsEoJF4pNuM2OHrK2PXzy28DNEt7m3az6zhBGLhGCRECwSgkXik5X3t2aR25pQjv0R3xZcbPvy4BcjFgnBIiFYJASLxIKymf0Twzv/d2zbttLxfcfe+v5jzIZV3iRYJASLhGCRuFU281Zjk0dP9Uh3qYW2FSA9eoybjFgkBIuEYJEQLBILWkVuK+vedojoIeXz3UeoR/R55yCCRUKwSAgWiVutIruF6YW15zMe3XfbFwBvbRdwwirnEiwSgkVCsEj8PHm/eGuNe+bFM0ebztx3Yb3Ktt70C3/<span class="number">6</span>ixGLhGCRECwSgkViQavI/ad33rnRX998pttVe2HlnYMIFgnBIiFYJD7ZsDp+<span class="number">8</span>dghW0O7qX13suu2BjIXNqxyEMEiIVgkBIvErbKZR7q9oNt2ii58jJkbXXTfFox/qs87BxEsEoJFQrBILFh573SbXceXGtu2YfWtZjtLGLFICBYJwSIhWCTW93l/<span class="number">5</span>Myl5/<span class="number">29</span>We7c9y1q3jmIYJEQLBKCRWJBn/eFth3/<span class="number">9</span>Nbmz7G3Osg/otsMbxIsEoJFQrBI3Orz3hl3Np+<span class="number">51</span>MXC6Wp3OtIhh0MtqcAxYpEQLBKCRUKwSNzasHrIcUgXCyekC1+<span class="number">8</span>cNZ8udRbJ1h9xohFQrBICBYJwSLxSbeZbhZ5SIX4wi8Auq6TF9u+WrjJiEVCsEgIFgnBIrG+VeRCj+by29qgd11uxkvtXdl+<span class="number">0</span>YvGiEVCsEgIFgnBInH05H1m6fmQxooL6+W3ndk0puadNwkWCcEiIVgkPpm8dxPDmdORZirEH1lY29Md9LqwXOczRiwSgkVCsEgIFolbk/e3Wid2x7GO57bbTli96NbW928mMGKRECwSgkVCsEic1eedv4YRi4RgkRAsEoJFQrBICBYJwSLxP3LS5YIohRy8AAAAAElFTkSuQmCC&#x27;</span><br></pre></td></tr></table></figure>

<p>这里是一串不知名的代码, 不过看开头非常像 PNG 格式的图片 Base64 编码后的格式</p>
<p>随便输一个密码看看有没有什么提示.</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/imagea7e4610f03a7f358.png" alt=""></p>
<p>提示</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Hint:</span> png</span><br></pre></td></tr></table></figure>

<p>我现在很确信这是一个 png 格式的图片 base64 编码后的代码</p>
<p>直接在网上还原该图片得到了一个二维码</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/imagebcae2e164280a166.png" alt=""></p>
<p>继续识别一下该二维码则直接得到结果</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image967bd059fa30d7e1.png" alt=""></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">f870f6a65d94a6f65a772b7f4734be95278e28fd</span><br></pre></td></tr></table></figure>

<p>通关</p>
<h1 id="LEVEL-10"><a href="#LEVEL-10" class="headerlink" title="LEVEL 10"></a>LEVEL 10</h1><p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image397155b6f0545158.png" alt=""></p>
<p>本关给了一个加密函数的两个版本, js 和 python, 我比较熟悉 python 我们就来看下这个 python 函数的逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">pwd, fr, to, by</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([pwd[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(fr, to, by)])</span><br></pre></td></tr></table></figure>

<p>逻辑很简单, 该函数每次取出密码指定位的字符.</p>
<p>再看看输出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r(pwd, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>))</span><br><span class="line">edac</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r(pwd, <span class="number">4</span>, <span class="number">20</span>, <span class="number">2</span>))</span><br><span class="line">e76716c1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r(pwd, <span class="number">5</span>, <span class="number">30</span>, <span class="number">3</span>))</span><br><span class="line">1646561d3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r(pwd, <span class="number">5</span>, <span class="number">40</span>, <span class="number">4</span>))</span><br><span class="line">12b52d3fd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r(pwd, <span class="number">6</span>, <span class="number">40</span>, <span class="number">6</span>))</span><br><span class="line"><span class="number">711283</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r(pwd, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>))</span><br><span class="line">e</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r(pwd, <span class="number">10</span>, <span class="number">40</span>, <span class="number">3</span>))</span><br><span class="line">7bc5adfced</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r(pwd, <span class="number">10</span>, <span class="number">40</span>, <span class="number">5</span>))</span><br><span class="line">7a6d85</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r(pwd, <span class="number">15</span>, <span class="number">40</span>, <span class="number">6</span>))</span><br><span class="line">a2ffd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r(pwd, <span class="number">20</span>, <span class="number">40</span>, <span class="number">3</span>))</span><br><span class="line">61d3b5c</span><br></pre></td></tr></table></figure>
<p>观察函数 r 的第三个参数, 我们发现最大值位 40, 该参数对应 range() 函数的第二位即 max.</p>
<p>于是我们可以知道 pwd 的长度位 40, 解码函数的逻辑就很清楚了.</p>
<p>创建一个长度 40 的数组, 然后将上述输出的结果依次填到数组的指定位置即可</p>
<p>开始编写解码函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个 40 长度的数组</span></span><br><span class="line">_pwd = [ <span class="string">&quot;&quot;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>) ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">text, fr, to ,by</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;text 就是执行 r 函数的输出结果&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">range</span>(fr, to, by)):</span><br><span class="line">        _pwd[j] = text[i]</span><br></pre></td></tr></table></figure>

<p>然后依次执行</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">decrypt</span>(<span class="string">&quot;edac&quot;</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line"><span class="attribute">decrypt</span>(<span class="string">&quot;e76716c1&quot;</span>, <span class="number">4</span>, <span class="number">20</span>, <span class="number">2</span>)</span><br><span class="line"><span class="attribute">decrypt</span>(<span class="string">&quot;1646561d3&quot;</span>, <span class="number">5</span>, <span class="number">30</span>, <span class="number">3</span>)</span><br><span class="line"><span class="attribute">decrypt</span>(<span class="string">&quot;12b52d3fd&quot;</span>, <span class="number">5</span>, <span class="number">40</span>, <span class="number">4</span>)</span><br><span class="line"><span class="attribute">decrypt</span>(<span class="string">&quot;711283&quot;</span>, <span class="number">6</span>, <span class="number">40</span>, <span class="number">6</span>)</span><br><span class="line"><span class="attribute">decrypt</span>(<span class="string">&quot;e&quot;</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>)</span><br><span class="line"><span class="attribute">decrypt</span>(<span class="string">&quot;7bc5adfced&quot;</span>, <span class="number">10</span>, <span class="number">40</span>, <span class="number">3</span>)</span><br><span class="line"><span class="attribute">decrypt</span>(<span class="string">&quot;7a6d85&quot;</span>, <span class="number">10</span>, <span class="number">40</span>, <span class="number">5</span>)</span><br><span class="line"><span class="attribute">decrypt</span>(<span class="string">&quot;a2ffd&quot;</span>, <span class="number">15</span>, <span class="number">40</span>, <span class="number">6</span>)</span><br><span class="line"><span class="attribute">decrypt</span>(<span class="string">&quot;61d3b5c&quot;</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>拼接结果</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;&quot;</span>.join(_pwd)</span></span>)</span><br></pre></td></tr></table></figure>

<p>得到密码</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">edace17e62741b6ac51562a12ddff38cbfe53dcd</span><br></pre></td></tr></table></figure>

<h1 id="LEVEL-11"><a href="#LEVEL-11" class="headerlink" title="LEVEL 11"></a>LEVEL 11</h1><p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image162da0736a8e78ea.png" alt=""></p>
<p>最后一关就有点难度了</p>
<p>因为你如果密码不正确的话是无法提交的, 也就是说没有任何的提示. 跟服务器也没有什么交互.</p>
<p>我们只能先取看看网页源码里有什么线索没有</p>
<p>果然发现了端倪, 源码里有一段 js 脚本, 看逻辑应该是处理提交密码的, 仔细分析下.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  $( <span class="variable language_">document</span> ).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#submit&quot;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      e.<span class="title function_">preventDefault</span>();</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;challenge&#x27;</span>)!=-<span class="number">1</span>) &#123;<span class="keyword">debugger</span>;&#125;</span><br><span class="line">      pwd = $(<span class="string">&quot;#pwd&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">      ts = $(<span class="string">&quot;#pwd&quot;</span>).<span class="title function_">data</span>(<span class="string">&#x27;ts&#x27;</span>)+<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      stmnt = <span class="title function_">getBiskuit</span>(<span class="string">&#x27;X-Odoo&#x27;</span>);</span><br><span class="line">      multi = <span class="literal">true</span>;</span><br><span class="line">      $(ts.<span class="title function_">substr</span>(<span class="number">0</span>,<span class="number">5</span>).<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"> i , j</span>) &#123;</span><br><span class="line">        multi *= stmnt[<span class="built_in">parseInt</span>(j) +<span class="number">1</span>].<span class="title function_">charCodeAt</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">parseInt</span>(pwd.<span class="title function_">slice</span>(-(--([,,,<span class="literal">undefined</span>].<span class="title function_">join</span>()).<span class="property">length</span>))[<span class="number">0</span>]) * <span class="built_in">parseInt</span>(pwd.<span class="title function_">slice</span>(<span class="number">0</span> - - - <span class="number">1</span> - - - - - <span class="number">1</span> - - - - <span class="number">0</span>)[<span class="number">1</span>]) * stmnt.<span class="title function_">split</span>(<span class="string">&quot;All&quot;</span>).<span class="property">length</span> == ts.<span class="title function_">slice</span>(<span class="built_in">eval</span>(<span class="string">&quot;&quot;</span>+<span class="string">&#x27;&#x27;</span>+<span class="string">&quot;&quot;</span>+ƒ(<span class="number">1</span>&lt;<span class="number">0</span>)+<span class="string">&quot;&quot;</span>+<span class="string">&quot;-&quot;</span>+<span class="string">&#x27;&#x27;</span>+<span class="string">&quot;&quot;</span>+ƒ(<span class="number">0</span>&lt;<span class="number">1</span>)+<span class="string">&quot;-&quot;</span>+ƒ(<span class="number">1</span>&gt;<span class="number">0</span>)))) &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(<span class="string">&quot;./70/&quot;</span>+ pwd, &#123;</span><br><span class="line">          <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">o</span>) &#123;</span><br><span class="line">            <span class="number">0</span>===pwd.<span class="title function_">lastIndexOf</span>(multi.<span class="title function_">toString</span>().<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">4</span>)+stmnt.<span class="title function_">substring</span>(<span class="number">2</span>,<span class="number">6</span>),<span class="number">0</span>)&amp;&amp;(</span><br><span class="line">              $.<span class="title function_">post</span>(<span class="string">&#x27;submit&#x27;</span>, &#123;<span class="attr">pwd</span>: o, <span class="attr">csrf_token</span>:<span class="string">&#x27;ce1db5808eeed02fc22e46b80ef4651e39b7cd59o1687498808&#x27;</span>&#125;).<span class="title function_">always</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&#x27;/jobs/challenge/next&#x27;</span>&#125;)</span><br><span class="line">            );</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">o</span>) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;To be or not to be... &#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>有几个变量我们需要注意下</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ts</span></span><br><span class="line"><span class="attribute">stmnt</span></span><br><span class="line"><span class="attribute">multi</span></span><br></pre></td></tr></table></figure>

<p>我们直接在浏览器的控制台执行下面的代码看看有什么结果没有</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ts = $(<span class="string">&quot;#pwd&quot;</span>).<span class="title function_">data</span>(<span class="string">&#x27;ts&#x27;</span>)+<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">stmnt = <span class="title function_">getBiskuit</span>(<span class="string">&#x27;X-Odoo&#x27;</span>);</span><br><span class="line">multi = <span class="literal">true</span>;</span><br><span class="line">$(ts.<span class="title function_">substr</span>(<span class="number">0</span>,<span class="number">5</span>).<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"> i , j</span>) &#123;</span><br><span class="line">multi *= stmnt[<span class="built_in">parseInt</span>(j) +<span class="number">1</span>].<span class="title function_">charCodeAt</span>(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/imageb9a894415b409fae.png" alt=""></p>
<p>然后我们往下看是一个条件判断</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">parseInt</span>(pwd.<span class="title function_">slice</span>(-(--([,,,<span class="literal">undefined</span>].<span class="title function_">join</span>()).<span class="property">length</span>))[<span class="number">0</span>]) * <span class="built_in">parseInt</span>(pwd.<span class="title function_">slice</span>(<span class="number">0</span> - - - <span class="number">1</span> - - - - - <span class="number">1</span> - - - - <span class="number">0</span>)[<span class="number">1</span>]) * stmnt.<span class="title function_">split</span>(<span class="string">&quot;All&quot;</span>).<span class="property">length</span> == ts.<span class="title function_">slice</span>(<span class="built_in">eval</span>(<span class="string">&quot;&quot;</span>+<span class="string">&#x27;&#x27;</span>+<span class="string">&quot;&quot;</span>+ƒ(<span class="number">1</span>&lt;<span class="number">0</span>)+<span class="string">&quot;&quot;</span>+<span class="string">&quot;-&quot;</span>+<span class="string">&#x27;&#x27;</span>+<span class="string">&quot;&quot;</span>+ƒ(<span class="number">0</span>&lt;<span class="number">1</span>)+<span class="string">&quot;-&quot;</span>+ƒ(<span class="number">1</span>&gt;<span class="number">0</span>))))</span><br></pre></td></tr></table></figure>

<p>太长了我们可以拆分一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(pwd.<span class="title function_">slice</span>(-(--([,,,<span class="literal">undefined</span>].<span class="title function_">join</span>()).<span class="property">length</span>))[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">parseInt</span>(pwd.<span class="title function_">slice</span>(<span class="number">0</span> - - - <span class="number">1</span> - - - - - <span class="number">1</span> - - - - <span class="number">0</span>)[<span class="number">1</span>])</span><br><span class="line">stmnt.<span class="title function_">split</span>(<span class="string">&quot;All&quot;</span>).<span class="property">length</span></span><br></pre></td></tr></table></figure>

<p>简单来讲就是上面三行的乘积需要等于下面该行的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ts.<span class="title function_">slice</span>(<span class="built_in">eval</span>(<span class="string">&quot;&quot;</span>+<span class="string">&#x27;&#x27;</span>+<span class="string">&quot;&quot;</span>+ƒ(<span class="number">1</span>&lt;<span class="number">0</span>)+<span class="string">&quot;&quot;</span>+<span class="string">&quot;-&quot;</span>+<span class="string">&#x27;&#x27;</span>+<span class="string">&quot;&quot;</span>+ƒ(<span class="number">0</span>&lt;<span class="number">1</span>)+<span class="string">&quot;-&quot;</span>+ƒ(<span class="number">1</span>&gt;<span class="number">0</span>)))</span><br></pre></td></tr></table></figure>

<p>因为我们现在需要反推<code>pwd</code>这个值, 所以上面不涉及<code>pwd</code>变量的我们可以直接在控制台执行看看具体的值是多少</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image75d9447a4638c701.png" alt=""></p>
<table>
<thead>
<tr>
<th>code</th>
<th>value</th>
</tr>
</thead>
<tbody><tr>
<td>stmnt.split(“All”).length</td>
<td>2</td>
</tr>
<tr>
<td>ts.slice(eval(“”+’’+””+ƒ(1&lt;0)+””+”-“+’’+””+ƒ(0&lt;1)+”-“+ƒ(1&gt;0)))</td>
<td>‘70’</td>
</tr>
</tbody></table>
<p>这里注意到变量类型不同, 但是我们也看到了这个条件匹配用的是 <code>==</code>, 即不是严格模式! 所以我们可以把他们都当成数字来处理</p>
<p>接下来我们处理包含 <code>pwd</code> 变量的条件</p>
<p>我们把</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">parseInt(<span class="name">pwd</span>.slice(<span class="name">-</span>(<span class="name">--</span>([,,,undefined].join()).length))[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>记作 a</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">parseInt</span>(pwd.slice(<span class="number">0</span> - - - <span class="number">1</span> - - - - - <span class="number">1</span> - - - - <span class="number">0</span>)[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>记作 b</p>
<p>则上述条件可以变为</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">a * b * <span class="number">2</span> <span class="operator">=</span><span class="operator">=</span> <span class="number">70</span></span><br></pre></td></tr></table></figure>

<p>则可知 a b 的可选值表</p>
<table>
<thead>
<tr>
<th>a</th>
<th>b</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>35</td>
</tr>
<tr>
<td>35</td>
<td>1</td>
</tr>
<tr>
<td>5</td>
<td>7</td>
</tr>
<tr>
<td>7</td>
<td>5</td>
</tr>
</tbody></table>
<p>我们把</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="built_in">-</span>(<span class="built_in">--</span>(<span class="selector-attr">[,,,undefined]</span><span class="selector-class">.join</span>()).length)</span><br></pre></td></tr></table></figure>

<p>在控制台里执行下, 然后得到值 <code>-2</code></p>
<p>于是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(pwd.<span class="title function_">slice</span>(-(--([,,,<span class="literal">undefined</span>].<span class="title function_">join</span>()).<span class="property">length</span>))[<span class="number">0</span>])</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="built_in">parseInt</span>(pwd.<span class="title function_">slice</span>(-<span class="number">2</span>)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<p>于是我们可以分析出 a 表达式为 <code>pwd</code> 变量的倒数第二字符所代表的值</p>
<p>同理我们分析 b 表达式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(pwd.<span class="title function_">slice</span>(<span class="number">0</span> - - - <span class="number">1</span> - - - - - <span class="number">1</span> - - - - <span class="number">0</span>)[<span class="number">1</span>])</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="built_in">parseInt</span>(pwd.<span class="title function_">slice</span>(-<span class="number">2</span>)[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p>b 表达式为 <code>pwd</code> 变量的倒数第一字符所代表的值</p>
<p>仔细观察 js 脚本还记不记得这句</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pwd = $(<span class="string">&quot;#pwd&quot;</span>).<span class="title function_">val</span>();</span><br></pre></td></tr></table></figure>

<p>意思是 <code>pwd</code> 取到的是一个字符串变量, 观察我们刚才的 a, b 取值表.</p>
<p>我们发现按下标从一个字符串里取值, 取到的一定是一个字符, 不可能为两个字符, 于是现在 a / b 取值表就变为</p>
<table>
<thead>
<tr>
<th>a</th>
<th>b</th>
</tr>
</thead>
<tbody><tr>
<td>5</td>
<td>7</td>
</tr>
<tr>
<td>7</td>
<td>5</td>
</tr>
</tbody></table>
<p>也就是说 <code>pwd</code> 的最后两位一定是 <code>57</code> 或 <code>75</code></p>
<p>我们再往下看</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>===pwd.<span class="title function_">lastIndexOf</span>(multi.<span class="title function_">toString</span>().<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">4</span>)+stmnt.<span class="title function_">substring</span>(<span class="number">2</span>,<span class="number">6</span>),<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>我们先看一下里面的具体值是什么.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">multi.<span class="title function_">toString</span>().<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">4</span>)+stmnt.<span class="title function_">substring</span>(<span class="number">2</span>,<span class="number">6</span>)</span><br><span class="line"><span class="comment">// 执行得到, 这个东西看起来非常的像密码</span></span><br><span class="line"><span class="string">&#x27;4380Odoo&#x27;</span></span><br></pre></td></tr></table></figure>

<p>查看一下 <code>lastIndexOf</code> 方法的说明</p>
<blockquote>
<p>参考链接 </p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf</a></p>
</blockquote>
<p>lastIndexOf() 方法返回调用String 对象的指定值最后一次出现的索引，在一个字符串中的指定位置 fromIndex处从后向前搜索。如果没找到这个特定值则返回-1 。</p>
<p>该方法将从尾到头地检索字符串 str，看它是否含有子串 searchValue。开始检索的位置在字符串的 fromIndex 处或字符串的结尾（没有指定 fromIndex 时）。如果找到一个 searchValue，则返回 searchValue 的第一个字符在 str 中的位置。str中的字符位置是从 0 开始的。</p>
<p>简单来讲, 就是想要</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> === pwd.<span class="title function_">lastIndexOf</span>(multi.<span class="title function_">toString</span>().<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">4</span>)+stmnt.<span class="title function_">substring</span>(<span class="number">2</span>,<span class="number">6</span>),<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>这个表达式成立, <strong><code>pwd</code> 这个变量一定是 <code>multi.toString().substr(1,4)+stmnt.substring(2,6)</code> 所表示的值 <code>4380Odoo</code> 作为开头</strong></p>
<p>又因为 <code>pwd</code> 的最后两位一定是 <code>57</code> 或 <code>75</code>, 所以可以猜测密码应该为</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="number">4380</span>Odo<span class="meta">o57</span></span><br><span class="line"><span class="number">4380</span>Odo<span class="meta">o75</span></span><br></pre></td></tr></table></figure>

<p>这两个其中的一个</p>
<p>大功告成!</p>
<h1 id="Congratulations"><a href="#Congratulations" class="headerlink" title="Congratulations !"></a>Congratulations !</h1><p><img data-src="https://chevereto.wudinaonao.com/images/2022/06/23/image123e440fce3bf42e.png" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>Openwrt通过SSH启动接口</title>
    <url>/2020/05/25/Openwrt%E9%80%9A%E8%BF%87SSH%E5%90%AF%E5%8A%A8%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>如果你像我一样，把lan口关闭了导致无法通过web进入后台。那么你可以进入通过SSH来重新启用这个接口。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/etc/</span>config</span><br><span class="line">vi network</span><br></pre></td></tr></table></figure>

<p>找到你的lan口<br>更改</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">option</span> <span class="keyword">auto</span> <span class="comment">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure>

<p>为</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">option</span> <span class="keyword">auto</span> <span class="comment">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service network restart</span></span><br></pre></td></tr></table></figure>

<p>这样lan口便重新启用，可以登录后台了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>LEDE</tag>
        <tag>Openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>PowerShell设置全局代理</title>
    <url>/2022/04/05/PowerShell%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>在 PowerShell 里输入环境变量</p>
<p>格式</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env</span><span class="symbol">:HTTP_PROXY=<span class="string">&quot;http://域名:端口&quot;</span></span></span><br><span class="line"><span class="variable">$env</span><span class="symbol">:HTTPS_PROXY=<span class="string">&quot;http://域名:端口&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env</span><span class="symbol">:HTTP_PROXY=<span class="string">&quot;http://127.0.0.1:10809&quot;</span></span></span><br><span class="line"><span class="variable">$env</span><span class="symbol">:HTTPS_PROXY=<span class="string">&quot;http://127.0.0.1:10809&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>参考链接</p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_44120025/article/details/110950434">https://blog.csdn.net/weixin_44120025/article/details/110950434</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Python 获取实例的类</title>
    <url>/2022/04/13/Python-%E8%8E%B7%E5%8F%96%E5%AE%9E%E4%BE%8B%E7%9A%84%E7%B1%BB/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例</span></span><br><span class="line">p = Person()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例的类</span></span><br><span class="line">p.__class__</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Python函数只能被执行一次</title>
    <url>/2022/04/12/Python%E5%87%BD%E6%95%B0%E5%8F%AA%E8%83%BD%E8%A2%AB%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1/</url>
    <content><![CDATA[<p>今天有个工作场景是一个注册函数需要执行一次注册任务, 但是该函数仅仅只能在初始化的时候执行一次注册任务, 即该函数只能执行一次.</p>
<p>如何实现这个逻辑?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_register</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;register ...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_register()</span><br><span class="line">_register()</span><br><span class="line">_register()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多次调用也只能输出一次</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>register ...</span><br></pre></td></tr></table></figure>

<h2 id="基于类的单例模式"><a href="#基于类的单例模式" class="headerlink" title="基于类的单例模式"></a>基于类的单例模式</h2><p>… 略, 想起来再写</p>
<h2 id="基于闭包"><a href="#基于闭包" class="headerlink" title="基于闭包"></a>基于闭包</h2><p>我们还可以使用闭包来实现这个逻辑.</p>
<p>维基百科的闭包解释</p>
<p>在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是在支持头等函数的编程语言中实现词法绑定的一种技术。闭包在实现上是一个结构体，它存储了一个函数（通常是其入口地址）和一个关联的环境（相当于一个符号查找表）。环境里是若干对符号和值的对应关系，它既要包括约束变量（该函数内部绑定的符号），也要包括自由变量（在函数外部定义但在函数内被引用），有些函数也可能没有自由变量。闭包跟函数最大的不同在于，当捕捉闭包的时候，它的自由变量会在捕捉时被确定，这样即便脱离了捕捉时的上下文，它也能照常运行。捕捉时对于值的处理可以是值拷贝，也可以是名称引用，这通常由语言设计者决定，也可能由用户自行指定（如C++）。</p>
<p>看起来非常的绕, 笔者的简单理解就是函数打包了一份本地环境, 并且通常来将, 闭包的内部变量对于外界是完全隐藏的(但是也有办法访问到)</p>
<p>基于闭包实现上述逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_register</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 这里我们在函数内部定义了一个</span></span><br><span class="line">    <span class="comment"># 内部变量, 表示该函数是否已经</span></span><br><span class="line">    <span class="comment"># 执行过</span></span><br><span class="line">    _loaded = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_load</span>():</span><br><span class="line">        <span class="comment"># 这里写该函数的具体执行逻辑</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;fisrt run, loading ...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;loaded&quot;</span>)</span><br><span class="line">        <span class="comment"># 当逻辑被执行一次以后</span></span><br><span class="line">        <span class="comment"># 我们需要将设置 _loaded = True</span></span><br><span class="line">        <span class="comment"># 用来表示该函数已经被执行过一次</span></span><br><span class="line">        <span class="comment"># nonlocal 表示该变量不是本地变量</span></span><br><span class="line">        <span class="keyword">nonlocal</span> _loaded</span><br><span class="line">        _loaded = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_run</span>():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _loaded:</span><br><span class="line">            _load()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _run</span><br></pre></td></tr></table></figure>

<p>这样我们就实现了一个只能执行一次的函数</p>
<p>执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = _register()</span><br><span class="line">f()</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<p>可以发现只执行了一次逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fisrt run, loading ...</span><br><span class="line">loaded</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Python单例模式</title>
    <url>/2022/06/22/Python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="基于元类"><a href="#基于元类" class="headerlink" title="基于元类"></a>基于元类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line">        cls.__instance = <span class="literal">None</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> cls.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__instance = <span class="built_in">super</span>().__call__(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> cls.__instance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Spam</span>(metaclass=Singleton):</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">s1 = Spam()</span><br><span class="line">s2 = Spam()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s2))</span><br></pre></td></tr></table></figure>


<h2 id="基于-new-方法"><a href="#基于-new-方法" class="headerlink" title="基于 new 方法"></a>基于 <strong>new</strong> 方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    __instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.__instance:</span><br><span class="line">            cls.__instance = <span class="built_in">super</span>(Singleton, cls).__new__(cls, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Spam</span>(<span class="title class_ inherited__">Singleton</span>):</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">s1 = Spam()</span><br><span class="line">s2 = Spam()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s2))</span><br></pre></td></tr></table></figure>

<h2 id="基于装饰器"><a href="#基于装饰器" class="headerlink" title="基于装饰器"></a>基于装饰器</h2><h3 id="用闭包实现"><a href="#用闭包实现" class="headerlink" title="用闭包实现"></a>用闭包实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">singleton</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用闭包的方式实现一个单例装饰器&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    __instance = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_create</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> __instance:</span><br><span class="line">            __instance[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> __instance[cls]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> _create</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Spam</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Spam()</span><br><span class="line">s2 = Spam()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s2))</span><br></pre></td></tr></table></figure>

<h3 id="用类实现"><a href="#用类实现" class="headerlink" title="用类实现"></a>用类实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, cls</span>):</span><br><span class="line">        self.__cls = cls</span><br><span class="line">        self.__instance = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> self.__cls <span class="keyword">not</span> <span class="keyword">in</span> self.__instance:</span><br><span class="line">            self.__instance[self.__cls] = self.__cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.__instance[self.__cls]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Spam</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Spam()</span><br><span class="line">s2 = Spam()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s2))</span><br></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>Python的模块是天然的单例模式</p>
<p>在一个py文件中, 多次导入同一个模块, 这个模块也只有在第一次的时候被导入, 后续的该模块导入语句都不会再执行了</p>
<p>参考链接</p>
<blockquote>
<p><a href="https://developer.aliyun.com/article/653759">https://developer.aliyun.com/article/653759</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Python将对象序列化成JSON格式</title>
    <url>/2022/04/13/Python%E5%B0%86%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96%E6%88%90JSON%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Python 中经常会做的一件事就是将某个对象序列化, 序列化有很多种方式, JSON 是最常用的其中一种(方便和前端交换数据).</p>
<p>但是一个明显的问题是, Python 标准库<code>json</code>, 仅仅能<code>dumps</code>其内置的基本数据类型, 例如 string, integer, boolean, list, dict …</p>
<p>并且 JSON 作为一种数据交换格式, 有其固定的数据类型.<br>有时候我们需要将我们编写的一个类序列化, 此时该怎么办?</p>
<p><a href="http://www.json.org/json-zh.html">JSON 的介绍可以参考其官网说明</a></p>
<h2 id="序列化非标准类型时遇到的问题"><a href="#序列化非标准类型时遇到的问题" class="headerlink" title="序列化非标准类型时遇到的问题"></a>序列化非标准类型时遇到的问题</h2><p>如果 <code>json.dumps</code> 一个非标准类型(例如一个我们编写的类)会发生什么事?</p>
<p>我们先定义一个类<code>Person</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&quot;naonao&quot;</span></span><br></pre></td></tr></table></figure>

<p>尝试用 json 序列化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个实例</span></span><br><span class="line">p = Person()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试序列化</span></span><br><span class="line">json.dumps(p)</span><br></pre></td></tr></table></figure>

<p>毫不意外的报错了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">Input In [<span class="number">76</span>], <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">4</span> p = Person()</span><br><span class="line">      <span class="number">6</span> <span class="comment"># 尝试序列化</span></span><br><span class="line">----&gt; <span class="number">7</span> json.dumps(p)</span><br><span class="line"></span><br><span class="line">File /opt/conda/lib/python3<span class="number">.9</span>/json/__init__.py:<span class="number">231</span>, <span class="keyword">in</span> dumps(obj, skipkeys, ensure_ascii, check_circular, allow_nan, cls, indent, separators, default, sort_keys, **kw)</span><br><span class="line">    <span class="number">226</span> <span class="comment"># cached encoder</span></span><br><span class="line">    <span class="number">227</span> <span class="keyword">if</span> (<span class="keyword">not</span> skipkeys <span class="keyword">and</span> ensure_ascii <span class="keyword">and</span></span><br><span class="line">    <span class="number">228</span>     check_circular <span class="keyword">and</span> allow_nan <span class="keyword">and</span></span><br><span class="line">    <span class="number">229</span>     cls <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> indent <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> separators <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span></span><br><span class="line">    <span class="number">230</span>     default <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> sort_keys <span class="keyword">and</span> <span class="keyword">not</span> kw):</span><br><span class="line">--&gt; <span class="number">231</span>     <span class="keyword">return</span> _default_encoder.encode(obj)</span><br><span class="line">    <span class="number">232</span> <span class="keyword">if</span> cls <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="number">233</span>     cls = JSONEncoder</span><br><span class="line"></span><br><span class="line">File /opt/conda/lib/python3<span class="number">.9</span>/json/encoder.py:<span class="number">199</span>, <span class="keyword">in</span> JSONEncoder.encode(self, o)</span><br><span class="line">    <span class="number">195</span>         <span class="keyword">return</span> encode_basestring(o)</span><br><span class="line">    <span class="number">196</span> <span class="comment"># This doesn&#x27;t pass the iterator directly to &#x27;&#x27;.join() because the</span></span><br><span class="line">    <span class="number">197</span> <span class="comment"># exceptions aren&#x27;t as detailed.  The list call should be roughly</span></span><br><span class="line">    <span class="number">198</span> <span class="comment"># equivalent to the PySequence_Fast that &#x27;&#x27;.join() would do.</span></span><br><span class="line">--&gt; <span class="number">199</span> chunks = self.iterencode(o, _one_shot=<span class="literal">True</span>)</span><br><span class="line">    <span class="number">200</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(chunks, (<span class="built_in">list</span>, <span class="built_in">tuple</span>)):</span><br><span class="line">    <span class="number">201</span>     chunks = <span class="built_in">list</span>(chunks)</span><br><span class="line"></span><br><span class="line">File /opt/conda/lib/python3<span class="number">.9</span>/json/encoder.py:<span class="number">257</span>, <span class="keyword">in</span> JSONEncoder.iterencode(self, o, _one_shot)</span><br><span class="line">    <span class="number">252</span> <span class="keyword">else</span>:</span><br><span class="line">    <span class="number">253</span>     _iterencode = _make_iterencode(</span><br><span class="line">    <span class="number">254</span>         markers, self.default, _encoder, self.indent, floatstr,</span><br><span class="line">    <span class="number">255</span>         self.key_separator, self.item_separator, self.sort_keys,</span><br><span class="line">    <span class="number">256</span>         self.skipkeys, _one_shot)</span><br><span class="line">--&gt; <span class="number">257</span> <span class="keyword">return</span> _iterencode(o, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">File /opt/conda/lib/python3<span class="number">.9</span>/json/encoder.py:<span class="number">179</span>, <span class="keyword">in</span> JSONEncoder.default(self, o)</span><br><span class="line">    <span class="number">160</span> <span class="keyword">def</span> <span class="title function_">default</span>(<span class="params">self, o</span>):</span><br><span class="line">    <span class="number">161</span>     <span class="string">&quot;&quot;&quot;Implement this method in a subclass such that it returns</span></span><br><span class="line"><span class="string">    162     a serializable object for ``o``, or calls the base implementation</span></span><br><span class="line"><span class="string">    163     (to raise a ``TypeError``).</span></span><br><span class="line"><span class="string">   (...)</span></span><br><span class="line"><span class="string">    177 </span></span><br><span class="line"><span class="string">    178     &quot;&quot;&quot;</span></span><br><span class="line">--&gt; <span class="number">179</span>     <span class="keyword">raise</span> TypeError(<span class="string">f&#x27;Object of type <span class="subst">&#123;o.__class__.__name__&#125;</span> &#x27;</span></span><br><span class="line">    <span class="number">180</span>                     <span class="string">f&#x27;is not JSON serializable&#x27;</span>)</span><br><span class="line"></span><br><span class="line">TypeError: Object of <span class="built_in">type</span> Person <span class="keyword">is</span> <span class="keyword">not</span> JSON serializable</span><br></pre></td></tr></table></figure>

<p>我们仔细观察报错信息, 提示 <code>Person</code> 不是一个 JSON 序列化对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TypeError: Object of <span class="built_in">type</span> Person <span class="keyword">is</span> <span class="keyword">not</span> JSON serializable</span><br></pre></td></tr></table></figure>

<p>那么问题来了, 我们如何把各种各样的 Python 对象序列化成 JSON 格式?</p>
<p>Google 和查阅官方文档后你会发现 <code>dumps</code> 方法提供了一个 <code>cls</code> 参数, 我们可以自己编写一个序列化类, 告诉该他该如何<code>dumps</code>这个对象.</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersonEncoder</span>(json.JSONEncoder):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重写该方法, 告诉 json</span></span><br><span class="line">    <span class="comment"># 如何 dumps 指定的对象</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">default</span>(<span class="params">self, _<span class="built_in">object</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(_<span class="built_in">object</span>, Person):</span><br><span class="line">            <span class="comment"># 这里编写如何序列化 Person</span></span><br><span class="line">            <span class="comment"># 对象的代码</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">dict</span>(name=_<span class="built_in">object</span>.name)</span><br></pre></td></tr></table></figure>

<p>我们再尝试一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">json.dumps(p, cls=PersonEncoder)</span><br></pre></td></tr></table></figure>

<p>得到结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;&quot;name&quot;: &quot;naonao&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>成功了, 完美的解决了问题.</p>
<h2 id="有点遐思"><a href="#有点遐思" class="headerlink" title="有点遐思"></a>有点遐思</h2><p>但是现在有一个问题, 如果序列化少量类, 我们只需要在<code>default</code>这个方法下编写少量的代码即可. 但通常一个应用不可能仅仅只有几个少量的类, 类多了怎么办?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">default</span>(<span class="params">self, _<span class="built_in">object</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(_<span class="built_in">object</span>, Person):</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(_<span class="built_in">object</span>, Person1):</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(_<span class="built_in">object</span>, Person2):</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(_<span class="built_in">object</span>, Person3):</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(_<span class="built_in">object</span>, Person4):</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(_<span class="built_in">object</span>, Person5):</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(_<span class="built_in">object</span>, Person6):</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(_<span class="built_in">object</span>, Person7):</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p>这种写法, 一点也不优雅!</p>
<p>我们需要一种更优雅的解决方案</p>
<h2 id="更优雅的解决方案"><a href="#更优雅的解决方案" class="headerlink" title="更优雅的解决方案"></a>更优雅的解决方案</h2><p>该函数可以解决这个问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> singledispatch</span><br></pre></td></tr></table></figure>
<p><a href="https://docs.python.org/zh-cn/3/library/functools.html">详细说明可以看官方文档</a></p>
<p>我们先创建两个类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> singledispatch</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&quot;naonao&quot;</span></span><br><span class="line">        self.age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&quot;dog&quot;</span></span><br></pre></td></tr></table></figure>

<p>创建两个实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person = Person()</span><br><span class="line">animal = Animal()</span><br></pre></td></tr></table></figure>

<p>接下来我们可以这样定义序列化器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@singledispatch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">serialize</span>(<span class="params">_<span class="built_in">object</span></span>):</span><br><span class="line">    <span class="keyword">return</span> json.dumps(_<span class="built_in">object</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@serialize.register(<span class="params">Person</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_</span>(<span class="params">_<span class="built_in">object</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(name=_<span class="built_in">object</span>.name, </span><br><span class="line">                age=_<span class="built_in">object</span>.age)</span><br><span class="line"></span><br><span class="line"><span class="meta">@serialize.register(<span class="params">Animal</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_</span>(<span class="params">_<span class="built_in">object</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(name=_<span class="built_in">object</span>.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomJSONEncoder</span>(json.JSONEncoder):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">default</span>(<span class="params">self, _<span class="built_in">object</span></span>):</span><br><span class="line">        <span class="keyword">return</span> serialize(_<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>

<p>尝试一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;person&quot;</span>: person, </span><br><span class="line">    <span class="string">&quot;animal&quot;</span>: animal</span><br><span class="line">&#125;</span><br><span class="line">json.dumps(data, cls=CustomJSONEncoder)</span><br></pre></td></tr></table></figure>

<p>完美解决</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;&quot;person&quot;: &#123;&quot;name&quot;: &quot;naonao&quot;, &quot;age&quot;: 18&#125;, &quot;animal&quot;: &#123;&quot;name&quot;: &quot;dog&quot;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>接下来有新的类(或是数据类型)进行序列化时, 我们仅仅需要参照这个格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">                    <span class="comment"># 目标类</span></span><br><span class="line"><span class="meta">@serialize.register(<span class="params">Person</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_</span>(<span class="params">_<span class="built_in">object</span></span>):</span><br><span class="line">    <span class="comment"># 如何序列化这个对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(name=_<span class="built_in">object</span>.name, </span><br><span class="line">                age=_<span class="built_in">object</span>.age)</span><br></pre></td></tr></table></figure>

<p>编写对应的解析器即可. 这样可比 <code>if else ...</code>循环嵌套可读性高了不知多少倍!</p>
<p>参考链接</p>
<blockquote>
<p><a href="https://juejin.cn/post/6844903510543171592">https://juejin.cn/post/6844903510543171592</a></p>
</blockquote>
<blockquote>
<p><a href="https://docs.python.org/zh-cn/3/library/functools.html">https://docs.python.org/zh-cn/3/library/functools.html</a></p>
</blockquote>
<blockquote>
<p><a href="http://www.json.org/json-zh.html">http://www.json.org/json-zh.html</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Python库apscheduler中时区的问题</title>
    <url>/2020/06/06/Python%E5%BA%93apscheduler%E4%B8%AD%E6%97%B6%E5%8C%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h1><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Traceback</span> (most recent call last):</span><br><span class="line">  <span class="built_in">File</span> <span class="string">&quot;Scheduler.py&quot;</span>, line <span class="number">96</span>, in &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    scheduler.<span class="built_in">start</span>()</span><br><span class="line">  <span class="built_in">File</span> <span class="string">&quot;Scheduler.py&quot;</span>, line <span class="number">78</span>, in start</span><br><span class="line">    CronTrigger.<span class="built_in">from_crontab</span>(Config.SPIDER_INTERVAL)</span><br><span class="line">  <span class="built_in">File</span> <span class="string">&quot;/root/anaconda3/envs/caoliu/lib/python3.6/site-packages/apscheduler/triggers/cron/__init__.py&quot;</span>, line <span class="number">103</span>, in from_crontab</span><br><span class="line">    day_of_week=values[<span class="number">4</span>], timezone=timezone)</span><br><span class="line">  <span class="built_in">File</span> <span class="string">&quot;/root/anaconda3/envs/caoliu/lib/python3.6/site-packages/apscheduler/triggers/cron/__init__.py&quot;</span>, line <span class="number">58</span>, in __init__</span><br><span class="line">    self.timezone = <span class="built_in">get_localzone</span>()</span><br><span class="line">  <span class="built_in">File</span> <span class="string">&quot;/root/anaconda3/envs/caoliu/lib/python3.6/site-packages/tzlocal/unix.py&quot;</span>, line <span class="number">165</span>, in get_localzone</span><br><span class="line">    _cache_tz = _get_localzone()</span><br><span class="line">  <span class="built_in">File</span> <span class="string">&quot;/root/anaconda3/envs/caoliu/lib/python3.6/site-packages/tzlocal/unix.py&quot;</span>, line <span class="number">90</span>, in _get_localzone</span><br><span class="line">    utils.<span class="built_in">assert_tz_offset</span>(tz)</span><br><span class="line">  <span class="built_in">File</span> <span class="string">&quot;/root/anaconda3/envs/caoliu/lib/python3.6/site-packages/tzlocal/utils.py&quot;</span>, line <span class="number">46</span>, in assert_tz_offset</span><br><span class="line">    raise <span class="built_in">ValueError</span>(msg)</span><br><span class="line">ValueError: Timezone offset does <span class="keyword">not</span> match system offset: <span class="number">0</span> != <span class="number">28800.</span> Please, check your config files.</span><br></pre></td></tr></table></figure>

<p>开发机上一切正常，部署到服务器上出现这个问题。</p>
<p>服务器的时区和apscheduler不一样。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="在-apscheuler-里指定时区"><a href="#在-apscheuler-里指定时区" class="headerlink" title="在 apscheuler 里指定时区"></a>在 apscheuler 里指定时区</h2><p>查看服务器上的时区</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>timezone</span><br></pre></td></tr></table></figure>
<p>在 apscheuler 里指定时区</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200606173447.png" alt="20200606173447"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python用Base64编码文件</title>
    <url>/2020/06/05/Python%E7%94%A8Base64%E7%BC%96%E7%A0%81%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="built_in">bytes</span> = <span class="string">b&quot;wudinaonao&quot;</span></span><br><span class="line">base64.b64encode(<span class="built_in">bytes</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;d3VkaW5hb25hbw==&#x27;</span></span><br></pre></td></tr></table></figure>


<h1 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="built_in">bytes</span> = <span class="string">b&quot;wudinaonao&quot;</span></span><br><span class="line">encode = base64.b64encode(<span class="built_in">bytes</span>)</span><br><span class="line">base64.b64decode(encode, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;wudinaonao&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python获取环境变量</title>
    <url>/2020/06/07/Python%E8%8E%B7%E5%8F%96%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>返回值为字符串类型</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;KEY&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>返回值为bytes类型</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">os</span></span><br><span class="line"><span class="built_in">os</span>.getenvb(<span class="string">&quot;KEY&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Restful API设计最佳实践</title>
    <url>/2022/03/28/Restful-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="Restful-API设计最佳实践"><a href="#Restful-API设计最佳实践" class="headerlink" title="Restful API设计最佳实践"></a>Restful API设计最佳实践</h1><h2 id="Restful-API成熟度"><a href="#Restful-API成熟度" class="headerlink" title="Restful API成熟度"></a>Restful API成熟度</h2><p>在<a href="https://martinfowler.com/articles/richardsonMaturityModel.html#level0">Richardson Maturity Model</a>模型中，将RESTful分为4个等级：</p>
<p><img data-src="/resource/img/2022/03/restful/overview.png" alt=""></p>
<p>4个等级分别是：</p>
<p><img data-src="/resource/img/2022/03/restful/level0.png" alt=""><br>第一级（Level 0）的 Web 服务仅使用 HTTP 作为传输方式，实际上只是远程方法调用（RPC）的一种具体形式。SOAP 和 XML-RPC 都属于此类。</p>
<p><img data-src="/resource/img/2022/03/restful/level1.png" alt=""><br>第二级（Level 1）的 Web 服务引入了<strong>资源</strong>的概念。每个资源有对应的标识符和表达。</p>
<p><img data-src="/resource/img/2022/03/restful/level2.png" alt=""><br>第三级（Level 2）的 Web 服务使用不同的 <strong>HTTP 方法</strong>来进行不同的操作，并且使用<strong>HTTP 状态码</strong>来表示不同的结果。如 HTTP GET 方法来获取资源，HTTP DELETE 方法来删除资源。</p>
<p><img data-src="/resource/img/2022/03/restful/level3.png" alt=""><br>第四级（Level 3）的 Web 服务使用 <strong>HATEOAS</strong>。在资源的表达中包含了链接信息。客户端可以根据链接来发现可以执行的动作。</p>
<h3 id="实践1：一类资源两个URL"><a href="#实践1：一类资源两个URL" class="headerlink" title="实践1：一类资源两个URL"></a>实践1：一类资源两个URL</h3><p>一个URL表示该类型资源集合，另一个URL用来表示特定的资源元素。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 资源集合：</span></span><br><span class="line">/epics</span><br><span class="line"><span class="comment"># 资源元素：</span></span><br><span class="line"><span class="regexp">/epics/</span><span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="实践2：使用一致的复数名词"><a href="#实践2：使用一致的复数名词" class="headerlink" title="实践2：使用一致的复数名词"></a>实践2：使用一致的复数名词</h3><p>避免混用复数和单数形式，只应该使用统一的复数名词来表达资源。</p>
<p>反例：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">GET</span> /story</span><br><span class="line"><span class="built_in">GET</span> /story/3</span><br></pre></td></tr></table></figure>


<p>正例：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">GET</span> /stories</span><br><span class="line"><span class="built_in">GET</span> /stories/3</span><br></pre></td></tr></table></figure>


<h3 id="实践3：使用名词而不是动词"><a href="#实践3：使用名词而不是动词" class="headerlink" title="实践3：使用名词而不是动词"></a>实践3：使用名词而不是动词</h3><p>使用Http方法来表达动作（增、删、改、查）：</p>
<ol>
<li>增（POST：非幂等性）: 使用POST方法创建新的资源。</li>
<li>删（DELETE：幂等性）: 使用DELETE方法删除存在的资源。</li>
<li>改（PUT：幂等性）: 使用PUT或PATCH方法来更新已存在的资源。</li>
<li>查: 使用GET方法读取资源。（GET：幂等性）</li>
</ol>
<p>反例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/getAllEpics</span><br><span class="line">/getAllFinishedEpics</span><br><span class="line">/createEpic</span><br><span class="line">/updateEpic</span><br></pre></td></tr></table></figure>

<p>正例：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">GET</span> /epics</span><br><span class="line"><span class="built_in">GET</span> /epics?<span class="attribute">state</span>=finished</span><br><span class="line">POST /epics</span><br><span class="line">PUT /epics/5</span><br></pre></td></tr></table></figure>

<h3 id="实践4：将实际数据包装在data字段中"><a href="#实践4：将实际数据包装在data字段中" class="headerlink" title="实践4：将实际数据包装在data字段中"></a>实践4：将实际数据包装在data字段中</h3><p>GET /epics在数据字段中返回epic资源列表：</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">    &#123; <span class="string">&quot;id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;epic1&quot;</span> &#125;</span><br><span class="line">    , &#123; <span class="string">&quot;id&quot;</span>: <span class="number">2</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;epic2&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GET /epic/1在数据字段中返回id为1的epic对象：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;epic1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>PUT，POST和PATCH请求的有效负荷还应包含实际对象的数据字段。</p>
<p>优点：</p>
<ul>
<li>还有空间扩展元数据</li>
<li>一致性</li>
<li>兼容<a href="https://jsonapi.org/">JSON API标准</a></li>
</ul>
<h3 id="实践5：对可选及复杂参数使用查询字符串（？）"><a href="#实践5：对可选及复杂参数使用查询字符串（？）" class="headerlink" title="实践5：对可选及复杂参数使用查询字符串（？）"></a>实践5：对可选及复杂参数使用查询字符串（？）</h3><p>反例：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">GET</span> /employees</span><br><span class="line"><span class="built_in">GET</span> /externalEmployees</span><br><span class="line"><span class="built_in">GET</span> /internalEmployees</span><br><span class="line"><span class="built_in">GET</span> /internalAndSeniorEmployees</span><br></pre></td></tr></table></figure>

<p>保持URL简单短小。 坚持使用基本URL，将复杂或可选参数移动到查询字符串。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">GET</span> /employees?<span class="attribute">state</span>=internal&amp;title=senior</span><br><span class="line"><span class="built_in">GET</span> /employees?<span class="attribute">id</span>=1,2</span><br></pre></td></tr></table></figure>

<p>另外还可以使用JSON API方式过滤：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> /employees?<span class="keyword">filter</span>[state]=<span class="type">internal</span>&amp;<span class="keyword">filter</span>[title]=senior</span><br><span class="line"><span class="keyword">GET</span> /employees?<span class="keyword">filter</span>[id]=<span class="number">1</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="实践6：使用HTTP状态码"><a href="#实践6：使用HTTP状态码" class="headerlink" title="实践6：使用HTTP状态码"></a>实践6：使用HTTP状态码</h3><p>RESTful Web服务应使用合适的<a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">HTTP状态码</a>来响应客户端的请求。</p>
<ul>
<li>2xx  - 成功 - 一切正常。</li>
<li>4xx  - 客户端错误 - 如果客户端的故障（例如：客户端发送无效请求或未经授权）</li>
<li>5xx  - 服务器错误 - 服务端的故障（尝试处理请求时的错误，如数据库故障，依赖服务不可用，编码错误或不应发生的状态）</li>
</ul>
<p>请注意，使用所有过多的HTTP状态码可能会让API用户感到困惑。所以应该保持使用精简的HTTP状态码集。常用状态码如下：</p>
<ul>
<li>2xx：成功，操作被成功接收并处理<ul>
<li>200：请求成功。一般用于GET与POST请求</li>
<li>201：已创建。成功请求并创建了新的资源</li>
</ul>
</li>
<li>3xx：重定向，需要进一步的操作以完成请求<ul>
<li>301：永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</li>
<li>304：未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</li>
</ul>
</li>
<li>4xx：客户端错误，请求包含语法错误或无法完成请求<ul>
<li>400：    客户端请求的语法错误，服务器无法理解</li>
<li>401：请求要求用户的身份认证</li>
<li>403：    服务器理解请求客户端的请求，但是拒绝执行此请求</li>
<li>404：服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</li>
<li>410：客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</li>
</ul>
</li>
<li>5xx：服务器错误，服务器在处理请求的过程中发生了错误<ul>
<li>500：服务器内部错误，无法完成请求</li>
</ul>
</li>
</ul>
<p>不要过度使用404。状态码的使用要尽量精确。如果资源可用，但禁止用户访问，则返回403。如果资源曾经存在但现已被删除或停用，请使用410。</p>
<h3 id="实践7：提供有用的错误消息"><a href="#实践7：提供有用的错误消息" class="headerlink" title="实践7：提供有用的错误消息"></a>实践7：提供有用的错误消息</h3><p>除了提供恰当的HTTP状态代码外，还应该在HTTP响应正文中提供有用且详细的错误描述。 如下所示：</p>
<p>请求：</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">GET /epics?<span class="keyword">state</span>=unknow</span><br></pre></td></tr></table></figure>

<p>响应：</p>
<figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 400 Bad Request</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;errors&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;status&quot;</span>: <span class="number">400</span>,</span><br><span class="line">      <span class="string">&quot;detail&quot;</span>: <span class="string">&quot;Invalid state. Valid values are &#x27;</span>biz<span class="string">&#x27; or &#x27;</span>tech<span class="string">&#x27;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;code&quot;</span>: <span class="number">352</span>,</span><br><span class="line">      <span class="string">&quot;links&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;about&quot;</span>: <span class="string">&quot;http://www.jira.com/rest/errorcode/352&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实践8：使用HATEOAS"><a href="#实践8：使用HATEOAS" class="headerlink" title="实践8：使用HATEOAS"></a>实践8：使用HATEOAS</h3><p>HATEOAS 是 Hypermedia As The Engine Of Application State 的缩写，从字面上理解是 “超媒体即是应用状态引擎” 。其原则就是客户端与服务器的交互完全由超媒体动态提供，客户端无需事先了解如何与数据或者服务器交互。相反的，在一些RPC服务或者Redis,Mysql等软件，需要事先了解接口定义或者特定的交互语法。举例如下：</p>
<p>客户想要访问epic的用户故事清单。 因此，他必须知道他可以通过将查询参数stories附加到员工URL（例如/epics/21/stories）来访问用户故事清单。 这种字符串拼接易错，脆弱且难以维护。 如果更改了在REST API中访问salary语句的方式（例如，现在使用“storyStatements”或“userStories”），则所有客户端都将中断。</p>
<p>更好的做法是在响应中提供客户可以跟进的链接。 例如，对GET /epic的响应可能如下所示：</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>:<span class="string">&quot;epic1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;links&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;story&quot;</span>: <span class="string">&quot;http://www.domain.com/epics/21/stories&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ol>
<li>如果API被更改，客户端依旧会获取有效的URL（只要保证在URL更改时更新链接）。 </li>
<li>API变得更具自描述性，客户端不必经常查找文档。</li>
</ol>
<h3 id="实践9：恰当地设计关系"><a href="#实践9：恰当地设计关系" class="headerlink" title="实践9：恰当地设计关系"></a>实践9：恰当地设计关系</h3><p>假设每个story都有一个epic和几个sub task。 在API中设计关系基本上有三种常用选项：链接，侧载和嵌入。</p>
<p>它们都是有效的，正确的选择取决于用例。 基本上，应根据客户端的访问模式以及可容忍的请求数量和有效负载大小来设计关系。</p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">    &#123; </span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">1</span>, </span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;用户故事1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;relationships&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;epic&quot;</span>: <span class="string">&quot;http://www.domain.com/story/1/epic&quot;</span>,</span><br><span class="line">        <span class="string">&quot;subTasks&quot;</span>: [ </span><br><span class="line">          <span class="string">&quot;http://www.domain.com/subTasks/12&quot;</span>,</span><br><span class="line">          <span class="string">&quot;http://www.domain.com/subTasks/13&quot;</span></span><br><span class="line">        ]</span><br><span class="line">        <span class="regexp">//</span>or <span class="string">&quot;subTasks&quot;</span>: <span class="string">&quot;http://www.domain.com/story/1/subTasks&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>有效负载小。</li>
<li>许多请求。 </li>
<li>客户端必须将数据拼接在一起才能获得所有数据。</li>
</ul>
<h4 id="侧载"><a href="#侧载" class="headerlink" title="侧载"></a>侧载</h4><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">    &#123; </span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">1</span>, </span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;用户故事1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;relationships&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;epic&quot;</span>:  <span class="number">5</span> , </span><br><span class="line">        <span class="string">&quot;subTask&quot;</span>: [ <span class="number">12</span>, <span class="number">13</span> ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;included&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;epic&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">5</span>, </span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;epic5&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;subTasks&quot;</span>: [</span><br><span class="line">      &#123; <span class="string">&quot;id&quot;</span>: <span class="number">12</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;子任务12&quot;</span> &#125;</span><br><span class="line">      , &#123; <span class="string">&quot;id&quot;</span>: <span class="number">13</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;子任务13&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端还可以通过诸如<code>GET /stories？include=epic，subTasks</code>之类的查询参数来控制侧载实体。</p>
<ul>
<li>一次请求。</li>
<li>定制的有效载荷大小。 没有重复（例如，即使被许多用户故事引用，也只用提供一次epic）</li>
<li>客户端仍然必须将数据拼接在一起以便解决关系，这可能非常麻烦。</li>
</ul>
<h4 id="嵌入"><a href="#嵌入" class="headerlink" title="嵌入"></a>嵌入</h4><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">    &#123; </span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">1</span>, </span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;用户故事1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;epic&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">5</span>, </span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;epic5&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;subTask&quot;</span>: [</span><br><span class="line">        &#123; <span class="string">&quot;id&quot;</span>: <span class="number">12</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;子任务12&quot;</span> &#125;</span><br><span class="line">        , &#123; <span class="string">&quot;id&quot;</span>: <span class="number">13</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;子任务13&quot;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对客户来说最方便。 是可以直接通过关系来获取实际数据。</li>
<li>如果客户端不需要关系，白白加载关系。</li>
<li>有效负载大小和重复增加。 可能多次嵌入引用的实体。</li>
</ul>
<h3 id="实践10：使用小驼峰命名法来命名属性"><a href="#实践10：使用小驼峰命名法来命名属性" class="headerlink" title="实践10：使用小驼峰命名法来命名属性"></a>实践10：使用小驼峰命名法来命名属性</h3><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">&#123; &quot;epic.dateOfCreated&quot;: 2019<span class="string">-05</span><span class="string">-16</span> &#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 反例</span><br><span class="line">epic.created_date <span class="regexp">//</span> 违反JavaScript规范</span><br><span class="line">epic.DateOfCreated <span class="regexp">//</span> 建议用于构造方法</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 正例</span><br><span class="line">epic.dateOfCreated</span><br></pre></td></tr></table></figure>

<h3 id="实践11：使用动词进行操作"><a href="#实践11：使用动词进行操作" class="headerlink" title="实践11：使用动词进行操作"></a>实践11：使用动词进行操作</h3><p>有时对API调用的响应不涉及资源（如计算，转义或变换）。 例：</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取</span></span><br><span class="line"><span class="built_in">GET</span> /translate?<span class="keyword">from</span>=de_DE&amp;<span class="keyword">to</span>=en_US&amp;<span class="built_in">text</span>=Hallo</span><br><span class="line"><span class="built_in">GET</span> /calculate?para2=<span class="number">23</span>&amp;para2=<span class="number">432</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发更改服务器端状态的操作</span></span><br><span class="line">POST /restartServer</span><br><span class="line"><span class="comment">// 无消息体</span></span><br><span class="line"></span><br><span class="line">POST /banUserFromChannel</span><br><span class="line">&#123; <span class="string">&quot;user&quot;</span>: <span class="string">&quot;123&quot;</span>, <span class="string">&quot;channel&quot;</span>: <span class="string">&quot;serious-chat-channel&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<p>通过动词来表达RPC风格API，它比尝试RESTful风格来进行操作更简单，更直观（例如PATCH / server with {“restart”：true}）。REST风格非常适合与领域模型交互，RPC适合于操作。 更多信息请查看“<a href="https://www.smashingmagazine.com/2016/09/understanding-rest-and-rpc-for-http-apis/">Understanding RPC Vs REST For HTTP APIs</a>”。</p>
<h3 id="实践12：分页"><a href="#实践12：分页" class="headerlink" title="实践12：分页"></a>实践12：分页</h3><p>两种流行的分页方法是：</p>
<ol>
<li>基于偏移的分页</li>
<li>基于键集的分页，又称继续令牌，也称为光标（推荐）</li>
</ol>
<h4 id="基于偏移的分页"><a href="#基于偏移的分页" class="headerlink" title="基于偏移的分页"></a>基于偏移的分页</h4><p>一般方法是使用参数offset和limit来进行分页：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回30至45的epics</span></span><br><span class="line">/epics?offset=30&amp;<span class="built_in">limit</span>=15 </span><br></pre></td></tr></table></figure>

<p>如果未填参数，则可使用默认值（offset=0， limit=100 ）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回0至100的epics</span></span><br><span class="line">/epics</span><br></pre></td></tr></table></figure>

<p>还可以在响应数据中，提供前一页和后一页的链接：</p>
<p>请求：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回30至45的epics</span></span><br><span class="line">/epics?offset=30&amp;<span class="built_in">limit</span>=15 </span><br></pre></td></tr></table></figure>

<p>响应：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;pagination&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;offset&quot;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">&quot;limit&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: <span class="number">3465</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">    <span class="regexp">//</span>...</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;links&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;next&quot;</span>: <span class="string">&quot;http://www.domain.com/epics?offset=30&amp;limit=10&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prev&quot;</span>: <span class="string">&quot;http://www.domain.com/epics?offset=10&amp;limit=10&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基于偏移量的分页实现很简单，但是有两个缺点：</p>
<ol>
<li>查询慢。数据量大时SQL偏移子句执行会很慢。</li>
<li>不安全。分页期间的变更。</li>
</ol>
<h4 id="基于键集的分页，又称继续令牌，也称为光标（推荐）"><a href="#基于键集的分页，又称继续令牌，也称为光标（推荐）" class="headerlink" title="基于键集的分页，又称继续令牌，也称为光标（推荐）"></a>基于键集的分页，又称继续令牌，也称为光标（推荐）</h4><p>简单来说就是使用索引列来进行分页。 假设epic有一个索引列data_created，我们就可以使用data_created来分页。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">GET</span> /epics?<span class="attribute">pageSize</span>=100                </span><br><span class="line"><span class="comment"># 客户端接受最靠前的100条epic信息，使用`data_created`字段排序</span></span><br><span class="line"><span class="comment"># 该分页最老epic的`dataCreated` 字段值为 1504224000000 (= Sep 1, 2017 12:00:00 AM)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">GET</span> /epics?<span class="attribute">pageSize</span>=100&amp;createdSince=1504224000000</span><br><span class="line"><span class="comment"># 客户端请求1504224000000之后的100个epics数据。 </span></span><br><span class="line"><span class="comment"># 该分页最前面的epic创建于1506816000000. </span></span><br></pre></td></tr></table></figure>

<p>该分页方式解决了基于偏移的分页的许多缺点，但对调用方来说不太方便。</p>
<p>更好的方式是通过向日期添加附加信息（如id）来创建所谓的 continuation token，以提高可靠性和效率。<br>此外，应该向该令牌的有效负载中提供专用字段，以便客户端不用必须通过查看元素才能搞清楚。 甚至还可以进一步提供下一页链接。</p>
<p>因此 <code>GET /epics?pageSize=100</code>请求将返回如下：  </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;pagination&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;continuationToken&quot;</span>: <span class="string">&quot;1504224000000_10&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">    <span class="regexp">//</span> ...</span><br><span class="line">    <span class="regexp">//</span> last element:</span><br><span class="line">    &#123; <span class="string">&quot;id&quot;</span>: <span class="number">10</span>, <span class="string">&quot;dateCreated&quot;</span>: <span class="number">1504224000000</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;links&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;next&quot;</span>: <span class="string">&quot;http://www.domain.com/epics?pageSize=100&amp;continue=1504224000000_10&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下一页链接使API真正成为RESTful风格，因为客户端只需通过这些链接（HATEOAS）即可查看集合。 无需手动构建URL。 此外，服务端可以简单地更改URL结构而不会破坏客户端，保证接口的演进性。</p>
<h3 id="实践13：确保API的可演进性"><a href="#实践13：确保API的可演进性" class="headerlink" title="实践13：确保API的可演进性"></a>实践13：确保API的可演进性</h3><h4 id="避免破坏性变更"><a href="#避免破坏性变更" class="headerlink" title="避免破坏性变更"></a>避免破坏性变更</h4><ul>
<li>保持向后兼容。只要客户端能接受就通过添加字段的方式。</li>
<li>复制和弃用。要更改现有字段（重命名或更改结构），可在该字段旁边添加新字段，并在接口手册中弃用该字段。一段时间后，删除旧字段。</li>
<li>利用超媒体和HATEOAS。只要客户端使用响应中的链接来访问（且不会手动创建URL），即可以安全地更改URL而不会破坏客户端。</li>
<li>使用新名称创建新资源。如果新业务需求导致全新的领域模型和工作流，则可以创建新资源。</li>
</ul>
<h4 id="保持业务逻辑在服务侧"><a href="#保持业务逻辑在服务侧" class="headerlink" title="保持业务逻辑在服务侧"></a>保持业务逻辑在服务侧</h4><p>不要让服务成为转储数据访问层，它通过直接公开数据库模型（低级API）来提供CRUD功能。这造成了高耦合。</p>
<p>因此，我们应该构建高层次/基于工作流的API而不是低级API。</p>
<h3 id="实践14：版本化"><a href="#实践14：版本化" class="headerlink" title="实践14：版本化"></a>实践14：版本化</h3><p>API实在无法演进，则必须提供不同版本的API。版本控制允许在不破坏客户端的情况下，在新版本中发布不兼容和重大更改的API。</p>
<p>有两种最流行的版本控制方法：</p>
<ul>
<li>通过URLs版本化</li>
<li>通过Accept HTTP Header进行版本控制（内容协商）</li>
</ul>
<h4 id="通过URLs版本化"><a href="#通过URLs版本化" class="headerlink" title="通过URLs版本化"></a>通过URLs版本化</h4><p>只需将API的版本号放在每个资源的URL中即可。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/v1/</span>epics</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>对API开发人员非常简单。</li>
<li>对客户端访问也非常简单。</li>
<li>可以复制和粘贴URL。</li>
</ul>
<p>缺点：</p>
<ul>
<li>非RESTful。（该方式会令URL发生变化）</li>
<li>破坏URLs。 客户端必须维护和更新URL。</li>
</ul>
<p>由于其简单性，该方式被各大厂商广泛使用，例如：Facebook, Twitter, Google/YouTube, Bing, Dropbox, Tumblr以及Disqus等。</p>
<h4 id="通过Accept-HTTP-Header进行版本控制（内容协商）"><a href="#通过Accept-HTTP-Header进行版本控制（内容协商）" class="headerlink" title="通过Accept HTTP Header进行版本控制（内容协商）"></a>通过Accept HTTP Header进行版本控制（内容协商）</h4><p>更RESTFul的方式是利用通过Accept HTTP请求头的内容协商。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /epics</span><br><span class="line">Accept: application/vnd.myapi.v2+json</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>URLs保持不变</li>
<li>RESTFul方式</li>
<li>HATEOAS友好</li>
</ul>
<p>缺点：</p>
<ul>
<li>稍微难以使用。 客户必须注意标题。</li>
<li>无法再复制和粘贴网址。</li>
</ul>
<h2 id="参考案例"><a href="#参考案例" class="headerlink" title="参考案例"></a>参考案例</h2><ol>
<li><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference">https://www.elastic.co/guide/en/elasticsearch/reference</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5NTg2NTU0Ng%3D%3D&chksm=bd5d2c238a2aa5354cc1d6de2804895cd46d655963433ce7b07891f3f2e40d9931cd0d990741&idx=2&mid=2656598662&scene=0&sn=1bb738ad2ee92c5963dd94cba03dd0b9#rd">RFC7807：API错误处理最佳实践</a> </p>
</li>
<li><p><a href="https://tools.ietf.org/html/rfc7807">RFC7807</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/cf80d644727e">RESTful Service API 设计最佳工程实践和常见问题解决方案</a> </p>
</li>
<li><p><a href="http://www.21cto.com/article/1751">REST API 设计与开发最佳实践</a> </p>
</li>
<li><p><a href="https://phauer.com/2015/restful-api-design-best-practices/">RESTful API Design. Best Practices in a Nutshell.</a></p>
</li>
<li><p><a href="http://soundadvice.id.au/blog/2011/12/06/#httpEvolvability">Best Practices for HTTP API evolvability</a></p>
</li>
<li><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-SpringHATEOAS/">使用 Spring HATEOAS 开发 REST 服务</a></p>
</li>
<li><p><a href="https://phauer.com/2018/web-api-pagination-timestamp-id-continuation-token/">Web API Pagination with the ‘Timestamp_ID’ Continuation Token</a></p>
</li>
<li><p><a href="https://martinfowler.com/articles/richardsonMaturityModel.html#level0">Richardson Maturity Model — steps toward the glory of REST</a></p>
</li>
<li><p><a href="https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven">REST APIs must be hypertext-driven</a></p>
</li>
<li><p><a href="https://www.youtube.com/watch?time_continue=1&v=mQkf85S9UoQ">REST beyond the obvious – API design for ever evolving systems</a></p>
</li>
</ol>
<p>转载自: <a href="http://kaelzhang81.github.io/2019/05/24/Restful-API%E8%AE%BE%E8%AE%A1%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/">http://kaelzhang81.github.io/2019/05/24/Restful-API%E8%AE%BE%E8%AE%A1%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</a></p>
]]></content>
  </entry>
  <entry>
    <title>SQLAlchemy default 不更新</title>
    <url>/2022/03/20/SQLAlchemy-default-%E4%B8%8D%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p>错误示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserModel</span>(db.Model):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    __tablename__ = <span class="string">&quot;user&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    <span class="built_in">id</span> = Column(db.BIGINT, primary_key=<span class="literal">True</span>, unique=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    uid = Column(db.String(<span class="number">36</span>), unique=<span class="literal">True</span>, default=generate_uuid())</span><br><span class="line">    username = Column(db.String(<span class="number">32</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    password = Column(db.String(<span class="number">60</span>))</span><br><span class="line">    category = Column(db.String(<span class="number">32</span>), default=Constants.DB_UserModel.Category.USER.value)</span><br><span class="line">    mobile = Column(db.String(<span class="number">32</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    email = Column(db.String(<span class="number">32</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    register_date = Column(db.DATETIME, default=datetime.now())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_uuid</span><span class="params">()</span></span>:</span><br><span class="line">    <span class="keyword">return</span> str(uuid.uuid4())</span><br></pre></td></tr></table></figure>

<p>正确示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserModel</span>(db.Model):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    __tablename__ = <span class="string">&quot;user&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    <span class="built_in">id</span> = Column(db.BIGINT, primary_key=<span class="literal">True</span>, unique=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    uid = Column(db.String(<span class="number">36</span>), unique=<span class="literal">True</span>, default=generate_uuid)</span><br><span class="line">    username = Column(db.String(<span class="number">32</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    password = Column(db.String(<span class="number">60</span>))</span><br><span class="line">    category = Column(db.String(<span class="number">32</span>), default=Constants.DB_UserModel.Category.USER.value)</span><br><span class="line">    mobile = Column(db.String(<span class="number">32</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    email = Column(db.String(<span class="number">32</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    register_date = Column(db.DATETIME, default=datetime.now)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>default 这个参数后可以指定一个函数</p>
<p>例如 default=generate_uuid, 如果 default=generate_uuid() 则设定为该函数的一个返回值, 即这样是设置了一个常量</p>
]]></content>
  </entry>
  <entry>
    <title>SQLAlchemy 分离对象</title>
    <url>/2022/04/11/SQLAlchemy-%E5%88%86%E7%A6%BB%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = session.query(Model)</span><br><span class="line">session.expunge(i)</span><br><span class="line"></span><br><span class="line">old_id = i.<span class="built_in">id</span></span><br><span class="line">i.<span class="built_in">id</span> = <span class="literal">None</span></span><br><span class="line">session.add(i)</span><br><span class="line">session.flush()</span><br><span class="line"><span class="built_in">print</span>(i.<span class="built_in">id</span>) <span class="comment">#New ID</span></span><br></pre></td></tr></table></figure>

<p>修改从 SQLAlchemy 查询出来的模型会提交的缓冲里, 例如上述代码会导致查询出来的模型<code>id</code>被修改为<code>None</code></p>
<p>如何分离一份模型出来使其修改不影响数据库的提交?</p>
<p>可以使用<code>make_transient()</code>函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> make_transient</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inst = session.query(Model).first()</span><br><span class="line">session.expunge(inst)</span><br><span class="line"></span><br><span class="line">make_transient(inst)</span><br><span class="line">inst.<span class="built_in">id</span> = <span class="literal">None</span></span><br><span class="line">session.add(inst)</span><br><span class="line">session.flush()</span><br><span class="line"><span class="built_in">print</span>(inst.<span class="built_in">id</span>) <span class="comment">#New ID</span></span><br></pre></td></tr></table></figure>

<p>参考链接</p>
<blockquote>
<p><a href="https://docs.sqlalchemy.org/en/14/orm/session_api.html?highlight=make_transient#sqlalchemy.orm.make_transient">https://docs.sqlalchemy.org/en/14/orm/session_api.html?highlight=make_transient#sqlalchemy.orm.make_transient</a><br><a href="https://qa.1r1g.com/sf/ask/1024533471/">https://qa.1r1g.com/sf/ask/1024533471/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>SQL查重以及删除</title>
    <url>/2020/11/26/SQL%E6%9F%A5%E9%87%8D%E4%BB%A5%E5%8F%8A%E5%88%A0%E9%99%A4/</url>
    <content><![CDATA[<h1 id="查询重复记录"><a href="#查询重复记录" class="headerlink" title="查询重复记录"></a>查询重复记录</h1><p>表名: table_name</p>
<p>查询列: column_name</p>
<h2 id="单个条件"><a href="#单个条件" class="headerlink" title="单个条件"></a>单个条件</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name </span><br><span class="line"> <span class="keyword">where</span> column_name <span class="keyword">in</span>(<span class="keyword">select</span> column_name <span class="keyword">from</span> table_name</span><br><span class="line"> <span class="keyword">group</span> <span class="keyword">by</span> column_name <span class="keyword">having</span> <span class="built_in">count</span>(column_name)<span class="operator">&gt;</span><span class="number">1</span>)</span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> column_name;</span><br></pre></td></tr></table></figure>

<h2 id="多个条件"><a href="#多个条件" class="headerlink" title="多个条件"></a>多个条件</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name <span class="keyword">as</span> t1 </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">( </span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> table_name t2 </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">t2.column_name_1<span class="operator">=</span>t1.column_name_1 <span class="keyword">and</span> </span><br><span class="line">t2.column_name_2<span class="operator">=</span>t1.column_name_2 <span class="keyword">and</span> </span><br><span class="line">t2.column_name_3<span class="operator">=</span>t1.column_name_3 <span class="keyword">and</span> </span><br><span class="line">t2.column_name_4<span class="operator">=</span>t1.column_name_4 </span><br><span class="line">)<span class="operator">&gt;</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h1 id="删除重复只保留一个"><a href="#删除重复只保留一个" class="headerlink" title="删除重复只保留一个"></a>删除重复只保留一个</h1><p>表名: table_name</p>
<p>查询列: column_name</p>
<h2 id="单个条件-1"><a href="#单个条件-1" class="headerlink" title="单个条件"></a>单个条件</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> table_name </span><br><span class="line"> <span class="keyword">where</span> column_name <span class="keyword">in</span> (<span class="keyword">select</span> column_name <span class="keyword">from</span> table_name <span class="keyword">group</span> <span class="keyword">by</span> column_name <span class="keyword">having</span> <span class="built_in">count</span>(column_name) <span class="operator">&gt;</span> <span class="number">1</span>) </span><br><span class="line"> <span class="keyword">and</span> ctid <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="built_in">min</span>(ctid) <span class="keyword">from</span> table_name <span class="keyword">group</span> <span class="keyword">by</span> column_name <span class="keyword">having</span> <span class="built_in">count</span>(column_name)<span class="operator">&gt;</span><span class="number">1</span>); </span><br></pre></td></tr></table></figure>

<h2 id="多个条件-1"><a href="#多个条件-1" class="headerlink" title="多个条件"></a>多个条件</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> table_name </span><br><span class="line"> <span class="keyword">where</span> (column_name1,column_name2,column_name3) <span class="keyword">in</span> </span><br><span class="line"> (<span class="keyword">select</span> column_name1,column_name2,column_name3 <span class="keyword">from</span> table_name </span><br><span class="line"> <span class="keyword">group</span> <span class="keyword">by</span> column_name1,column_name2,column_name3 </span><br><span class="line"> <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span>) </span><br><span class="line"> <span class="keyword">and</span> ctid <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line"> (<span class="keyword">select</span> <span class="built_in">min</span>(ctid) <span class="keyword">from</span> table_name </span><br><span class="line"> <span class="keyword">group</span> <span class="keyword">by</span> column_name1,column_name2,column_name3 </span><br><span class="line"> <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://blog.csdn.net/fm0517/article/details/61202099">https://blog.csdn.net/fm0517/article/details/61202099</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH第一次登录免输入yes</title>
    <url>/2021/05/06/SSH%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%99%BB%E5%BD%95%E5%85%8D%E8%BE%93%E5%85%A5yes/</url>
    <content><![CDATA[<p>连接时加入StrictHostKeyChecking=no</p>
<p>例如</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -o StrictHostKeyChecking=<span class="literal">no</span> root@<span class="number">192.168.1.100</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linuxe</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 字符串拼接(链接, 合并)</title>
    <url>/2022/02/21/Shell-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5-%E9%93%BE%E6%8E%A5-%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<p>例子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">name=<span class="string">&quot;Shell&quot;</span></span><br><span class="line">url=<span class="string">&quot;http://c.biancheng.net/shell/&quot;</span></span><br><span class="line">str1=$name<span class="variable">$url</span>  <span class="comment">#中间不能有空格</span></span><br><span class="line">str2=<span class="string">&quot;<span class="variable">$name</span> <span class="variable">$url</span>&quot;</span>  <span class="comment">#如果被双引号包围，那么中间可以有空格</span></span><br><span class="line">str3=<span class="variable">$name</span><span class="string">&quot;: &quot;</span><span class="variable">$url</span>  <span class="comment">#中间可以出现别的字符串</span></span><br><span class="line">str4=<span class="string">&quot;<span class="variable">$name</span>: <span class="variable">$url</span>&quot;</span>  <span class="comment">#这样写也可以</span></span><br><span class="line">str5=<span class="string">&quot;<span class="variable">$&#123;name&#125;</span>Script: <span class="variable">$&#123;url&#125;</span>index.html&quot;</span>  <span class="comment">#这个时候需要给变量名加上大括号</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str4</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str5</span></span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Shellhttp:<span class="regexp">//</span>c.biancheng.net<span class="regexp">/shell/</span></span><br><span class="line">Shell http:<span class="regexp">//</span>c.biancheng.net<span class="regexp">/shell/</span></span><br><span class="line">Shell: http:<span class="regexp">//</span>c.biancheng.net<span class="regexp">/shell/</span></span><br><span class="line">Shell: http:<span class="regexp">//</span>c.biancheng.net<span class="regexp">/shell/</span></span><br><span class="line">ShellScript: http:<span class="regexp">//</span>c.biancheng.net<span class="regexp">/shell/i</span>ndex.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考链接</p>
<p><a href="http://c.biancheng.net/view/1114.html">http://c.biancheng.net/view/1114.html</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Shell 字符串操作</title>
    <url>/2022/02/21/Shell-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h1><h2 id="从指定位置开始截取"><a href="#从指定位置开始截取" class="headerlink" title="从指定位置开始截取"></a>从指定位置开始截取</h2><h3 id="从字符串左边开始截取"><a href="#从字符串左边开始截取" class="headerlink" title="从字符串左边开始截取"></a>从字符串左边开始截取</h3><p>格式</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span>&#123;string:<span class="built_in">start</span>:<span class="keyword">end</span>&#125;</span><br></pre></td></tr></table></figure>

<p>例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">url=<span class="string">&quot;c.biancheng.net&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url: 2: 9&#125;</span></span><br><span class="line">biancheng</span><br></pre></td></tr></table></figure>

<p>end 省略则截取到末尾</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">url=<span class="string">&quot;c.biancheng.net&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url: 2&#125;</span>          <span class="comment">#省略 length，截取到字符串末尾</span></span><br><span class="line">biancheng.net</span><br></pre></td></tr></table></figure>

<h3 id="从右边开始截取"><a href="#从右边开始截取" class="headerlink" title="从右边开始截取"></a>从右边开始截取</h3><p>格式</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="built_in">string</span>: <span class="number">0</span>-start :<span class="built_in">length</span>&#125;</span><br></pre></td></tr></table></figure>

<p>例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">url=<span class="string">&quot;c.biancheng.net&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url: 0-13: 9&#125;</span></span><br><span class="line">biancheng</span><br></pre></td></tr></table></figure>

<p>end 省略</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">url=<span class="string">&quot;c.biancheng.net&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url: 0-13&#125;</span>  <span class="comment">#省略 length，直接截取到字符串末尾</span></span><br><span class="line">biancheng.net</span><br></pre></td></tr></table></figure>

<h2 id="从指定字符-串-开始截取"><a href="#从指定字符-串-开始截取" class="headerlink" title="从指定字符(串)开始截取"></a>从指定字符(串)开始截取</h2><h3 id="使用-号截取右边字符"><a href="#使用-号截取右边字符" class="headerlink" title="使用 # 号截取右边字符"></a>使用 # 号截取右边字符</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="built_in">string</span><span class="comment">#*chars&#125;</span></span><br></pre></td></tr></table></figure>

<p>例</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">url=<span class="string">&quot;http://c.biancheng.net/index.html&quot;</span></span><br><span class="line">echo <span class="variable">$&#123;url#*:&#125;</span></span><br><span class="line"><span class="regexp">//</span>c.biancheng.net/index.html</span><br></pre></td></tr></table></figure>

<p>注意，以上写法遇到第一个匹配的字符（子字符串）就结束了。例如</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">url=<span class="string">&quot;http://c.biancheng.net/index.html&quot;</span></span><br><span class="line">echo <span class="variable">$&#123;url#*/&#125;</span></span><br><span class="line"><span class="regexp">/c.biancheng.net/i</span>ndex.html</span><br></pre></td></tr></table></figure>

<p>如果希望直到最后一个指定字符（子字符串）再匹配结束，那么可以使用##，具体格式为</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="built_in">string</span><span class="comment">##*chars&#125;</span></span><br></pre></td></tr></table></figure>

<p>例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">url=<span class="string">&quot;http://c.biancheng.net/index.html&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url#*/&#125;</span>    <span class="comment">#结果为 /c.biancheng.net/index.html</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url##*/&#125;</span>   <span class="comment">#结果为 index.html</span></span><br><span class="line">str=<span class="string">&quot;---aa+++aa@@@&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str#*aa&#125;</span>   <span class="comment">#结果为 +++aa@@@</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str##*aa&#125;</span>  <span class="comment">#结果为 @@@</span></span><br></pre></td></tr></table></figure>

<h2 id="使用-截取左边字符"><a href="#使用-截取左边字符" class="headerlink" title="使用 % 截取左边字符"></a>使用 % 截取左边字符</h2><p>使用%号可以截取指定字符（或者子字符串）左边的所有字符，具体格式如下：</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="keyword">string</span>%chars*&#125;</span><br></pre></td></tr></table></figure>

<p>请注意<em>的位置，因为要截取 chars 左边的字符，而忽略 chars 右边的字符，所以</em>应该位于 chars 的右侧。其他方面%和#的用法相同，这里不再赘述，仅举例说明：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">url=<span class="string">&quot;http://c.biancheng.net/index.html&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url%/*&#125;</span>  <span class="comment">#结果为 http://c.biancheng.net</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url%%/*&#125;</span>  <span class="comment">#结果为 http:</span></span><br><span class="line">str=<span class="string">&quot;---aa+++aa@@@&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str%aa*&#125;</span>  <span class="comment">#结果为 ---aa+++</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str%%aa*&#125;</span>  <span class="comment">#结果为 ---</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table>
<thead>
<tr>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>${string: start :length}</td>
<td>从 string 字符串的左边第 start 个字符开始，向右截取 length 个字符。</td>
</tr>
<tr>
<td>${string: start}</td>
<td>从 string 字符串的左边第 start 个字符开始截取，直到最后。</td>
</tr>
<tr>
<td>${string: 0-start :length}</td>
<td>从 string 字符串的右边第 start 个字符开始，向右截取 length 个字符</td>
</tr>
<tr>
<td>${string: 0-start}</td>
<td>从 string 字符串的右边第 start 个字符开始截取，直到最后</td>
</tr>
<tr>
<td>${string#*chars}</td>
<td>从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 右边的所有字符</td>
</tr>
<tr>
<td>${string##*chars}</td>
<td>从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 右边的所有字符</td>
</tr>
<tr>
<td>${string%*chars}</td>
<td>从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 左边的所有字符</td>
</tr>
<tr>
<td>${string%%*chars}</td>
<td>从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 左边的所有字符</td>
</tr>
</tbody></table>
<blockquote>
<p>参考链接</p>
<p><a href="http://c.biancheng.net/view/1120.html">http://c.biancheng.net/view/1120.html</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Spring Boot 集成 React 前端路由问题</title>
    <url>/2020/04/26/Spring-Boot-%E9%9B%86%E6%88%90%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="Spring-Boot-集成-React-前端路由问题"><a href="#Spring-Boot-集成-React-前端路由问题" class="headerlink" title="Spring Boot 集成 React 前端路由问题"></a>Spring Boot 集成 React 前端路由问题</h1><p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200426221509.png" alt=""></p>
<h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00  背景"></a>0x00  背景</h2><p>趁着最近疫情窝在家无所事事，着手为自家的公寓开发了一个简易管理系统，实现了入住登记，缴纳各种费用等一些常用功能。</p>
<h2 id="0x01-问题"><a href="#0x01-问题" class="headerlink" title="0x01  问题"></a>0x01  问题</h2><p>打算把React和SpringBoot打成一个Jar包，然后直接丢到Docker上进行部署，映射一个端口出来提供服务。但是发现这样的话SpringBoot会接管前端路由，导致找不到地址的时候SpringBoot直接抛404，前端路由无效。</p>
<span id="more"></span>

<h2 id="0x02-解决"><a href="#0x02-解决" class="headerlink" title="0x02  解决"></a>0x02  解决</h2><p>我们需要当服务端找不到地址的时候直接抛给前端，即index.html。</p>
<p>新建一个配置类 StaticResourceMap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticResourceMap</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 映射静态资源根目录到  frontend</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/frontend/&quot;</span>)</span><br><span class="line">                .resourceChain(<span class="literal">true</span>)</span><br><span class="line">                .addResolver(<span class="keyword">new</span> <span class="title class_">PathResourceResolver</span>()&#123;</span><br><span class="line">                    <span class="comment">// 后端匹配不到路由时转给前端</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> Resource <span class="title function_">getResource</span><span class="params">(String resourcePath, Resource location)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="built_in">super</span>.getResource(resourcePath, location);</span><br><span class="line">                        <span class="keyword">if</span> (resource == <span class="literal">null</span>)&#123;</span><br><span class="line">                            resource = <span class="built_in">super</span>.getResource(<span class="string">&quot;index.html&quot;</span>, location);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> resource;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Spring Boot</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04 配置静态IP</title>
    <url>/2020/05/22/Ubuntu-20-04-%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP/</url>
    <content><![CDATA[<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200522200022.png" alt="20200522200022"></p>
<p>查看你的网卡名称</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ifconfig</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200522200141.png" alt="20200522200141"></p>
<p>例如我要更改 ens160 这个网卡</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/etc/</span>netplan</span><br></pre></td></tr></table></figure>

<p>找到文件，名字可能不一样</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200522200353.png" alt="20200522200353"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nano</span> <span class="number">00</span>-installer-config.yaml</span><br></pre></td></tr></table></figure>

<p>更改配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is the network config written by &#x27;subiquity&#x27;n</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">ens160:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.1</span><span class="number">.6</span><span class="string">/24</span>]</span><br><span class="line">      <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">nameservers:</span> </span><br><span class="line">        <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>,<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>]</span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>配置</p>
<ul>
<li>ip地址：192.168.1.6</li>
<li>子网掩码： 255.255.255.0</li>
<li>网关：192.168.1.1</li>
<li>DNS服务器：192.168.1.1， 8.8.8.8</li>
</ul>
<p>应用更改</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">netplan <span class="built_in">apply</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu20.04开机启动</title>
    <url>/2020/06/07/Ubuntu20-04%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -fs /lib/systemd/system/rc-local.service /etc/systemd/system/rc-local.service</span><br><span class="line">cd /etc/systemd/system/</span><br><span class="line">nano rc-local.service</span><br></pre></td></tr></table></figure>

<p>rc-local.service 内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash"> SPDX-License-Identifier: LGPL-2.1+</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  This file is part of systemd.</span></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  systemd is free software; you can redistribute it and/or modify it</span></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash"> under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash"> the Free Software Foundation; either version 2.1 of the License, or</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash"> (at your option) any later version.</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">This unit gets pulled automatically into multi-user.target by</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">systemd-rc-local-generator <span class="keyword">if</span> /etc/rc.local is executable.</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=/etc/rc.local Compatibility</span><br><span class="line">Documentation=man:systemd-rc-local-generator(8)</span><br><span class="line">ConditionFileIsExecutable=/etc/rc.local</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/etc/rc.local start</span><br><span class="line">TimeoutSec=0</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">GuessMainPID=no</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=rc-local.service</span><br></pre></td></tr></table></figure>

<p>创建 rc.local 文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">touch <span class="regexp">/etc/</span>rc.local</span><br></pre></td></tr></table></figure>

<p>赋予可执行权限</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">755</span> <span class="regexp">/etc/</span>rc.local</span><br></pre></td></tr></table></figure>

<p>编辑 rc.local</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">nano <span class="regexp">/etc/</span>rc.local</span><br></pre></td></tr></table></figure>

<p>文件内容 </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里开机执行的脚本</span></span><br><span class="line"><span class="comment"># 要卸载 exit 0 之前</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>完成。</p>
<p>参考链接 <a href="https://blog.csdn.net/zhengchaooo/article/details/80202599">https://blog.csdn.net/zhengchaooo/article/details/80202599</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu修改时区</title>
    <url>/2020/06/06/Ubuntu%E4%BF%AE%E6%94%B9%E6%97%B6%E5%8C%BA/</url>
    <content><![CDATA[<p>Ubuntu 版本 20.04 LTS</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo tzselect</span></span><br></pre></td></tr></table></figure>

<p>根据提示选择你需要的时区</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200606171802.png" alt="20200606171802"></p>
<p>例如我选择的是Asia-China-Beijing Time</p>
<p>创建一个软连接</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ln -sf <span class="regexp">/usr/</span>share<span class="regexp">/zoneinfo/</span>Asia<span class="regexp">/Shanghai /</span>etc/localtime</span><br></pre></td></tr></table></figure>

<p>查看结果</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span> -R</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu挂载远程目录到本地</title>
    <url>/2020/06/06/Ubuntu%E6%8C%82%E8%BD%BD%E8%BF%9C%E7%A8%8B%E7%9B%AE%E5%BD%95%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
    <content><![CDATA[<p>挂载远程目录<code>//192.168.1.3/download/porn</code>到本地<code>/download/porn</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mount -t cifs <span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.3</span><span class="regexp">/download/</span>porn <span class="regexp">/download/</span>porn -o username=test,password=test,domain=DOMAIN,vers=<span class="number">1.0</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 同步设置</title>
    <url>/2020/04/28/VSCode-%E5%90%8C%E6%AD%A5%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="VSCode-同步设置"><a href="#VSCode-同步设置" class="headerlink" title="VSCode 同步设置"></a>VSCode 同步设置</h1><p>Visual Studio Code 因其轻巧和插件繁多已经逐渐成为我的主力开发工具。当我准备更换电脑在笔记本上开发时候的时候，我碰到了一个棘手的问题。我得重新下载插件和设置VSCode，难道我得记下台式机上所有的设置和插件然后到笔记本上重新设置和下载？这显然不符合Geek精神！有一款现成的插件可以解决我们的问题。</p>
<span id="more"></span>

<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul>
<li><p>下载 Settings Sync 插件</p>
</li>
<li><p>Github 账号</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>安装 Settings Sync 插件</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428152655.png" alt=""></p>
</li>
</ul>
<h2 id="设置-Settings-Sync"><a href="#设置-Settings-Sync" class="headerlink" title="设置 Settings Sync"></a>设置 Settings Sync</h2><ul>
<li><p>点击 Logtin with Github </p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428154119.png" alt=""></p>
</li>
<li><p>看见这个页面就可以关闭了</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428154237.png" alt=""></p>
</li>
<li><p>这个时候就可以 Shift + alt + U 上传了</p>
</li>
</ul>
<p>但是这个获取到的token权限有点大，我们需要设置一个只可以操作gists的token</p>
<h2 id="设置-Github"><a href="#设置-Github" class="headerlink" title="设置 Github"></a>设置 Github</h2><ul>
<li><p>打开 Github 点击 Settings</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428152811.png" alt=""></p>
</li>
<li><p>点击 Developer settings</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428152839.png" alt=""></p>
</li>
<li><p>点击 Personal access tokens</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428153026.png" alt=""></p>
</li>
<li><p>点击 Generate new token</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428153102.png" alt=""></p>
</li>
<li><p>输入描述，随便输，方便记忆我们可以输入 vscode settings sync</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428153219.png" alt=""></p>
</li>
<li><p>勾选 Gist</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428153240.png" alt=""></p>
</li>
<li><p>点击 Generate token 创建一个 token</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428153313.png" alt=""></p>
</li>
<li><p>复制得到的 Token</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428153455.png" alt=""></p>
</li>
<li><p>按 F1 找到 Sync 的选项， 点击高级选项</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428153703.png" alt=""></p>
</li>
<li><p>点击 打开设置</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428153735.png" alt=""></p>
</li>
<li><p>把刚才得到的 Token 粘贴到 获取令牌</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428153818.png" alt=""></p>
</li>
</ul>
<h2 id="GistID-设置问题"><a href="#GistID-设置问题" class="headerlink" title="GistID 设置问题"></a>GistID 设置问题</h2><p>但是我之前根据网上的教程设置的时候后，把刚才我们获取到的Token 设置成了 Gist ID，这样会造成</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428154540.png" alt=""></p>
<p>这个问题困扰了我许久。</p>
<p>正确的 Gists ID 应该是你初次上传到Gists后插件自动创建的一个id</p>
<p>我们可以在这里找到，点击 Your gists</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428154724.png" alt=""></p>
<p>这个插件自动创建的 Gists 才是正确的　Gist ID</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428154752.png" alt=""></p>
<p>点进去后的地址栏</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428154925.png" alt=""></p>
<p><code>https://gist.github.com/&lt;Yourself Github ID&gt;/&lt;Gists ID&gt;</code></p>
<p>这个 <code>841ea17809fbf33b6550d34f464de557</code> 才是我们的Gist ID</p>
<p>如果你之前也是错误的设置过这个你需要把这个GistID替换成正确的</p>
<p>例如我之前错误的设置成了这样</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428155657.png" alt=""></p>
<p>你需要把这个改过来，然后 Shift + alt + u 上传 ….</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428154540.png" alt=""></p>
<p>然后你会发现，Fuck！还是这样？</p>
<p>再看一下</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428155657.png" alt=""></p>
<p>你会发现怎么没改过去？又改回来了？我之前也被这个问题困扰了好久。不知道为什么每次改过来又自己改回去？</p>
<h2 id="GistID-设置问题解决"><a href="#GistID-设置问题解决" class="headerlink" title="GistID 设置问题解决"></a>GistID 设置问题解决</h2><p>我们直接搜索这个值</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428160148.png" alt=""></p>
<p>发现我们当前目录下的 .vscode 文件夹下的settings.json 并没有改过来，依旧是这个值，我们编辑这个文件，把他改成正确的GistsID然后保存。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428160616.png" alt=""></p>
<p>问题解决。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428161000.png" alt=""></p>
<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><hr>
<h3 id="command-‘java-projectConfiguration-update’-not-found"><a href="#command-‘java-projectConfiguration-update’-not-found" class="headerlink" title="command ‘java.projectConfiguration.update’ not found"></a>command ‘java.projectConfiguration.update’ not found</h3><p>Sync 插件和这个插件冲突</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428160722.png" alt=""></p>
<p>Sync 的时候先停用这个插件。</p>
]]></content>
      <categories>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Valine评论系统增加邮件通知</title>
    <url>/2020/05/08/Valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%A2%9E%E5%8A%A0%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508025008.png" alt="20200508025008"></p>
<span id="more"></span>

<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>仓库地址 <a href="https://github.com/DesertsP/Valine-Admin">https://github.com/DesertsP/Valine-Admin</a></p>
<p>登录Leancloud</p>
<p>选择应用</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508020806.png" alt="20200508020806"></p>
<p>云引擎-部署-部署项目</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508020959.png" alt="20200508020959"></p>
<p>Git 部署</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508021107.png" alt="20200508021107"></p>
<p>输入仓库地址</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/DesertsP/</span>Valine-Admin.git</span><br></pre></td></tr></table></figure>

<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508021128.png" alt="20200508021128"></p>
<p>设置</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508021217.png" alt="20200508021217"></p>
<p>添加自定义环境变量</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508021234.png" alt="20200508021234"></p>
<p>具体备注参见仓库说明</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/DesertsP/</span>Valine-Admin</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>变量</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>SITE_NAME</td>
<td>Deserts</td>
<td>[必填]博客名称</td>
</tr>
<tr>
<td>SITE_URL</td>
<td><a href="https://deserts.io">https://deserts.io</a></td>
<td>[必填]首页地址</td>
</tr>
<tr>
<td><strong>SMTP_SERVICE</strong></td>
<td>QQ</td>
<td>[新版支持]邮件服务提供商，支持 QQ、163、126、Gmail 以及 <a href="https://nodemailer.com/smtp/well-known/#supported-services">更多</a></td>
</tr>
<tr>
<td>SMTP_USER</td>
<td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td>
<td>[必填]SMTP登录用户</td>
</tr>
<tr>
<td>SMTP_PASS</td>
<td>ccxxxxxxxxch</td>
<td>[必填]SMTP登录密码（QQ邮箱需要获取独立密码）</td>
</tr>
<tr>
<td>SENDER_NAME</td>
<td>Deserts</td>
<td>[必填]发件人</td>
</tr>
<tr>
<td>SENDER_EMAIL</td>
<td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td>
<td>[必填]发件邮箱</td>
</tr>
<tr>
<td>ADMIN_URL</td>
<td><a href="https://xxx.leanapp.cn/">https://xxx.leanapp.cn/</a></td>
<td>[建议]Web主机二级域名，用于自动唤醒</td>
</tr>
<tr>
<td>BLOGGER_EMAIL</td>
<td><a href="mailto:xxxxx@gmail.com">xxxxx@gmail.com</a></td>
<td>[可选]博主通知收件地址，默认使用SENDER_EMAIL</td>
</tr>
<tr>
<td>AKISMET_KEY</td>
<td>xxxxxxxxxxxx</td>
<td>[可选]Akismet Key 用于垃圾评论检测，设为MANUAL_REVIEW开启人工审核，留空不使用反垃圾</td>
</tr>
</tbody></table>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508022236.png" alt="20200508022236"></p>
<p>切换回部署-部署</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508022304.png" alt="20200508022304"></p>
<p>等待部署完成，第一次要久一点。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508022333.png" alt="20200508022333"></p>
<p>设置-域名绑定-云引擎绑定</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508022421.png" alt="20200508022421"></p>
<p>绑定新域名，这个域名是用来管理评论的，一个简易后台，如果你用leancloud国内版，注意备案。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508022436.png" alt="20200508022436"></p>
<p>去你的dns服务商哪里解析这个域名</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508022613.png" alt="20200508022613"></p>
<p>等待准备就绪</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508023122.png" alt="20200508023122"></p>
<p>返回云引擎-定时任务-创建定时任务，这个用于定时唤醒，如果你是付费用户这一步可以忽略，付费用户容器不回休眠。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508023224.png" alt="20200508023224"></p>
<p>创建一个任务</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">0</span>/<span class="number">30</span> <span class="number">7</span>-<span class="number">23</span> * * ?</span><br></pre></td></tr></table></figure>

<p>这个表达式表示7-23点之间没半个小时执行一次，具体参考cron表达式</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508023326.png" alt="20200508023326"></p>
<p>再创建一个任务，每天早8点补发过去24小时漏发的邮件</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">8</span> * * ?</span><br></pre></td></tr></table></figure>

<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508023540.png" alt="20200508023540"></p>
<p>访问你刚才设置的二级域名</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508023653.png" alt="20200508023653"></p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508023709.png" alt="20200508023709"></p>
<p>第一次你需要设置一个用户名和密码，访问</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>你设置的域名/sign-up</span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">https://sendemail.photo.wudinaonao.<span class="keyword">com</span>/<span class="keyword">sign</span>-<span class="keyword">up</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508024711.png" alt="20200508024711"></p>
<p>至此后台管理设置完成</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508024822.png" alt="20200508024822"></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>去网站上发个评论试一下 </p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508024954.png" alt="20200508024954"></p>
<p>测试成功</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200508025008.png" alt="20200508025008"></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><blockquote>
<p><a href="https://github.com/DesertsP/Valine-Admin">https://github.com/DesertsP/Valine-Admin</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue warn]: Non-function value encountered for default slot</title>
    <url>/2022/04/05/Vue-warn-Non-function-value-encountered-for-default-slot/</url>
    <content><![CDATA[<p>开发工具警告信息:</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">[Vue warn]: Non-<span class="keyword">function</span> <span class="title">value</span> encountered for default slot. Prefer <span class="keyword">function</span> <span class="title">slots</span> for better performance.</span><br></pre></td></tr></table></figure>

<p>原因是组件插槽所插入的是插槽内容，而非函数值。Vue3 推荐使用函数式插槽，以便获得更佳的性能。</p>
<p>不推荐的写法</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">h</span><span class="params">(AtActionSheetHeader, null, props.title)</span></span> <span class="comment">// 不推荐的写法</span></span><br></pre></td></tr></table></figure>

<p>推荐的写法</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">h(AtActionSheetHeader, <span class="literal">null</span>, &#123; default: <span class="function"><span class="params">()</span> =&gt;</span> props.title &#125;)</span><br></pre></td></tr></table></figure>

<p>参考链接</p>
<blockquote>
<p><a href="https://github.com/b2nil/taro-ui-vue3/issues/3">https://github.com/b2nil/taro-ui-vue3/issues/3</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>async/await让异步操作同步执行</title>
    <url>/2022/04/11/async-await%E8%AE%A9%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E5%90%8C%E6%AD%A5%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们经常会遇到这样的麻烦事,多个函数按顺序执行,返回结果却不是我们预期的顺序,原因一般是由于异步操作引起的,所以呢,我们需要一种解决方案来处理这种问题,从而使得异步操作按照同步的方式来执行,这样我们就可以控制异步操作输出结果的顺序了</p>
<h2 id="异步操作会带来什么问题"><a href="#异步操作会带来什么问题" class="headerlink" title="异步操作会带来什么问题"></a>异步操作会带来什么问题</h2><p>异步操作可能会许多的问题,下面是常见的两种</p>
<h3 id="1-函数执行的结果并不是按照顺序返回"><a href="#1-函数执行的结果并不是按照顺序返回" class="headerlink" title="1.函数执行的结果并不是按照顺序返回"></a>1.函数执行的结果并不是按照顺序返回</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;wait me 3000&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br><span class="line"><span class="title function_">fn2</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//111</span></span><br><span class="line"><span class="comment">//222</span></span><br><span class="line"><span class="comment">//wait me 3000</span></span><br></pre></td></tr></table></figure>

<p>上面的代码,如果你期待的结果是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//111</span></span><br><span class="line"><span class="comment">//wait me 3000</span></span><br><span class="line"><span class="comment">//222</span></span><br></pre></td></tr></table></figure>

<p>那就错了,因为<code>fn1</code>函数里面还有一个函数<code>setTimeout</code>,这两个函数是异步执行的,而<code>fn1</code>和<code>fn2</code>是同步执行的,先执行<code>fn1</code>再执行<code>fn2</code>,在执行<code>fn1</code>的时候打印结果<code>111</code>,三秒后再执行<code>setTimeout</code>,但是在这三秒之前已经执行完了<code>fn2</code></p>
<h3 id="2-在外部获取不到异步函数里的值"><a href="#2-在外部获取不到异步函数里的值" class="headerlink" title="2.在外部获取不到异步函数里的值"></a>2.在外部获取不到异步函数里的值</h3><p>下面我们看一个最简单的例子,我的需求是要在<code>fn1</code>函数外面打印<code>msg</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       msg=<span class="string">&#x27;wait me 3000&#x27;</span>;</span><br><span class="line">    &#125;,<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure>

<p>那么怎么样才能获取到<code>msg</code>呢</p>
<h3 id="使用回调函数"><a href="#使用回调函数" class="headerlink" title="使用回调函数"></a>使用回调函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       msg=<span class="string">&#x27;wait me 3000&#x27;</span>;</span><br><span class="line">       <span class="title function_">callback</span>(msg);</span><br><span class="line">    &#125;,<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);<span class="comment">//wait me 3000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="使用Promise"><a href="#使用Promise" class="headerlink" title="使用Promise"></a>使用Promise</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">res,rej</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            msg=<span class="string">&#x27;wait me 3000&#x27;</span>;</span><br><span class="line">            <span class="title function_">res</span>(msg);</span><br><span class="line">        &#125;,<span class="number">3000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>关于<code>Promise</code>的信息可以参考</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p>
</blockquote>
<h2 id="async-await解决方案"><a href="#async-await解决方案" class="headerlink" title="async/await解决方案"></a>async/await解决方案</h2><p>async/await的作用就是使异步操作以同步的方式去执行</p>
<p>异步操作同步化?</p>
<p>可以使用Promise中的then()来实现,那么async/await与它之间有什么区别呢</p>
<h3 id="1-async函数返回的是一个Promise对象"><a href="#1-async函数返回的是一个Promise对象" class="headerlink" title="1.async函数返回的是一个Promise对象"></a>1.async函数返回的是一个Promise对象</h3><p>如果一个函数加了<code>async</code>关键词,这个函数又有返回值,在调用这个函数时,如果函数执行成功,内部会调用<code>Promise.solve()</code>方法返回一个<code>Promise</code>对象,如果函数执行出现异常,就会调用<code>Promise.reject()</code>方法返回一个<code>promise</code>对象</p>
<p>要想获取到<code>async</code>函数的执行结果，就要调用<code>Promise</code>的<code>then</code>或<code>catch</code>来给它注册回调函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;111&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>());<span class="comment">//Promise &#123; &#x27;111&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<p>既然是<code>Promise</code>对象,因此可以使用<code>then()</code>获取返回的结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;111&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)<span class="comment">//111</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-await"><a href="#2-await" class="headerlink" title="2.await"></a>2.await</h3><p>上面介绍了<code>async</code>的作用,一般情况下,<code>async</code>与<code>await</code>配合使用才能使异步操作同步化,<code>await</code>就是等待的意思,等待某一个函数执行完之后,后面的代码才能开始执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            msg=<span class="string">&#x27;wait me 3000&#x27;</span>;</span><br><span class="line">            <span class="title function_">resolve</span>(msg)</span><br><span class="line">        &#125;,<span class="number">3000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncCall</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> result=<span class="keyword">await</span> <span class="title function_">fn1</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">asyncCall</span>();</span><br></pre></td></tr></table></figure>

<p>如果我们没有等待<code>fn1</code>执行完之后再打印<code>result</code>,那么有可能得到是<code>undefined</code></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong><code>aysnc await</code>可以让我们以同步的方式编写异步代码</strong></p>
<p>在很多的时候,我们是希望按照同步的方式来获得异步函数的结果,比如登录时,我们必须要在后台返回匹配成功的信息之后才能进行页面跳转,因此,使异步操作同步化这是很重要的知识点,但是这种方案是基于<code>Promise</code>的基础之上的,因此在学习该知识时,一定要对<code>Promise</code>有充分的理解</p>
<p>参考链接</p>
<blockquote>
<p><a href="https://juejin.cn/post/6844903984889593863">https://juejin.cn/post/6844903984889593863</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>crontab 排错</title>
    <url>/2021/05/29/crontab-%E6%8E%92%E9%94%99/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在用 crontab 定时备份 gitlab 时, 发现任务总是不成功. 😱😱😱 </p>
<p>命令如下</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">0</span> * * * /root/docker/gitlab/backup-gitlab.sh &gt;&gt; /root/docker/gitlab/backup-gitlab.<span class="keyword">log</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>测试后发现日志总是没有任何输出, 说明这个命令没有被执行. 🤔🤔🤔</p>
<p>随便写了条命令测试</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">* * * * * echo <span class="string">&quot;`date`&quot;</span> &gt; <span class="regexp">/root/</span>crontest.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p>发现有输出…. 😲😲😲</p>
<p>那么说明 crontab 确实工作了…. 😵😵😵</p>
<p>沉思…. 🤔🤔🤔</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>虽然我不太清楚是什么原因, 但是当我把以下配置加入 crontab 后他开始工作了. 😄😄😄</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">SHELL=<span class="regexp">/bin/bash</span></span><br><span class="line">PATH=<span class="regexp">/sbin:/bin</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/bin</span></span><br><span class="line">MAILTO=root</span><br><span class="line">HOME=<span class="regexp">/</span></span><br></pre></td></tr></table></figure>

<p>也许是因为显式指定了 shell, 以及一些其他的一些参数, 导致可以正常工作, 因为我之前一直怀疑是权限的问题. 🤣🤣🤣</p>
<p>参考连接</p>
<blockquote>
<p><a href="https://my.oschina.net/leejun2005/blog/1788342">https://my.oschina.net/leejun2005/blog/1788342</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>&gt;/dev/null 2&gt;&amp;1</title>
    <url>/2022/02/23/dev-null-2-1/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>命令</th>
<th>标准输出</th>
<th>错误输出</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;/dev/null 2&gt;&amp;1</td>
<td>丢弃</td>
<td>丢弃</td>
</tr>
<tr>
<td>2&gt;&amp;1 &gt;/dev/null</td>
<td>丢弃</td>
<td>屏幕</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>electron安装</title>
    <url>/2022/04/02/electron%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>错误信息</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">error C:\Users\wlzaz\Desktop\Gitlab\vben-admin-electron\node_modules\electron: Co</span><br><span class="line">Exit code: <span class="number">1</span></span><br><span class="line">Command: <span class="keyword">node</span> <span class="title">install</span>.js</span><br><span class="line">Arguments: </span><br><span class="line">Directory: C:\Users\wlzaz\Desktop\Gitlab\vben-admin-electron\node_modules\electro</span><br><span class="line">Output:</span><br><span class="line">RequestError: <span class="keyword">read</span> ECONNRESET</span><br><span class="line">    at ClientRequest.<span class="tag">&lt;anonymous&gt;</span> (C:\Users\wlzaz\Desktop\Gitlab\vben-admin-electr</span><br><span class="line">    at Object.onceWrapper (<span class="keyword">node</span><span class="title">:events</span>:<span class="number">646</span>:<span class="number">26</span>)</span><br><span class="line">    at ClientRequest.emit (<span class="keyword">node</span><span class="title">:events</span>:<span class="number">538</span>:<span class="number">35</span>)</span><br><span class="line">    at ClientRequest.origin.emit (C:\Users\wlzaz\Desktop\Gitlab\vben-admin-electr</span><br><span class="line">    at TLSSocket.socketErrorListener (<span class="keyword">node</span><span class="title">:_http_client</span>:<span class="number">442</span>:<span class="number">9</span>)</span><br><span class="line">    at TLSSocket.emit (<span class="keyword">node</span><span class="title">:events</span>:<span class="number">526</span>:<span class="number">28</span>)</span><br></pre></td></tr></table></figure>

<p>运行<code>node install.js</code>失败</p>
<p>分析错误原因 <code>RequestError: read ECONNRESET</code> 连接重置</p>
<p>这个原因大概率是因为被墙了</p>
<p>解决方案, 更换为国内源, 例如淘宝镜像</p>
<p>npm</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">npm config set ELECTRON_MIRROR http:<span class="regexp">//</span>npm.taobao.org<span class="regexp">/mirrors/</span>electron/</span><br></pre></td></tr></table></figure>

<p>yarn</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">yarn config set electron_mirror https:<span class="regexp">//</span>cdn.npm.taobao.org<span class="regexp">/dist/</span>electron/</span><br></pre></td></tr></table></figure>

<p>参考链接</p>
<blockquote>
<p><a href="https://www.talktocomputer.site/blogs/139/">https://www.talktocomputer.site/blogs/139/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>gitlab 502 错误排查</title>
    <url>/2021/05/06/gitlab-502-%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="动态查看日志"><a href="#动态查看日志" class="headerlink" title="动态查看日志"></a>动态查看日志</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">tail -f  <span class="regexp">/var/</span>log<span class="regexp">/gitlab/gi</span>tlab-rails/production.log</span><br></pre></td></tr></table></figure>

<h2 id="迁移或恢复备份后部分操作服务端响应500"><a href="#迁移或恢复备份后部分操作服务端响应500" class="headerlink" title="迁移或恢复备份后部分操作服务端响应500"></a>迁移或恢复备份后部分操作服务端响应500</h2><p>进入容器, 运行</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gitlab-rails dbconsole</span></span><br></pre></td></tr></table></figure>

<p>依次清除 token, 注意! 这样会清除全部的 token, 不过解决问题简单粗暴</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- clear project tokens</span></span><br><span class="line"><span class="keyword">UPDATE</span> projects <span class="keyword">SET</span> runners_token <span class="operator">=</span> <span class="keyword">null</span>, runners_token_encrypted <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">-- clear group tokens</span></span><br><span class="line"><span class="keyword">UPDATE</span> namespaces <span class="keyword">SET</span> runners_token <span class="operator">=</span> <span class="keyword">null</span>, runners_token_encrypted <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">-- clear instance tokens</span></span><br><span class="line"><span class="keyword">UPDATE</span> application_settings <span class="keyword">SET</span> runners_registration_token_encrypted <span class="operator">=</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>造成这个问题的原因是因为没有备份这个文件</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">gitlab-secrets.json</span><br></pre></td></tr></table></figure>

<p>以后操作的时候还是要多看看官方文档, 文档说的很清楚…</p>
<blockquote>
<p><a href="https://docs.gitlab.com/ee/raketasks/backup_restore.html">https://docs.gitlab.com/ee/raketasks/backup_restore.html</a></p>
</blockquote>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">When <span class="keyword">the</span> secrets <span class="built_in">file</span> is lost</span><br><span class="line">If you didn’t back up <span class="keyword">the</span> secrets <span class="built_in">file</span>, you must complete several steps <span class="built_in">to</span> <span class="built_in">get</span> GitLab working properly again.</span><br><span class="line"></span><br><span class="line">The secrets <span class="built_in">file</span> is responsible <span class="keyword">for</span> storing <span class="keyword">the</span> encryption key <span class="keyword">for</span> <span class="keyword">the</span> columns that contain required, sensitive information. If <span class="keyword">the</span> key is lost, GitLab can’t <span class="built_in">decrypt</span> those columns, preventing access <span class="built_in">to</span> <span class="keyword">the</span> following <span class="keyword">items</span>:</span><br><span class="line"></span><br><span class="line">CI/CD variables</span><br><span class="line">Kubernetes / GCP integration</span><br><span class="line">Custom Pages domains</span><br><span class="line">Project error tracking</span><br><span class="line">Runner authentication</span><br><span class="line">Project mirroring</span><br><span class="line">Web hooks</span><br><span class="line">In cases like CI/CD variables <span class="keyword">and</span> runner authentication, you can experience unexpected behaviors, such <span class="keyword">as</span>:</span><br><span class="line"></span><br><span class="line">Stuck jobs.</span><br><span class="line"><span class="number">500</span> errors.</span><br></pre></td></tr></table></figure>

<h2 id="Whoops-GitLab-is-currently-unavailable"><a href="#Whoops-GitLab-is-currently-unavailable" class="headerlink" title="Whoops, GitLab is currently unavailable."></a>Whoops, GitLab is currently unavailable.</h2><p>可以正常查看项目列表, 但是无法进入项目, 错误提示</p>
<figure class="highlight mercury"><table><tr><td class="code"><pre><span class="line">Whoops, GitLab <span class="keyword">is</span> currently unavailable.</span><br></pre></td></tr></table></figure>

<p>项目基于docker容器部署, 首先查看日志, 发现一条错误, 权限拒绝.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;error&quot;</span><span class="punctuation">:</span><span class="string">&quot;open /var/opt/gitlab/gitaly/gitaly.pid: permission denied&quot;</span><span class="punctuation">,</span><span class="attr">&quot;level&quot;</span><span class="punctuation">:</span><span class="string">&quot;fatal&quot;</span><span class="punctuation">,</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;find gitaly&quot;</span><span class="punctuation">,</span><span class="attr">&quot;time&quot;</span><span class="punctuation">:</span><span class="string">&quot;2021-05-05T18:05:26Z&quot;</span><span class="punctuation">,</span><span class="attr">&quot;wrapper&quot;</span><span class="punctuation">:</span><span class="number">3514</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>google 发现, 这个文件在 docker 容器里的权限应该是 git:git</p>
<p>但是我进入容器后发现该文件的权限为 root:root</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">-rw-r--r--<span class="number"> 1 </span>root root  <span class="number"> 63 </span>May <span class="number"> 5 </span>16:51 RUBY_VERSION</span><br><span class="line">-rw-r--r--<span class="number"> 1 </span>root root  <span class="number"> 23 </span>May <span class="number"> 5 </span>17:56 VERSION</span><br><span class="line">-rw-r-----<span class="number"> 1 </span>root git  <span class="number"> 819 </span>May <span class="number"> 5 </span>17:56 config.toml</span><br><span class="line">-rw-------<span class="number"> 1 </span>root root   <span class="number"> 3 </span>Mar <span class="number"> 8 </span>18:57 gitaly.pid</span><br><span class="line">srwxr-xr-x<span class="number"> 1 </span>root root   <span class="number"> 0 </span>Mar <span class="number"> 8 </span>18:57 gitaly.socket</span><br><span class="line">drwx------<span class="number"> 2 </span>git  root<span class="number"> 4096 </span>Mar <span class="number"> 8 </span>18:57 internal_sockets</span><br></pre></td></tr></table></figure>

<p>修改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> git:git gitaly.pid</span><br></pre></td></tr></table></figure>

<h2 id="Errno-EEXIST-File-exists-dir-s-mkdir-var-opt-gitlab-backups-repositories"><a href="#Errno-EEXIST-File-exists-dir-s-mkdir-var-opt-gitlab-backups-repositories" class="headerlink" title="Errno::EEXIST: File exists @ dir_s_mkdir - /var/opt/gitlab/backups/repositories"></a>Errno::EEXIST: File exists @ dir_s_mkdir - /var/opt/gitlab/backups/repositories</h2><p>备份的时候出现这个问题, 十有八九是权限问题.</p>
<p>直接 </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chmod</span> -R <span class="number">777</span> bakcups</span><br></pre></td></tr></table></figure>

<p>参考连接</p>
<blockquote>
<p><a href="https://forum.gitlab.com/t/local-gitlab-is-not-longer-working/29319/19">https://forum.gitlab.com/t/local-gitlab-is-not-longer-working/29319/19</a><br><a href="https://docs.gitlab.com/ee/raketasks/backup_restore.html">https://docs.gitlab.com/ee/raketasks/backup_restore.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab本地自动定时备份</title>
    <url>/2021/05/06/gitlab%E6%9C%AC%E5%9C%B0%E8%87%AA%E5%8A%A8%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<p>项目基于 docker 搭建.</p>
<p>编辑 gitlab.rb 文件</p>
<p>该文件在容器里的路径为</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/gi</span>tlab/gitlab.rb</span><br></pre></td></tr></table></figure>

<p>编辑一下内容</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">gitlab_rails[<span class="string">&#x27;manage_backup_path&#x27;</span>] = <span class="literal">true</span></span><br><span class="line"><span class="meta"># gitlab备份目录</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_path&#x27;</span>] = <span class="string">&quot;/var/opt/gitlab/backups&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 生成的备份文件权限</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_archive_permissions&#x27;</span>] = <span class="number">0644</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 备份保留天数，秒计算, 86400 * 7 = 604800 保留 7 天</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_keep_time&#x27;</span>] = <span class="number">604800</span></span><br></pre></td></tr></table></figure>

<p>更新 gitlab 配置</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gitlab-ctl reconfigure</span></span><br></pre></td></tr></table></figure>

<p>使用 crontab 添加定时任务</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">crontab -e</span></span><br></pre></td></tr></table></figure>

<p>添加配置, 每天 0 点备份</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">0</span> * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure>

<p>查看备份文件, 备份目录在容器里的路径</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/var/</span>opt<span class="regexp">/gitlab/</span>backups</span><br></pre></td></tr></table></figure>

<p>查看</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/var/</span>opt<span class="regexp">/gitlab/</span>backups</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>


<p>参考链接</p>
<blockquote>
<p><a href="https://blog.csdn.net/rdp1305442102/article/details/105768441">https://blog.csdn.net/rdp1305442102/article/details/105768441</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署项目报错解决：The mode argument must be integer(无需node降版本)</title>
    <url>/2022/02/21/hexo%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%EF%BC%9AThe-mode-argument-must-be-integer-%E6%97%A0%E9%9C%80node%E9%99%8D%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">FATAL</span> <span class="variable">Something</span><span class="operator">&#x27;</span><span class="variable">s</span> <span class="variable">wrong</span><span class="operator">.</span> <span class="variable">Maybe</span> <span class="variable">you</span> <span class="variable">can</span> <span class="variable">find</span> <span class="variable">the</span> <span class="variable">solution</span> <span class="variable">here</span><span class="operator">:</span> <span class="variable">https</span><span class="operator">://</span><span class="variable">hexo</span><span class="operator">.</span><span class="variable">io</span><span class="operator">/</span><span class="variable">docs</span><span class="operator">/</span><span class="variable">troubleshooting</span><span class="operator">.</span><span class="variable">html</span></span><br><span class="line"><span class="variable">TypeError</span> <span class="punctuation">[</span><span class="type">ERR_INVALID</span><span class="type">_ARG</span><span class="type">_TYPE</span><span class="punctuation">]</span><span class="operator">:</span> <span class="variable">The</span> <span class="string">&quot;mode&quot;</span> <span class="variable">argument</span> <span class="variable">must</span> <span class="variable">be</span> <span class="variable">integer</span><span class="operator">.</span> <span class="variable">Received</span> <span class="variable">an</span> <span class="variable">instance</span> <span class="variable">of</span> <span class="variable">Object</span></span><br><span class="line">    <span class="variable">at</span> <span class="variable">copyFile</span> <span class="punctuation">(</span><span class="variable">fs</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">1890</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">)</span></span><br><span class="line">    <span class="variable">at</span> <span class="variable">tryCatcher</span> <span class="punctuation">(</span><span class="built_in">C</span><span class="operator">:</span>\<span class="variable">Users</span>\<span class="variable">Administrator</span>\<span class="variable">blog</span>\<span class="type">node_modules</span>\<span class="variable">bluebird</span>\<span class="variable">js</span>\<span class="variable">release</span>\<span class="variable">util</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">16</span><span class="operator">:</span><span class="number">23</span><span class="punctuation">)</span></span><br><span class="line">    <span class="variable">at</span> <span class="variable">ret</span> <span class="punctuation">(</span><span class="variable">eval</span> <span class="variable">at</span> <span class="variable">makeNodePromisifiedEval</span> <span class="punctuation">(</span><span class="built_in">C</span><span class="operator">:</span>\<span class="variable">Users</span>\<span class="variable">Administrator</span>\<span class="variable">blog</span>\<span class="type">node_modules</span>\<span class="variable">bluebird</span>\<span class="variable">js</span>\<span class="variable">release</span>\<span class="variable">promisify</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">184</span><span class="operator">:</span><span class="number">12</span><span class="punctuation">)</span><span class="operator">,</span> <span class="operator">&lt;</span><span class="variable">anonymous</span><span class="operator">&gt;:</span><span class="number">13</span><span class="operator">:</span><span class="number">39</span><span class="punctuation">)</span></span><br><span class="line">    <span class="variable">at</span> <span class="built_in">C</span><span class="operator">:</span>\<span class="variable">Users</span>\<span class="variable">Administrator</span>\<span class="variable">blog</span>\<span class="type">node_modules</span>\<span class="variable">hexo</span><span class="operator">-</span><span class="variable">deployer</span><span class="operator">-</span><span class="variable">git</span>\<span class="type">node_modules</span>\<span class="variable">hexo</span><span class="operator">-</span><span class="variable">fs</span>\<span class="variable">lib</span>\<span class="variable">fs</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">144</span><span class="operator">:</span><span class="number">39</span></span><br><span class="line">    <span class="variable">at</span> <span class="variable">tryCatcher</span> <span class="punctuation">(</span><span class="built_in">C</span><span class="operator">:</span>\<span class="variable">Users</span>\<span class="variable">Administrator</span>\<span class="variable">blog</span>\<span class="type">node_modules</span>\<span class="variable">bluebird</span>\<span class="variable">js</span>\<span class="variable">release</span>\<span class="variable">util</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">16</span><span class="operator">:</span><span class="number">23</span><span class="punctuation">)</span></span><br><span class="line">    <span class="variable">at</span> <span class="variable">Promise</span><span class="operator">._</span><span class="variable">settlePromiseFromHandler</span> <span class="punctuation">(</span><span class="built_in">C</span><span class="operator">:</span>\<span class="variable">Users</span>\<span class="variable">Administrator</span>\<span class="variable">blog</span>\<span class="type">node_modules</span>\<span class="variable">bluebird</span>\<span class="variable">js</span>\<span class="variable">release</span>\<span class="variable">promise</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">517</span><span class="operator">:</span><span class="number">31</span><span class="punctuation">)</span></span><br><span class="line">    <span class="variable">at</span> <span class="variable">Promise</span><span class="operator">._</span><span class="variable">settlePromise</span> <span class="punctuation">(</span><span class="built_in">C</span><span class="operator">:</span>\<span class="variable">Users</span>\<span class="variable">Administrator</span>\<span class="variable">blog</span>\<span class="type">node_modules</span>\<span class="variable">bluebird</span>\<span class="variable">js</span>\<span class="variable">release</span>\<span class="variable">promise</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">574</span><span class="operator">:</span><span class="number">18</span><span class="punctuation">)</span></span><br><span class="line">    <span class="variable">at</span> <span class="variable">Promise</span><span class="operator">._</span><span class="variable">settlePromise0</span> <span class="punctuation">(</span><span class="built_in">C</span><span class="operator">:</span>\<span class="variable">Users</span>\<span class="variable">Administrator</span>\<span class="variable">blog</span>\<span class="type">node_modules</span>\<span class="variable">bluebird</span>\<span class="variable">js</span>\<span class="variable">release</span>\<span class="variable">promise</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">619</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">)</span></span><br><span class="line">    <span class="variable">at</span> <span class="variable">Promise</span><span class="operator">._</span><span class="variable">settlePromises</span> <span class="punctuation">(</span><span class="built_in">C</span><span class="operator">:</span>\<span class="variable">Users</span>\<span class="variable">Administrator</span>\<span class="variable">blog</span>\<span class="type">node_modules</span>\<span class="variable">bluebird</span>\<span class="variable">js</span>\<span class="variable">release</span>\<span class="variable">promise</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">699</span><span class="operator">:</span><span class="number">18</span><span class="punctuation">)</span></span><br><span class="line">    <span class="variable">at</span> <span class="variable">Promise</span><span class="operator">._</span><span class="variable">fulfill</span> <span class="punctuation">(</span><span class="built_in">C</span><span class="operator">:</span>\<span class="variable">Users</span>\<span class="variable">Administrator</span>\<span class="variable">blog</span>\<span class="type">node_modules</span>\<span class="variable">bluebird</span>\<span class="variable">js</span>\<span class="variable">release</span>\<span class="variable">promise</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">643</span><span class="operator">:</span><span class="number">18</span><span class="punctuation">)</span></span><br><span class="line">    <span class="variable">at</span> <span class="variable">Promise</span><span class="operator">._</span><span class="variable">resolveCallback</span> <span class="punctuation">(</span><span class="built_in">C</span><span class="operator">:</span>\<span class="variable">Users</span>\<span class="variable">Administrator</span>\<span class="variable">blog</span>\<span class="type">node_modules</span>\<span class="variable">bluebird</span>\<span class="variable">js</span>\<span class="variable">release</span>\<span class="variable">promise</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">437</span><span class="operator">:</span><span class="number">57</span><span class="punctuation">)</span></span><br><span class="line">    <span class="variable">at</span> <span class="variable">Promise</span><span class="operator">._</span><span class="variable">settlePromiseFromHandler</span> <span class="punctuation">(</span><span class="built_in">C</span><span class="operator">:</span>\<span class="variable">Users</span>\<span class="variable">Administrator</span>\<span class="variable">blog</span>\<span class="type">node_modules</span>\<span class="variable">bluebird</span>\<span class="variable">js</span>\<span class="variable">release</span>\<span class="variable">promise</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">529</span><span class="operator">:</span><span class="number">17</span><span class="punctuation">)</span></span><br><span class="line">    <span class="variable">at</span> <span class="variable">Promise</span><span class="operator">._</span><span class="variable">settlePromise</span> <span class="punctuation">(</span><span class="built_in">C</span><span class="operator">:</span>\<span class="variable">Users</span>\<span class="variable">Administrator</span>\<span class="variable">blog</span>\<span class="type">node_modules</span>\<span class="variable">bluebird</span>\<span class="variable">js</span>\<span class="variable">release</span>\<span class="variable">promise</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">574</span><span class="operator">:</span><span class="number">18</span><span class="punctuation">)</span></span><br><span class="line">    <span class="variable">at</span> <span class="variable">Promise</span><span class="operator">._</span><span class="variable">settlePromise0</span> <span class="punctuation">(</span><span class="built_in">C</span><span class="operator">:</span>\<span class="variable">Users</span>\<span class="variable">Administrator</span>\<span class="variable">blog</span>\<span class="type">node_modules</span>\<span class="variable">bluebird</span>\<span class="variable">js</span>\<span class="variable">release</span>\<span class="variable">promise</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">619</span><span class="operator">:</span><span class="number">10</span><span class="punctuation">)</span></span><br><span class="line">    <span class="variable">at</span> <span class="variable">Promise</span><span class="operator">._</span><span class="variable">settlePromises</span> <span class="punctuation">(</span><span class="built_in">C</span><span class="operator">:</span>\<span class="variable">Users</span>\<span class="variable">Administrator</span>\<span class="variable">blog</span>\<span class="type">node_modules</span>\<span class="variable">bluebird</span>\<span class="variable">js</span>\<span class="variable">release</span>\<span class="variable">promise</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">699</span><span class="operator">:</span><span class="number">18</span><span class="punctuation">)</span></span><br><span class="line">    <span class="variable">at</span> <span class="variable">Promise</span><span class="operator">._</span><span class="variable">fulfill</span> <span class="punctuation">(</span><span class="built_in">C</span><span class="operator">:</span>\<span class="variable">Users</span>\<span class="variable">Administrator</span>\<span class="variable">blog</span>\<span class="type">node_modules</span>\<span class="variable">bluebird</span>\<span class="variable">js</span>\<span class="variable">release</span>\<span class="variable">promise</span><span class="operator">.</span><span class="variable">js</span><span class="operator">:</span><span class="number">643</span><span class="operator">:</span><span class="number">18</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>
<p>解决办法是修改<code>package.json</code>文件，升级<code>hexo-renderer-stylus</code>到<code>2.0.0</code>版本</p>
<p>参考链接</p>
<blockquote>
<p><a href="https://evestorm.github.io/posts/430/">https://evestorm.github.io/posts/430/</a></p>
<p><a href="https://www.4spaces.org/hexo-mode-argument-must-be-integer-error/">https://www.4spaces.org/hexo-mode-argument-must-be-integer-error/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>linux shell 中判断字符串为空的正确方法</title>
    <url>/2021/05/06/linux-shell-%E4%B8%AD%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%BA%E7%A9%BA%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="正确的做法"><a href="#正确的做法" class="headerlink" title="正确的做法"></a>正确的做法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">STRING=</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$STRING</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;STRING is empty&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$STRING</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;STRING is not empty&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>输出正确的结果:</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">root<span class="symbol">@james</span>-desktop:~<span class="meta"># ./zerostring.sh</span></span><br><span class="line"><span class="built_in">STRING</span> is empty</span><br></pre></td></tr></table></figure>

<h2 id="错误的做法"><a href="#错误的做法" class="headerlink" title="错误的做法"></a>错误的做法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">STRING=</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$STRING</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;STRING is empty&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$STRING</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;STRING is not empty&quot;</span></span><br><span class="line"><span class="keyword">fi</span> </span><br></pre></td></tr></table></figure>
<p>输出错误结果：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">root@james-desktop:~# ./zerostring.<span class="keyword">sh</span></span><br><span class="line">STRING <span class="keyword">is</span> <span class="built_in">empty</span></span><br><span class="line">STRING <span class="keyword">is</span> not <span class="built_in">empty</span></span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>记得在给变量加上双引号””</p>
<p>参考链接</p>
<blockquote>
<p><a href="https://www.cnblogs.com/cute/archive/2011/08/26/2154137.html">https://www.cnblogs.com/cute/archive/2011/08/26/2154137.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>npm install --save core-js/modules/es.error.cause.js 报错</title>
    <url>/2022/04/04/npm-install-save-core-js-modules-es-error-cause-js-%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>在启动项目时，出现 npm install –save core-js/modules/es.error.cause.js 的错误</p>
<p>解决方案</p>
<p>先删除 <code>node_modules</code> 依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">rm</span> -rf node_modules </span><br></pre></td></tr></table></figure>

<p>首先安装 <code>报错的插件</code></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install <span class="comment">--save core-js</span></span><br></pre></td></tr></table></figure>

<p>最后再 <code>npm install</code> 或者 <code>yarn install</code></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> </span><br><span class="line">yarn <span class="keyword">install</span></span><br></pre></td></tr></table></figure>

<p>最后 <code>npm run dev</code> 运行启动</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">run</span> dev</span><br></pre></td></tr></table></figure>

<p>转载</p>
<blockquote>
<p><a href="https://blog.csdn.net/Missbelover/article/details/123221351">https://blog.csdn.net/Missbelover/article/details/123221351</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>opentracker搭建自己的BT Tracker服务器</title>
    <url>/2020/12/24/opentracker%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84BT-Tracker%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>生命不息，折腾不止。在老家布置了一台服务器用于家庭影音中心，现在在新家，与老家相隔3000多公里，但是新家的服务器因为新装一无所有。此时此刻，突发奇想，我怎么能把老家的服务器里下载好的资源同步到新家的服务器上？</p>
<p>解决方案：</p>
<ul>
<li><ol>
<li><del>把老家服务器搬过来</del></li>
</ol>
</li>
<li><ol start="2">
<li>从新家访问老家的NAS，然后通过HTTP下载</li>
</ol>
</li>
<li><ol start="3">
<li>自己写个同步程序部署在两台服务器上</li>
</ol>
</li>
<li><ol start="4">
<li>或许可以用BT下载的方式从老家下载过来</li>
</ol>
</li>
</ul>
<p>方案1直接pass。</p>
<p>方案2虽然也可以，但是群晖的连接好像直接复制到Aria2里下载不了，我可忍受不了下载一部50G的电影用浏览器自带的下载工具，而且还没有进度提示</p>
<p>方案3，emmmm……等有空再说</p>
<p>方案4，自己假设一台BT Trakcer服务器，然后做个种子下载，目前能想到的一个最佳方案</p>
<p>查阅相关资料，看看有没有现成的工具可以使用。</p>
<p>Searching …</p>
<p>！！！可以使用 <strong>OpenTracker</strong> 这个现成的工具来搭建。</p>
<p>那么问题来了，为了不搞乱服务器的环境，有没有现成的Docker镜像？</p>
<p>Continue searching …</p>
<p>在笔者孜孜不倦的努力下，真的发现了有人已经做好了镜像。</p>
<p>直接拉取镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull lednerb/opentracker-docker</span><br></pre></td></tr></table></figure>

<p>那么接下来如何启动一个容器？，我推荐<code>docker-compose</code></p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">version</span><span class="punctuation">:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attribute">services</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">opentracker</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">lednerb/opentracker-docker</span></span><br><span class="line">        <span class="attribute">restart</span><span class="punctuation">:</span> <span class="string">unless-stopped</span></span><br><span class="line">        <span class="attribute">ports</span><span class="punctuation">:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">6969:6969</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">6969:6969/udp</span></span><br></pre></td></tr></table></figure>

<p>当然你也可以直接</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -dit --name opentracker -p <span class="number">6969</span>:<span class="number">6969</span>/udp -p <span class="number">6969</span>:<span class="number">6969</span> lednerb/opentracker-docker</span><br></pre></td></tr></table></figure>

<p>好了。大功告成。</p>
<p>那么我怎么知道它运行了没有，怎么查看状态？</p>
<p>举个栗子，比如我假设在了<code>yourhostname.com</code>这台主机上，那么访问</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">http://yourhostname.com:<span class="number">6969</span>/<span class="keyword">state</span></span><br></pre></td></tr></table></figure>

<p>或者访问更详细的内容</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">http://yourhostname.com:<span class="number">6969</span>/<span class="keyword">state</span>?mode=everything</span><br></pre></td></tr></table></figure>

<p>即可看到这家伙有没有在认真工作咯！</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20201224220240.png" alt="20201224220240"></p>
<p>emmmmm…..刚搭建好，还没传种子。</p>
<p>我们创建一个种子，传上去试试看。</p>
<p>创建种子的时候Tracker服务器填：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//y</span>ourhostname.com:<span class="number">6969</span>/announce</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">udp:<span class="regexp">//y</span>ourhostname.com:<span class="number">6969</span>/announce</span><br></pre></td></tr></table></figure>

<p>在Transmission里看一下。。。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20201224221255.png" alt="20201224221255"></p>
<p>一切OK。。。</p>
<p>到后台看一下</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20201224221518.png" alt="20201224221518"></p>
<p>一切OK。。。可以看到已经增加了一个种子。</p>
<p>下载试试看。。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20201224222117.png" alt="20201224222117"></p>
<p>OK。。。已经出现一个peer了！</p>
<p>接下来就像下载BT一样，不过并不会有更多的peer出现，因为只有我自己在做种自己在下。。。</p>
<blockquote>
<p><a href="https://hub.docker.com/r/lednerb/opentracker-docker/">https://hub.docker.com/r/lednerb/opentracker-docker/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>BT Tracker</tag>
      </tags>
  </entry>
  <entry>
    <title>shell用ssh在远程主机执行命令时如何退出</title>
    <url>/2021/05/06/shell%E7%94%A8ssh%E5%9C%A8%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E6%97%B6%E5%A6%82%E4%BD%95%E9%80%80%E5%87%BA/</url>
    <content><![CDATA[<p>在 shell 脚本里使用 ssh 在远程主机执行脚本时无法关闭连接</p>
<p>例如</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> user<span class="variable">@ipaddress</span> <span class="string">&#x27;~/my_script.sh&#x27;</span></span><br></pre></td></tr></table></figure>

<p>脚本执行完毕连接不会关闭, 需要你手动 Ctrl + C 关闭连接.</p>
<p>解决方案 </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> user<span class="variable">@ipaddress</span> <span class="string">&#x27;~/my_script.sh &amp;&amp; exit&#x27;</span></span><br></pre></td></tr></table></figure>

<p>当你在远程主机执行的脚本由本地主机推送的话</p>
<p>例如</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> user<span class="variable">@remoteNode</span> &lt; test.sh</span><br></pre></td></tr></table></figure>

<p>你可以在本地脚本里添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -SIGHUP <span class="variable">$PPID</span></span><br></pre></td></tr></table></figure>

<p>kill 掉当前的 ssh</p>
<p>但是这样会导致, 你尝试捕获 SSH 是否成功执行时, 总是得到失败的结果.</p>
<p>参考链接</p>
<blockquote>
<p><a href="https://superuser.com/questions/207453/ssh-and-shell-through-ssh-how-to-exit?noredirect=1&amp;lq=1">https://superuser.com/questions/207453/ssh-and-shell-through-ssh-how-to-exit?noredirect=1&amp;lq=1</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>vue router api.now is not a function</title>
    <url>/2022/04/15/vue-router-api-now-is-not-a-function/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>记录一次奇怪的 DEBUG 过程</p>
<p>事情的起因是我在搭建一个前端项目, 第一次打开可以, 但是如果再刷新页面则会报错.</p>
<p>仔细查看我的代码, 发现没有什么问题, 最后跟踪错误到了<code>vue-router</code></p>
<p>控制台报错</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Uncaught</span> (in promise) TypeError: api.now is not a function</span><br><span class="line">    <span class="attribute">at</span> vue-router.esm-bundler.js?v=<span class="number">44</span>d7056b:<span class="number">2545</span>:<span class="number">31</span></span><br><span class="line">    <span class="attribute">at</span> triggerAfterEach (vue-router.esm-bundler.js?v=<span class="number">44</span>d7056b:<span class="number">3166</span>:<span class="number">13</span>)</span><br><span class="line">    <span class="attribute">at</span> vue-router.esm-bundler.js?v=<span class="number">44</span>d7056b:<span class="number">3069</span>:<span class="number">13</span></span><br></pre></td></tr></table></figure>

<p>继续跟踪</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">api.<span class="title function_">addTimelineEvent</span>(&#123;</span><br><span class="line">                <span class="attr">layerId</span>: navigationsLayerId,</span><br><span class="line">                <span class="attr">event</span>: &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;End of navigation&#x27;</span>,</span><br><span class="line">                    <span class="attr">subtitle</span>: to.<span class="property">fullPath</span>,</span><br><span class="line">                    <span class="attr">time</span>: api.<span class="title function_">now</span>(), <span class="language-xml">&lt;--</span></span><br><span class="line"><span class="language-xml">                    data,</span></span><br><span class="line"><span class="language-xml">                    logType: failure ? &#x27;warning&#x27; : &#x27;default&#x27;,</span></span><br><span class="line"><span class="language-xml">                    groupId: to.meta.__navigationId,</span></span><br><span class="line"><span class="language-xml">                &#125;,</span></span><br><span class="line"><span class="language-xml">            &#125;); </span></span><br></pre></td></tr></table></figure>

<p>如果出错的地方在业务逻辑, 则可以很容易的找出错误原因, 但是这个地方报错, 让我毫无头绪.</p>
<p>Google …</p>
<p>没想到还真的找到了解决方案, 而且还就在该文章发布时间的前半个月(还热乎着…)</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>That’s from the Vue devtools plugin. And only happens if you are still on the 6.0 beta of Vue devtools.</p>
<p>Happened to me today when checking in another browser that still was on the 6.0 beta version instead of the stable one we released recently.</p>
<p>Solution: remove the beta, upgrade to the stable release</p>
<p>大意是说, 如果你开发时使用了 Vue Devtools 这个插件, 并且还是 6.0 beta 版本时, 就会发生这个问题.</p>
<p>解决方案也很简单, 卸载这个测试版, 安装稳定版</p>
<p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd">https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd</a></p>
<p>现在想想, 这个插件我一年前装的, 然后就没管过, 我不清楚它会不会自动更新, 但是确实在我意想不到的地方给我挖了个大坑….</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个事情总结出什么经验呢? </p>
<p>BUG 有时候就是发生的这么毫无逻辑…让人捉摸不定</p>
<p>参考链接</p>
<blockquote>
<p><a href="https://github.com/vuejs/router/issues/1338">https://github.com/vuejs/router/issues/1338</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>vue3 script-setup 语法糖</title>
    <url>/2022/04/11/vue3-script-setup-%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
    <content><![CDATA[<h2 id="什么是setup语法糖"><a href="#什么是setup语法糖" class="headerlink" title="什么是setup语法糖"></a>什么是setup语法糖</h2><p>起初 Vue3.0 暴露变量必须 <code>return</code> 出来，<code>template</code>中才能使用；</p>
<p>现在只需在<code>script</code>标签中添加<code>setup</code>，组件只需引入不用注册，属性和方法也不用返回，也不用写<code>setup</code>函数，也不用写<code>export default</code> ，甚至是自定义指令也可以在我们的<code>template</code>中自动获得。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:num</span>=<span class="string">&quot;num&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addNum&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./MyComponent .vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 像在平常的setup中一样的写,但是不需要返回任何变量</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> num= <span class="title function_">ref</span>(<span class="number">0</span>)       <span class="comment">//在此处定义的 num 可以直接使用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title function_">addNum</span>= (<span class="params"></span>) =&gt; &#123;   <span class="comment">//函数也可以直接引用,不用在return中返回</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    num.<span class="property">value</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="使用setup组件自动注册"><a href="#使用setup组件自动注册" class="headerlink" title="使用setup组件自动注册"></a>使用setup组件自动注册</h2><p>在 <code>script setup</code> 中，引入的组件可以直接使用，无需再通过<code>components</code>进行注册，并且无法指定当前组件的名字，它会自动以文件名为主，也就是不用再写<code>name</code>属性了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">zi-hello</span>&gt;</span><span class="tag">&lt;/<span class="name">zi-hello</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> ziHello <span class="keyword">from</span> <span class="string">&#x27;./ziHello&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="使用setup后新增API"><a href="#使用setup后新增API" class="headerlink" title="使用setup后新增API"></a>使用setup后新增API</h2><p>因为没有了<code>setup</code>函数，那么<code>props</code>，<code>emit</code>怎么获取呢</p>
<p><code>setup script</code>语法糖提供了新的API来供我们使用</p>
<h3 id="defineProps"><a href="#defineProps" class="headerlink" title="defineProps"></a><code>defineProps</code></h3><p>用来接收父组件传来的 props。示例:</p>
<p>父组件代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;die&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">zi-hello</span> <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">zi-hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> ziHello <span class="keyword">from</span> <span class="string">&#x27;./ziHello&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;赵小磊========&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>子组件代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    我是子组件&#123;&#123;name&#125;&#125; // 赵小磊========</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123;defineProps&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="attr">name</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">type</span>:<span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">default</span>:<span class="string">&#x27;我是默认值&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="defineEmits"><a href="#defineEmits" class="headerlink" title="defineEmits"></a><code>defineEmits</code></h3><p>子组件向父组件事件传递。示例:</p>
<p>子组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    我是子组件&#123;&#123;name&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;ziupdata&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123;defineEmits&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//自定义函数，父组件可以触发</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> em=<span class="title function_">defineEmits</span>([<span class="string">&#x27;updata&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title function_">ziupdata</span>=(<span class="params"></span>)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">em</span>(<span class="string">&quot;updata&quot;</span>,<span class="string">&#x27;我是子组件的值&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>父组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;die&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">zi-hello</span> @<span class="attr">updata</span>=<span class="string">&quot;updata&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">zi-hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> ziHello <span class="keyword">from</span> <span class="string">&#x27;./ziHello&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title function_">updata</span> = (<span class="params">data</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">//我是子组件的值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="defineExpose"><a href="#defineExpose" class="headerlink" title="defineExpose"></a><code>defineExpose</code></h3><p>组件暴露出自己的属性，在父组件中可以拿到。示例:</p>
<p>子组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    我是子组件</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123;defineExpose,reactive,ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> ziage=<span class="title function_">ref</span>(<span class="number">18</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> ziname=<span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>:<span class="string">&#x27;赵小磊&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//暴露出去的变量</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">defineExpose</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ziage,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ziname</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>父组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;die&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span> @<span class="attr">click</span>=<span class="string">&quot;isclick&quot;</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">zi-hello</span> <span class="attr">ref</span>=<span class="string">&quot;zihello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">zi-hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> ziHello <span class="keyword">from</span> <span class="string">&#x27;./ziHello&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> zihello = <span class="title function_">ref</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title function_">isclick</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收ref暴漏出来的值&#x27;</span>,zihello.<span class="property">value</span>.<span class="property">ziage</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收reactive暴漏出来的值&#x27;</span>,zihello.<span class="property">value</span>.<span class="property">ziname</span>.<span class="property">name</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>参考链接</p>
<blockquote>
<p><a href="https://www.jb51.net/article/231485.htm">https://www.jb51.net/article/231485.htm</a><br><a href="https://v3.cn.vuejs.org/api/sfc-script-setup.html#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4">https://v3.cn.vuejs.org/api/sfc-script-setup.html#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>vue：Failed to resolve component:xxx</title>
    <url>/2022/04/11/vue%EF%BC%9AFailed-to-resolve-component-xxx/</url>
    <content><![CDATA[<p>vue 项目中控制台报警告</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">[Vue warn]: Failed <span class="keyword">to</span> resolve component: xxx</span><br><span class="line">If this <span class="keyword">is</span> a native custom element, make sure <span class="keyword">to</span> exclude <span class="keyword">it</span> <span class="keyword">from</span> component resolution via compilerOptions.isCustomElement. </span><br><span class="line">  <span class="keyword">at</span>...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>大概率是没有注册组件，注册即可</p>
<p>参考链接</p>
<blockquote>
<p><a href="https://blog.csdn.net/m0_51221102/article/details/120497365">https://blog.csdn.net/m0_51221102/article/details/120497365</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>使用ts-node直接运行ts脚本</title>
    <url>/2022/04/11/%E4%BD%BF%E7%94%A8ts-node%E7%9B%B4%E6%8E%A5%E8%BF%90%E8%A1%8Cts%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="常见错误解决方案"><a href="#常见错误解决方案" class="headerlink" title="常见错误解决方案"></a>常见错误解决方案</h2><h3 id="SyntaxError-Cannot-use-import-statement-outside-a-module"><a href="#SyntaxError-Cannot-use-import-statement-outside-a-module" class="headerlink" title="SyntaxError: Cannot use import statement outside a module"></a><code>SyntaxError: Cannot use import statement outside a module</code></h3><p>无法在模块外使用import</p>
<p><code>package.json</code>添加<code>&quot;type&quot;:&quot;modules&quot;</code></p>
<h3 id="TypeError-ERR-UNKNOWN-FILE-EXTENSION-Unknown-file-extension-quot-ts-quot"><a href="#TypeError-ERR-UNKNOWN-FILE-EXTENSION-Unknown-file-extension-quot-ts-quot" class="headerlink" title="TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension &quot;.ts&quot;"></a><code>TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension &quot;.ts&quot;</code></h3><p>我收到这条报错的时候，命令行命令使用的是<code>ts-node ./myscripts.ts</code>，改用以下命令时，问题解决。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">--loader</span> ts-<span class="keyword">node</span><span class="title">/esm</span> ./my-script.ts</span><br></pre></td></tr></table></figure>

<p>参考链接</p>
<blockquote>
<p><a href="https://cloud.tencent.com/developer/article/1805310">https://cloud.tencent.com/developer/article/1805310</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>使用Flask部署Keras模型并提供Restful接口</title>
    <url>/2020/04/28/%E4%BD%BF%E7%94%A8Flask%E9%83%A8%E7%BD%B2Keras%E6%A8%A1%E5%9E%8B%E5%B9%B6%E6%8F%90%E4%BE%9BRestful%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="使用Flask部署Keras模型并提供Restful接口"><a href="#使用Flask部署Keras模型并提供Restful接口" class="headerlink" title="使用Flask部署Keras模型并提供Restful接口"></a>使用Flask部署Keras模型并提供Restful接口</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我们训练好了模型后想发布出去，提供Restful风格的API供外部使用，这个时候我们可以选择任意选择一款Web框架进行发布。我之前使用过Django，但是感觉有些繁琐，所以我更倾向于使用Flask这个框架，因为这个框架的路由标注方式跟Java的Springboot非常相似。接下来我们用之前训练的识别12306验证码的模型来进行部署。</p>
<span id="more"></span>

<h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>在Pycharm里新建一个Flask项目</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428183550.png" alt="20200428183550"></p>
<ul>
<li>新建一个controller包，在里面再新建三个子包，charset，models，utils，分别保存字符集，模型和工具类</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428185938.png" alt="20200428185938"></p>
<ul>
<li>在charset包里新建Label.py模块，内容为训练模型时候的字符集。</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428190142.png" alt="20200428190142"></p>
<ul>
<li>复制训练好的模型到models包底下</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428190306.png" alt="20200428190306"></p>
<h2 id="创建工具模块"><a href="#创建工具模块" class="headerlink" title="创建工具模块"></a>创建工具模块</h2><ul>
<li>我们在utils包底下新建几个工具模块</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428190427.png" alt="20200428190427"></p>
<ul>
<li><p>Base64.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base64</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">convertToBytes</span>(<span class="params">cls, imageBase64: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">return</span> base64.b64decode(imageBase64)</span><br></pre></td></tr></table></figure>
</li>
<li><p>ConvertFormat.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConvertFormat</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">convertImageToArrayByChannel</span>(<span class="params">cls, image, channel: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        input image (PIL) object convert to array by channel</span></span><br><span class="line"><span class="string">        :param image: image obj</span></span><br><span class="line"><span class="string">        :return:      numpy array obj</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> channel == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> np.array(image.convert(<span class="string">&quot;RGB&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> channel == <span class="number">1</span>:</span><br><span class="line">            imageArray = np.array(image.convert(<span class="string">&quot;L&quot;</span>))</span><br><span class="line">            imageArray = np.expand_dims(imageArray, axis=<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> imageArray</span><br><span class="line">        <span class="keyword">return</span> np.array(image.convert(<span class="string">&quot;RGB&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">convertImageFormat</span>(<span class="params">cls, image, <span class="built_in">format</span>=<span class="string">&quot;PNG&quot;</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        input image obj, convert to png format</span></span><br><span class="line"><span class="string">        :param image: image obj</span></span><br><span class="line"><span class="string">        :return:      image obj</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> image <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;image object is none.&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> BytesIO() <span class="keyword">as</span> imageIO:</span><br><span class="line">            image.save(imageIO, <span class="built_in">format</span>=<span class="built_in">format</span>)</span><br><span class="line">            imageByte = imageIO.getvalue()</span><br><span class="line">        <span class="keyword">return</span> Image.<span class="built_in">open</span>(BytesIO(imageByte))</span><br></pre></td></tr></table></figure>
</li>
<li><p>HashUtils.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashUtils</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">string: <span class="built_in">str</span></span>):</span><br><span class="line">        md5 = hashlib.md5(string.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> md5.hexdigest()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sha1</span>(<span class="params">string: <span class="built_in">str</span></span>):</span><br><span class="line">        sha1 = hashlib.sha1(string.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> sha1.hexdigest()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sha256</span>(<span class="params">string: <span class="built_in">str</span></span>):</span><br><span class="line">        sha256 = hashlib.sha256(string.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> sha256.hexdigest()</span><br></pre></td></tr></table></figure>
</li>
<li><p>ResquestUtils.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> controller.utils <span class="keyword">import</span> ResponseUtils</span><br><span class="line"><span class="keyword">from</span> constants <span class="keyword">import</span> ResponseStatus</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> exception <span class="keyword">import</span> RequestDataFormatException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RequestUtils</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkPostDataIsJson</span>(<span class="params">req: request</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;check post data is json</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        check post data if is json type, otherwise</span></span><br><span class="line"><span class="string">        return invalid exception.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            req: flask request object</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> req.json:</span><br><span class="line">            <span class="keyword">raise</span> RequestDataFormatException(</span><br><span class="line">                ResponseStatus.FAILED,</span><br><span class="line">                <span class="string">&quot;data invalid, not json.&quot;</span>,</span><br><span class="line">                <span class="number">400</span></span><br><span class="line">            )</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteNoneAttributes</span>(<span class="params">obj: <span class="built_in">any</span></span>) -&gt; <span class="built_in">any</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;delete attribute is none from instance</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            obj: instance</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: instance</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">        attributeNames = obj.__dict__.keys()</span><br><span class="line">        <span class="keyword">for</span> attributeName <span class="keyword">in</span> <span class="built_in">list</span>(attributeNames):</span><br><span class="line">            attribute = <span class="built_in">getattr</span>(obj, attributeName)</span><br><span class="line">            <span class="keyword">if</span> attribute <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">delattr</span>(obj, attributeName)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>ResponseUtils.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request, make_response</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResponseUtils</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">responseJson</span>(<span class="params">obj: <span class="built_in">object</span>, headers: <span class="built_in">dict</span>=<span class="literal">None</span></span>) -&gt; <span class="built_in">any</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;convert obj to response object</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        the method encapsulation the object to flask response</span></span><br><span class="line"><span class="string">        object and set content type is json.</span></span><br><span class="line"><span class="string">        you still can custom headers.</span></span><br><span class="line"><span class="string">        the method need input obj rewrite __str__ method,</span></span><br><span class="line"><span class="string">        __str__ method return a json string</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Examples:</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;status&quot;: &quot;...&quot;,</span></span><br><span class="line"><span class="string">                ...</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            obj: any object</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: flask response object</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        response = make_response(<span class="built_in">str</span>(obj))</span><br><span class="line">        response.headers[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&quot;application/json&quot;</span></span><br><span class="line">        <span class="keyword">if</span> headers:</span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> headers.items():</span><br><span class="line">                response.headers[<span class="built_in">str</span>(k)] = v</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
<h2 id="创建控制层模块"><a href="#创建控制层模块" class="headerlink" title="创建控制层模块"></a>创建控制层模块</h2></li>
<li><p>我们在controller包里面新建我们的控制层模块</p>
</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428190944.png" alt="20200428190944"></p>
<ul>
<li><p>CutCaptcha.py 用于切割原始验证码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> entities <span class="keyword">import</span> ResultCutCaptcha</span><br><span class="line"><span class="keyword">from</span> controller.utils <span class="keyword">import</span> Base64</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CutCaptcha</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_imageToBytes</span>(<span class="params">cls, image: Image</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        imageIO = BytesIO()</span><br><span class="line">        image.save(imageIO, <span class="built_in">format</span>=<span class="string">&quot;PNG&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> imageIO.getvalue()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_cutLabel</span>(<span class="params">cls, imageByte: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;return Image object&quot;&quot;&quot;</span></span><br><span class="line">        label = Image.<span class="built_in">open</span>(BytesIO(imageByte)).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        x = <span class="number">117</span></span><br><span class="line">        y = <span class="number">0</span></span><br><span class="line">        w = <span class="number">180</span></span><br><span class="line">        h = <span class="number">30</span></span><br><span class="line">        label = label.crop((x, y, w, h))</span><br><span class="line">        <span class="keyword">return</span> cls._imageToBytes(label)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_cutImage</span>(<span class="params">cls, imageByte: <span class="built_in">bytes</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">bytes</span>, <span class="built_in">bytes</span>, <span class="built_in">bytes</span>, <span class="built_in">bytes</span>, <span class="built_in">bytes</span>, <span class="built_in">bytes</span>, <span class="built_in">bytes</span>, <span class="built_in">bytes</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;return Image object tuple&quot;&quot;&quot;</span></span><br><span class="line">        image = Image.<span class="built_in">open</span>(BytesIO(imageByte)).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        space = <span class="number">67</span> + <span class="number">5</span></span><br><span class="line">        x0, y0, w0, h0 = <span class="number">0</span> * space + <span class="number">5</span>, <span class="number">0</span> * space + <span class="number">41</span>, <span class="number">1</span> * space, <span class="number">0</span> * space + <span class="number">41</span> + <span class="number">67</span></span><br><span class="line">        x1, y1, w1, h1 = <span class="number">0</span> * space + <span class="number">5</span>, <span class="number">1</span> * space + <span class="number">41</span>, <span class="number">1</span> * space, <span class="number">1</span> * space + <span class="number">41</span> + <span class="number">67</span></span><br><span class="line">        x2, y2, w2, h2 = <span class="number">1</span> * space + <span class="number">5</span>, <span class="number">0</span> * space + <span class="number">41</span>, <span class="number">2</span> * space, <span class="number">0</span> * space + <span class="number">41</span> + <span class="number">67</span></span><br><span class="line">        x3, y3, w3, h3 = <span class="number">1</span> * space + <span class="number">5</span>, <span class="number">1</span> * space + <span class="number">41</span>, <span class="number">2</span> * space, <span class="number">1</span> * space + <span class="number">41</span> + <span class="number">67</span></span><br><span class="line">        x4, y4, w4, h4 = <span class="number">2</span> * space + <span class="number">5</span>, <span class="number">0</span> * space + <span class="number">41</span>, <span class="number">3</span> * space, <span class="number">0</span> * space + <span class="number">41</span> + <span class="number">67</span></span><br><span class="line">        x5, y5, w5, h5 = <span class="number">2</span> * space + <span class="number">5</span>, <span class="number">1</span> * space + <span class="number">41</span>, <span class="number">3</span> * space, <span class="number">1</span> * space + <span class="number">41</span> + <span class="number">67</span></span><br><span class="line">        x6, y6, w6, h6 = <span class="number">3</span> * space + <span class="number">5</span>, <span class="number">0</span> * space + <span class="number">41</span>, <span class="number">4</span> * space, <span class="number">0</span> * space + <span class="number">41</span> + <span class="number">67</span></span><br><span class="line">        x7, y7, w7, h7 = <span class="number">3</span> * space + <span class="number">5</span>, <span class="number">1</span> * space + <span class="number">41</span>, <span class="number">4</span> * space, <span class="number">1</span> * space + <span class="number">41</span> + <span class="number">67</span></span><br><span class="line">        image0 = image.crop((x0, y0, w0, h0))</span><br><span class="line">        image1 = image.crop((x1, y1, w1, h1))</span><br><span class="line">        image2 = image.crop((x2, y2, w2, h2))</span><br><span class="line">        image3 = image.crop((x3, y3, w3, h3))</span><br><span class="line">        image4 = image.crop((x4, y4, w4, h4))</span><br><span class="line">        image5 = image.crop((x5, y5, w5, h5))</span><br><span class="line">        image6 = image.crop((x6, y6, w6, h6))</span><br><span class="line">        image7 = image.crop((x7, y7, w7, h7))</span><br><span class="line">        <span class="keyword">return</span> (cls._imageToBytes(image0),</span><br><span class="line">                cls._imageToBytes(image1),</span><br><span class="line">                cls._imageToBytes(image2),</span><br><span class="line">                cls._imageToBytes(image3),</span><br><span class="line">                cls._imageToBytes(image4),</span><br><span class="line">                cls._imageToBytes(image5),</span><br><span class="line">                cls._imageToBytes(image6),</span><br><span class="line">                cls._imageToBytes(image7))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">cls, imageByte: <span class="built_in">bytes</span></span>) -&gt; ResultCutCaptcha:</span><br><span class="line">        <span class="keyword">return</span> ResultCutCaptcha(</span><br><span class="line">            label=cls._cutLabel(imageByte),</span><br><span class="line">            images=cls._cutImage(imageByte)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>
</li>
<li><p>DrawMarkedResult.py 用于绘制标记结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> constants <span class="keyword">import</span> IMAGE_POSITION_COORDINATES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DrawMarkedResult</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_sumCenterPoint</span>(<span class="params">cls, a: <span class="built_in">tuple</span>, b: <span class="built_in">tuple</span></span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        x = <span class="built_in">int</span>((b[<span class="number">0</span>] - a[<span class="number">0</span>]) // <span class="number">2</span> + a[<span class="number">0</span>])</span><br><span class="line">        y = <span class="built_in">int</span>((b[<span class="number">1</span>] - a[<span class="number">1</span>]) // <span class="number">2</span> + a[<span class="number">1</span>])</span><br><span class="line">        <span class="comment"># +30 补偿y轴距离</span></span><br><span class="line">        <span class="keyword">return</span> (x, y + <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_imageToBytes</span>(<span class="params">cls, image: Image</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        imageIO = BytesIO()</span><br><span class="line">        image.save(imageIO, <span class="built_in">format</span>=<span class="string">&quot;JPEG&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> imageIO.getvalue()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkmark</span>(<span class="params">cls, imageByte: <span class="built_in">bytes</span>, ids: <span class="built_in">list</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;draw marked result at origin image&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># imageArray = np.asarray(Image.open(BytesIO(imageByte)), dtype=&quot;uint8&quot;)</span></span><br><span class="line">        <span class="comment"># image = cv2.imdecode(imageArray, cv2.IMREAD_UNCHANGED)</span></span><br><span class="line">        image = Image.<span class="built_in">open</span>(BytesIO(imageByte)).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        draw = ImageDraw.Draw(image)</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> ids:</span><br><span class="line">            <span class="comment"># draw checkmark</span></span><br><span class="line">            centerPoint = cls._sumCenterPoint(</span><br><span class="line">                (IMAGE_POSITION_COORDINATES[<span class="built_in">id</span>][<span class="number">0</span>][<span class="number">0</span>], IMAGE_POSITION_COORDINATES[<span class="built_in">id</span>][<span class="number">0</span>][<span class="number">1</span>] - <span class="number">30</span>),</span><br><span class="line">                (IMAGE_POSITION_COORDINATES[<span class="built_in">id</span>][<span class="number">1</span>][<span class="number">0</span>], IMAGE_POSITION_COORDINATES[<span class="built_in">id</span>][<span class="number">1</span>][<span class="number">1</span>] - <span class="number">30</span>)</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># checkmark center point</span></span><br><span class="line">            tickMidpoint = (</span><br><span class="line">                centerPoint[<span class="number">0</span>] + <span class="number">2</span>,</span><br><span class="line">                centerPoint[<span class="number">1</span>] + <span class="number">5</span></span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># a and b is checkmark left and right coordinate</span></span><br><span class="line">            a = (centerPoint[<span class="number">0</span>] - <span class="number">5</span>, centerPoint[<span class="number">1</span>] - <span class="number">5</span>)</span><br><span class="line">            b = (centerPoint[<span class="number">0</span>] + <span class="number">10</span>, centerPoint[<span class="number">1</span>] - <span class="number">10</span>)</span><br><span class="line">        </span><br><span class="line">            draw.line([a, tickMidpoint], fill=Config.DRAW_CONFIG[<span class="string">&quot;color&quot;</span>], width=Config.DRAW_CONFIG[<span class="string">&quot;lineSize&quot;</span>])</span><br><span class="line">            draw.line([tickMidpoint, b], fill=Config.DRAW_CONFIG[<span class="string">&quot;color&quot;</span>], width=Config.DRAW_CONFIG[<span class="string">&quot;lineSize&quot;</span>])</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> cls._imageToBytes(image)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rectangle</span>(<span class="params">cls, imageByte: <span class="built_in">bytes</span>, ids: <span class="built_in">list</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        image = Image.<span class="built_in">open</span>(BytesIO(imageByte)).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        draw = ImageDraw.Draw(image)</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> ids:</span><br><span class="line">            draw.rectangle(</span><br><span class="line">                [IMAGE_POSITION_COORDINATES[<span class="built_in">id</span>][<span class="number">0</span>], IMAGE_POSITION_COORDINATES[<span class="built_in">id</span>][<span class="number">1</span>]],</span><br><span class="line">                outline=Config.DRAW_CONFIG[<span class="string">&quot;color&quot;</span>],</span><br><span class="line">                width=Config.DRAW_CONFIG[<span class="string">&quot;lineSize&quot;</span>]</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">return</span> cls._imageToBytes(image)</span><br></pre></td></tr></table></figure>
</li>
<li><p>ErrorHandler.py 全局错误处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Register error handler in flask framework</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify, Blueprint</span><br><span class="line"><span class="keyword">from</span> exception <span class="keyword">import</span> RequestDataFormatException</span><br><span class="line"><span class="keyword">from</span> exception <span class="keyword">import</span> CaptchaValidException</span><br><span class="line"><span class="keyword">from</span> exception <span class="keyword">import</span> GetCaptchaException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">errorHandler = Blueprint(<span class="string">&quot;errorHandler&quot;</span>, __name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@errorHandler.app_errorhandler(<span class="params">RequestDataFormatException</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handleRequestDataFormatException</span>(<span class="params">error</span>):</span><br><span class="line">    response = jsonify(error.toDict())</span><br><span class="line">    response.statusCode = error.statusCode</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@errorHandler.app_errorhandler(<span class="params">CaptchaValidException</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handleCaptchaValidException</span>(<span class="params">error</span>):</span><br><span class="line">    response = jsonify(error.toDict())</span><br><span class="line">    response.statusCode = error.statusCode</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@errorHandler.app_errorhandler(<span class="params">GetCaptchaException</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handleGetCaptchaException</span>(<span class="params">error</span>):</span><br><span class="line">    response = jsonify(error.toDict())</span><br><span class="line">    response.statusCode = error.statusCode</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
</li>
<li><p>GetCaptcha.py 从12306获取验证码用于测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> exception <span class="keyword">import</span> GetCaptchaException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GetCaptcha</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getCaptchaFrom12306</span>(<span class="params">cls</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        获取12306验证码</span></span><br><span class="line"><span class="string">        :return: base64 string</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        url = <span class="string">&quot;https://kyfw.12306.cn/passport/captcha/captcha-image64&quot;</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        req = requests.get(url=url, headers=headers)</span><br><span class="line">        json_data = json.loads(req.content)</span><br><span class="line">        <span class="keyword">if</span> json_data[<span class="string">&#x27;result_message&#x27;</span>] == <span class="string">&quot;系统维护时间&quot;</span>:</span><br><span class="line">            <span class="keyword">raise</span> GetCaptchaException(<span class="string">&quot;system maintenance, get captcha failed.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> json_data[<span class="string">&#x27;image&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>MarkCaptcha.py 标记结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"><span class="keyword">from</span> .PreprocessingCaptcha <span class="keyword">import</span> PreprocessingCaptcha</span><br><span class="line"><span class="keyword">from</span> .CutCaptcha <span class="keyword">import</span> CutCaptcha</span><br><span class="line"><span class="keyword">from</span> controller.utils <span class="keyword">import</span> Base64</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MarkCaptcha</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._labelModel = load_model(Config.MODEL_PATH[<span class="string">&quot;label&quot;</span>])</span><br><span class="line">        self._imageModel = load_model(Config.MODEL_PATH[<span class="string">&quot;image&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_label</span>(<span class="params">self, imageByte: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;mark label&quot;&quot;&quot;</span></span><br><span class="line">        x = PreprocessingCaptcha.loadData(</span><br><span class="line">            imageByte=imageByte,</span><br><span class="line">            height=Config.MARK_CONFIG[<span class="string">&quot;label&quot;</span>][<span class="string">&quot;height&quot;</span>],</span><br><span class="line">            width=Config.MARK_CONFIG[<span class="string">&quot;label&quot;</span>][<span class="string">&quot;width&quot;</span>],</span><br><span class="line">            channel=Config.MARK_CONFIG[<span class="string">&quot;label&quot;</span>][<span class="string">&quot;channel&quot;</span>],</span><br><span class="line">        )</span><br><span class="line">        result = self._labelModel.predict(x)</span><br><span class="line">        result = PreprocessingCaptcha.decode([result])</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_image</span>(<span class="params">self, imageByte: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;mark image&quot;&quot;&quot;</span></span><br><span class="line">        x = PreprocessingCaptcha.loadData(</span><br><span class="line">            imageByte=imageByte,</span><br><span class="line">            height=Config.MARK_CONFIG[<span class="string">&quot;image&quot;</span>][<span class="string">&quot;height&quot;</span>],</span><br><span class="line">            width=Config.MARK_CONFIG[<span class="string">&quot;image&quot;</span>][<span class="string">&quot;width&quot;</span>],</span><br><span class="line">            channel=Config.MARK_CONFIG[<span class="string">&quot;image&quot;</span>][<span class="string">&quot;channel&quot;</span>],</span><br><span class="line">        )</span><br><span class="line">        result = self._imageModel.predict(x)</span><br><span class="line">        result = PreprocessingCaptcha.decode([result])</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mark</span>(<span class="params">self, imageBase64: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        cutResults = CutCaptcha.cut(Base64.convertToBytes(imageBase64))</span><br><span class="line">        label = cutResults.getLabel</span><br><span class="line">        labelStr = self._label(label)</span><br><span class="line">        images = cutResults.getImages</span><br><span class="line">        markedIds = []</span><br><span class="line">        <span class="keyword">for</span> i, image <span class="keyword">in</span> <span class="built_in">enumerate</span>(images):</span><br><span class="line">            imageStr = self._image(image)</span><br><span class="line">            <span class="keyword">if</span> labelStr.strip() == imageStr.strip():</span><br><span class="line">                markedIds.append(i)</span><br><span class="line">        <span class="keyword">return</span> markedIds</span><br></pre></td></tr></table></figure>
</li>
<li><p>PreCheck.py 检查前端传过来的Base64编码后的验证码是否有效</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> exception <span class="keyword">import</span> CaptchaValidException</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> constants <span class="keyword">import</span> ResponseStatus</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PreCheck</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkImageIsValid</span>(<span class="params">imageBase64: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            Image.<span class="built_in">open</span>(BytesIO(base64.b64decode(imageBase64))).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> IOError:</span><br><span class="line">            <span class="keyword">raise</span> CaptchaValidException(</span><br><span class="line">                status=ResponseStatus.FAILED,</span><br><span class="line">                message=<span class="string">&quot;captcha is invalid, broken data.&quot;</span></span><br><span class="line">            )</span><br></pre></td></tr></table></figure>
</li>
<li><p>PreprocessingCaptcha.py 预处理验证码，处理成Numpy数组才能喂给模型！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> controller.utils <span class="keyword">import</span> ConvertFormat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PreprocessingCaptcha</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">cls, y: <span class="built_in">list</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;decode np array predict result to string&quot;&quot;&quot;</span></span><br><span class="line">        y = np.array(y)</span><br><span class="line">        y = np.argmax(y, axis=<span class="number">2</span>)[:, <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([Config.LABEL_LIST[x] <span class="keyword">for</span> x <span class="keyword">in</span> y])</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">loadData</span>(<span class="params">cls, imageByte: <span class="built_in">bytes</span>, height: <span class="built_in">int</span>, width: <span class="built_in">int</span>, channel: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;load data from image byte to np array&quot;&quot;&quot;</span></span><br><span class="line">        x = np.zeros((<span class="number">1</span>, height, width, channel), dtype=np.float32)</span><br><span class="line">        <span class="comment"># read to image object</span></span><br><span class="line">        image = Image.<span class="built_in">open</span>(BytesIO(imageByte)).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        <span class="comment"># convert format</span></span><br><span class="line">        image = ConvertFormat.convertImageFormat(image)</span><br><span class="line">        <span class="comment"># resize image</span></span><br><span class="line">        image = image.resize((width, height), Image.ANTIALIAS)</span><br><span class="line">        <span class="comment"># convert channel</span></span><br><span class="line">        imageArray = ConvertFormat.convertImageToArrayByChannel(image, channel)</span><br><span class="line">        <span class="comment"># normalization</span></span><br><span class="line">        x[<span class="number">0</span>] = imageArray / <span class="number">255.0</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
</li>
<li><p>Scheduler.py 封装成一个模块，对外只提供一个标记方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># import cv2</span></span><br><span class="line"><span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="keyword">from</span> controller <span class="keyword">import</span> MarkCaptcha</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> controller.utils <span class="keyword">import</span> Base64</span><br><span class="line"><span class="keyword">from</span> .DrawMarkedResult <span class="keyword">import</span> DrawMarkedResult</span><br><span class="line"><span class="keyword">from</span> constants <span class="keyword">import</span> IMAGE_POSITION_COORDINATES</span><br><span class="line"><span class="keyword">from</span> entities <span class="keyword">import</span> ResultMarked</span><br><span class="line"><span class="keyword">from</span> entities <span class="keyword">import</span> RequestMark</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> .PreCheck <span class="keyword">import</span> PreCheck</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Scheduler</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._markCaptcha = MarkCaptcha()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">markCaptcha</span>(<span class="params">self, requestMark: RequestMark</span>) -&gt; ResultMarked:</span><br><span class="line">        <span class="comment"># check is valid</span></span><br><span class="line">        PreCheck.checkImageIsValid(requestMark.originCaptcha)</span><br><span class="line">        <span class="comment"># get data from entity</span></span><br><span class="line">        originCaptcha = requestMark.originCaptcha</span><br><span class="line">        ids = self._markCaptcha.mark(originCaptcha)</span><br><span class="line">        results = self._sumCoordinate(ids)</span><br><span class="line">        markedCaptcha = <span class="built_in">str</span>(base64.b64encode(</span><br><span class="line">            DrawMarkedResult.rectangle(</span><br><span class="line">                base64.b64decode(originCaptcha),</span><br><span class="line">                ids</span><br><span class="line">            )</span><br><span class="line">        ), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ResultMarked(</span><br><span class="line">            originCaptcha=originCaptcha,</span><br><span class="line">            ids=ids,</span><br><span class="line">            results=results,</span><br><span class="line">            markedCaptcha=markedCaptcha</span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_sumCoordinate</span>(<span class="params">self, ids: <span class="built_in">list</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">tuple</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        calculate coordinates based on marked result ids</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            ids: marked result id list</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns: example -&gt; [(12, 43) ...]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        markedResults = []</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> ids:</span><br><span class="line">            a = IMAGE_POSITION_COORDINATES[<span class="built_in">id</span>][<span class="number">0</span>]</span><br><span class="line">            b = IMAGE_POSITION_COORDINATES[<span class="built_in">id</span>][<span class="number">1</span>]</span><br><span class="line">            x = random.randint(a[<span class="number">0</span>] + <span class="number">10</span>, b[<span class="number">0</span>] - <span class="number">10</span>)</span><br><span class="line">            y = random.randint(a[<span class="number">1</span>] + <span class="number">10</span>, b[<span class="number">1</span>] - <span class="number">10</span>)</span><br><span class="line">            markedResults.append((x, y))</span><br><span class="line">        <span class="keyword">return</span> markedResults</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="创建实体包装数据"><a href="#创建实体包装数据" class="headerlink" title="创建实体包装数据"></a>创建实体包装数据</h2><ul>
<li>新建一个entities包，在里面新建几个实体包装数据</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428191955.png" alt="20200428191955"></p>
<ul>
<li><p>BaseEntity.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="keyword">from</span> exception <span class="keyword">import</span> RequestDataFormatException</span><br><span class="line"><span class="keyword">from</span> constants <span class="keyword">import</span> ResponseStatus</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseEntity</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;base entity</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    the class implement object convert to json string and</span></span><br><span class="line"><span class="string">    check attributes is none method.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> json.dumps(self, default=<span class="keyword">lambda</span> obj: obj.__dict__, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>, sort_keys=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkAttributesIsNone</span>(<span class="params">self, on: <span class="built_in">bool</span> = <span class="literal">True</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;check attributes is none</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> on:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> attributeName <span class="keyword">in</span> <span class="built_in">list</span>(self.__dict__.keys()):</span><br><span class="line">            value = <span class="built_in">getattr</span>(self, attributeName)</span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> RequestDataFormatException(</span><br><span class="line">                    status=ResponseStatus.FAILED,</span><br><span class="line">                    message=<span class="string">&quot;Attribute &#123;&#125; not found.&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(attributeName)),</span><br><span class="line">                    statusCode=<span class="number">400</span></span><br><span class="line">                )</span><br></pre></td></tr></table></figure>
</li>
<li><p>RequestMark.py 请求接口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> entities <span class="keyword">import</span> BaseEntity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RequestMark</span>(<span class="title class_ inherited__">BaseEntity</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, requestJson: <span class="built_in">dict</span></span>):</span><br><span class="line">        self._originCaptcha = requestJson.setdefault(<span class="string">&quot;originCaptcha&quot;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        self.checkAttributesIsNone()</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">originCaptcha</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self._originCaptcha</span><br></pre></td></tr></table></figure>
</li>
<li><p>ResponseGeneral.py 响应接口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> constants <span class="keyword">import</span> ResponseStatus</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResponseGeneral</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, status: Enum, message: <span class="built_in">str</span>, **kwargs</span>):</span><br><span class="line">        self.status = status.value</span><br><span class="line">        self.message = message</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="built_in">setattr</span>(self, k, v)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        jsonObj = <span class="built_in">dict</span>()</span><br><span class="line">        args = self.__dict__.keys()</span><br><span class="line">        <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">            jsonObj.setdefault(arg, <span class="built_in">getattr</span>(self, arg))</span><br><span class="line">        <span class="keyword">return</span> json.dumps(jsonObj)</span><br></pre></td></tr></table></figure>
</li>
<li><p>ResultCutCaptcha.py 包装验证码切割的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResultCutCaptcha</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, label: <span class="built_in">bytes</span>, images: <span class="type">Tuple</span>[<span class="built_in">bytes</span>, <span class="built_in">bytes</span>, <span class="built_in">bytes</span>, <span class="built_in">bytes</span>, <span class="built_in">bytes</span>, <span class="built_in">bytes</span>, <span class="built_in">bytes</span>, <span class="built_in">bytes</span>]</span>):</span><br><span class="line">        self.label = label</span><br><span class="line">        self.images = images</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getLabel</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.label</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getImages</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.images</span><br></pre></td></tr></table></figure>
</li>
<li><p>ResultMarked.py 包装标记结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResultMarked</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, originCaptcha: <span class="built_in">str</span>, ids: <span class="built_in">list</span>, results: <span class="built_in">list</span>, markedCaptcha: <span class="built_in">str</span></span>):</span><br><span class="line">        self._originCaptcha = originCaptcha</span><br><span class="line">        self._ids = ids</span><br><span class="line">        self._results = results</span><br><span class="line">        self._markedCatpcha = markedCaptcha</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">originCaptcha</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._originCaptcha</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ids</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._ids</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">results</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._results</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">markedResult</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._markedCatpcha</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> json.dumps(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;originCaptcha&quot;</span>: self._originCaptcha,</span><br><span class="line">                <span class="string">&quot;ids&quot;</span>: self._ids,</span><br><span class="line">                <span class="string">&quot;results&quot;</span>: self._results,</span><br><span class="line">                <span class="string">&quot;markedCaptcha&quot;</span>: self._markedCatpcha</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ul>
<li>创建几个表达式用于自定义错误处理。</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428192451.png" alt="20200428192451"></p>
<ul>
<li><p>BaseException.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseException</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    </span><br><span class="line">    STATUS_CODE = <span class="number">200</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, status: Enum, message: <span class="built_in">str</span>, statusCode=<span class="literal">None</span>, payload=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.status = status</span><br><span class="line">        self.message = message</span><br><span class="line">        <span class="keyword">if</span> statusCode <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.statusCode = statusCode</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.statusCode = self.STATUS_CODE</span><br><span class="line">        self.payload = payload</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toDict</span>(<span class="params">self</span>):</span><br><span class="line">        rv = <span class="built_in">dict</span>(self.payload <span class="keyword">or</span> ())</span><br><span class="line">        rv[<span class="string">&quot;statusCode&quot;</span>] = <span class="built_in">int</span>(self.statusCode)</span><br><span class="line">        rv[<span class="string">&quot;status&quot;</span>] = self.status.value</span><br><span class="line">        rv[<span class="string">&quot;message&quot;</span>] = self.message</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.message</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>RequestException.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> exception <span class="keyword">import</span> BaseException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RequestDataFormatException</span>(<span class="title class_ inherited__">BaseException</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CaptchaValidException</span>(<span class="title class_ inherited__">BaseException</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GetCaptchaException</span>(<span class="title class_ inherited__">BaseException</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="创建配置和初始化模块"><a href="#创建配置和初始化模块" class="headerlink" title="创建配置和初始化模块"></a>创建配置和初始化模块</h2><ul>
<li><p>Initialization.py 初始化一个全局scheduler对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> controller <span class="keyword">import</span> Scheduler</span><br><span class="line"></span><br><span class="line">scheduler = Scheduler()</span><br></pre></td></tr></table></figure>
</li>
<li><p>Config.py 全局配置文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> controller.charset <span class="keyword">import</span> LABEL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"></span><br><span class="line"><span class="comment"># general configuration</span></span><br><span class="line">APP_NAME = <span class="string">&quot;Mark12306Captcha&quot;</span></span><br><span class="line">APP_VERSION = <span class="string">&quot;v1.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># model and mark configuration</span></span><br><span class="line">MODEL_PATH = &#123;</span><br><span class="line">    <span class="string">&quot;label&quot;</span>: os.path.join(CURRENT_DIR, <span class="string">&quot;controller&quot;</span>, <span class="string">&quot;models&quot;</span>, <span class="string">&quot;Label_12306_SmallCNN4.model&quot;</span>),</span><br><span class="line">    <span class="string">&quot;image&quot;</span>: os.path.join(CURRENT_DIR, <span class="string">&quot;controller&quot;</span>, <span class="string">&quot;models&quot;</span>, <span class="string">&quot;Image_12306_SmallCNN4.model&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LABEL_LIST = LABEL</span><br><span class="line"></span><br><span class="line">MARK_CONFIG = &#123;</span><br><span class="line">    <span class="comment"># captcha size</span></span><br><span class="line">    <span class="string">&quot;label&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;height&quot;</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="string">&quot;width&quot;</span>: <span class="number">63</span>,</span><br><span class="line">        <span class="string">&quot;channel&quot;</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;image&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;height&quot;</span>: <span class="number">67</span>,</span><br><span class="line">        <span class="string">&quot;width&quot;</span>: <span class="number">67</span>,</span><br><span class="line">        <span class="string">&quot;channel&quot;</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># draw marked result</span></span><br><span class="line">DRAW_CONFIG = &#123;</span><br><span class="line">    <span class="comment"># RGB</span></span><br><span class="line">    <span class="string">&quot;color&quot;</span>: (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="string">&quot;lineSize&quot;</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>App.py 把api导入进去，这个是程序的入口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> mark</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> get</span><br><span class="line"><span class="keyword">from</span> controller <span class="keyword">import</span> errorHandler</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.register_blueprint(errorHandler)</span><br><span class="line">app.register_blueprint(mark)</span><br><span class="line">app.register_blueprint(get)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="创建API"><a href="#创建API" class="headerlink" title="创建API"></a>创建API</h2><ul>
<li>提供两个API，一个用于获取从12306获取验证码，一个用于标记验证码。</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428192755.png" alt="20200428192755"></p>
<ul>
<li><p>Get.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify, Blueprint, request</span><br><span class="line"><span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> controller.utils <span class="keyword">import</span> RequestUtils</span><br><span class="line"><span class="keyword">from</span> controller.utils <span class="keyword">import</span> ResponseUtils</span><br><span class="line"><span class="keyword">from</span> controller <span class="keyword">import</span> PreCheck</span><br><span class="line"><span class="keyword">from</span> entities <span class="keyword">import</span> RequestMark</span><br><span class="line"><span class="keyword">from</span> entities <span class="keyword">import</span> ResponseGeneral</span><br><span class="line"><span class="keyword">from</span> constants <span class="keyword">import</span> ResponseStatus</span><br><span class="line"><span class="keyword">from</span> controller <span class="keyword">import</span> PreCheck</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> controller <span class="keyword">import</span> GetCaptcha</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get = Blueprint(<span class="string">&quot;get&quot;</span>, __name__, url_prefix=<span class="string">&quot;/&#123;&#125;/api/&#123;&#125;/get&quot;</span>.<span class="built_in">format</span>(Config.APP_NAME, Config.APP_VERSION))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@get.route(<span class="params"><span class="string">&quot;/captcha&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getCaptchaFrom12306</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;get captcha from 12306&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># RequestUtils.checkPostDataIsJson(request)</span></span><br><span class="line">    <span class="comment"># from Initialization import scheduler</span></span><br><span class="line">    <span class="comment"># requetsMark = RequestMark(request.json)</span></span><br><span class="line">    <span class="comment"># PreCheck.checkImageIsValid(requetsMark.originCaptcha)</span></span><br><span class="line">    <span class="comment"># resultMarked = scheduler.markCaptcha(requetsMark)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ResponseUtils.responseJson(ResponseGeneral(</span><br><span class="line">        status=ResponseStatus.SUCCESS,</span><br><span class="line">        message=<span class="string">&quot;mark successfully&quot;</span>,</span><br><span class="line">        result=GetCaptcha.getCaptchaFrom12306()</span><br><span class="line">    ))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mark.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify, Blueprint, request</span><br><span class="line"><span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> controller.utils <span class="keyword">import</span> RequestUtils</span><br><span class="line"><span class="keyword">from</span> controller.utils <span class="keyword">import</span> ResponseUtils</span><br><span class="line"><span class="keyword">from</span> controller <span class="keyword">import</span> PreCheck</span><br><span class="line"><span class="keyword">from</span> entities <span class="keyword">import</span> RequestMark</span><br><span class="line"><span class="keyword">from</span> entities <span class="keyword">import</span> ResponseGeneral</span><br><span class="line"><span class="keyword">from</span> constants <span class="keyword">import</span> ResponseStatus</span><br><span class="line"><span class="keyword">from</span> controller <span class="keyword">import</span> PreCheck</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">mark = Blueprint(<span class="string">&quot;mark&quot;</span>, __name__, url_prefix=<span class="string">&quot;/&#123;&#125;/api/&#123;&#125;/mark&quot;</span>.<span class="built_in">format</span>(Config.APP_NAME, Config.APP_VERSION))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mark.route(<span class="params"><span class="string">&quot;&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">markCaptcha</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;mark captcha&quot;&quot;&quot;</span></span><br><span class="line">    RequestUtils.checkPostDataIsJson(request)</span><br><span class="line">    <span class="keyword">from</span> Initialization <span class="keyword">import</span> scheduler</span><br><span class="line">    requetsMark = RequestMark(request.json)</span><br><span class="line">    <span class="comment"># PreCheck.checkImageIsValid(requetsMark.originCaptcha)</span></span><br><span class="line">    resultMarked = scheduler.markCaptcha(requetsMark)</span><br><span class="line">    <span class="keyword">return</span> ResponseUtils.responseJson(ResponseGeneral(</span><br><span class="line">        status=ResponseStatus.SUCCESS,</span><br><span class="line">        message=<span class="string">&quot;mark successfully&quot;</span>,</span><br><span class="line">        result=json.loads(<span class="built_in">str</span>(resultMarked))</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mark.route(<span class="params"><span class="string">&quot;lite&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">markCaptchaLite</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;mark captcha lite result&quot;&quot;&quot;</span></span><br><span class="line">    RequestUtils.checkPostDataIsJson(request)</span><br><span class="line">    <span class="keyword">from</span> Initialization <span class="keyword">import</span> scheduler</span><br><span class="line">    requetsMark = RequestMark(request.json)</span><br><span class="line">    <span class="comment"># PreCheck.checkImageIsValid(requetsMark.originCaptcha)</span></span><br><span class="line">    resultMarked = scheduler.markCaptcha(requetsMark)</span><br><span class="line">    <span class="keyword">return</span> ResponseUtils.responseJson(ResponseGeneral(</span><br><span class="line">        status=ResponseStatus.SUCCESS,</span><br><span class="line">        message=<span class="string">&quot;mark successfully&quot;</span>,</span><br><span class="line">        result=resultMarked.results</span><br><span class="line">    ))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="创建公共用的常量包"><a href="#创建公共用的常量包" class="headerlink" title="创建公共用的常量包"></a>创建公共用的常量包</h2><p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428192943.png" alt="20200428192943"></p>
<ul>
<li><p>ImagePositionCoordinates.py 这个文件保存了验证码里8个子图片的坐标</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IMAGE_POSITION_COORDINATES = [</span><br><span class="line">    [(<span class="number">5</span>, <span class="number">12</span> + <span class="number">30</span>), (<span class="number">72</span>, <span class="number">79</span> + <span class="number">30</span>)],</span><br><span class="line">    [(<span class="number">5</span>, <span class="number">84</span> + <span class="number">30</span>), (<span class="number">72</span>, <span class="number">151</span> + <span class="number">30</span>)],</span><br><span class="line">    [(<span class="number">77</span>, <span class="number">12</span> + <span class="number">30</span>), (<span class="number">142</span>, <span class="number">79</span> + <span class="number">30</span>)],</span><br><span class="line">    [(<span class="number">77</span>, <span class="number">84</span> + <span class="number">30</span>), (<span class="number">142</span>, <span class="number">151</span> + <span class="number">30</span>)],</span><br><span class="line">    [(<span class="number">147</span>, <span class="number">12</span> + <span class="number">30</span>), (<span class="number">214</span>, <span class="number">79</span> + <span class="number">30</span>)],</span><br><span class="line">    [(<span class="number">147</span>, <span class="number">84</span> + <span class="number">30</span>), (<span class="number">214</span>, <span class="number">151</span> + <span class="number">30</span>)],</span><br><span class="line">    [(<span class="number">221</span>, <span class="number">12</span> + <span class="number">30</span>), (<span class="number">286</span>, <span class="number">79</span> + <span class="number">30</span>)],</span><br><span class="line">    [(<span class="number">221</span>, <span class="number">84</span> + <span class="number">30</span>), (<span class="number">286</span>, <span class="number">151</span> + <span class="number">30</span>)]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>ResponseStatus.py 接口相应状态</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResponseStatus</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line"></span><br><span class="line">    SUCCESS = <span class="string">&quot;success&quot;</span></span><br><span class="line">    FAILED = <span class="string">&quot;failed&quot;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="测试API"><a href="#测试API" class="headerlink" title="测试API"></a>测试API</h2><ul>
<li>运行项目</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428193614.png" alt="20200428193614"></p>
<ul>
<li>测试获取验证码</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428193842.png" alt="20200428193842"></p>
<ul>
<li>查看获取到的验证码</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428194044.png" alt="20200428194044"></p>
<ul>
<li>我们用刚才获取到的base64字符串测试标记接口</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428194208.png" alt="20200428194208"></p>
<ul>
<li>可以看到标记成功了</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428194353.png" alt="20200428194353"></p>
<ul>
<li>并且给出了结果</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200428194432.png" alt="20200428194432"></p>
<ul>
<li>图标的标号为</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>2</td>
<td>4</td>
<td>6</td>
</tr>
<tr>
<td>1</td>
<td>3</td>
<td>5</td>
<td>7</td>
</tr>
</tbody></table>
<p>大功告成</p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/wudinaonao/FlaskMark12306Captcha"> <svg t="1588074680802" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1914" width="24" height="24"><path d="M512 128C299.872 128 128 299.872 128 512c0 169.6 110.016 313.6 262.624 364.384 19.264 3.52 26.24-8.256 26.24-18.496 0-9.152-0.352-33.28-0.48-65.28-106.88 23.136-129.376-51.488-129.376-51.488-17.504-44.384-42.624-56.256-42.624-56.256-34.88-23.744 2.624-23.232 2.624-23.232 38.496 2.752 58.752 39.488 58.752 39.488 34.24 58.752 89.856 41.76 111.744 32 3.52-24.864 13.504-41.76 24.384-51.36-85.248-9.632-174.88-42.624-174.88-189.76 0-42.016 15.008-76.256 39.488-103.136-3.872-9.6-17.12-48.736 3.744-101.6 0 0 32.256-10.24 105.632 39.36A367.584 367.584 0 0 1 512 313.76c32.64 0.128 65.504 4.352 96.128 12.864 73.376-49.6 105.504-39.36 105.504-39.36 20.992 52.864 7.872 92 3.84 101.6 24.64 26.88 39.392 61.12 39.392 103.136 0 147.52-89.728 179.872-175.232 189.504 13.76 11.744 25.984 35.232 25.984 71.008 0 51.36-0.352 92.736-0.352 105.376 0 10.24 6.848 22.24 26.368 18.496C786.112 825.504 896 681.6 896 512c0-212.128-171.872-384-384-384z" p-id="1915" fill="#2c2c2c"></path></svg></a></p>
<p><a href="https://mark12306captcha.wudinaonao.com">搭建好的接口</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Keras</tag>
        <tag>Flask</tag>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Python类的属性的一些问题</title>
    <url>/2020/12/14/%E5%85%B3%E4%BA%8EPython%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="区别实例属性和类属性"><a href="#区别实例属性和类属性" class="headerlink" title="区别实例属性和类属性"></a>区别实例属性和类属性</h1><h2 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h2><p>这样定义的属性是类属性, 我们 new 两个实例测试下</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">class</span> <span class="function"><span class="title">MyClass</span>(<span class="variable"><span class="class">object</span></span>):</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="variable">name</span>: <span class="variable">list</span> = <span class="title">list</span>()</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="variable"><span class="keyword">if</span></span> <span class="variable">__name__</span> == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="variable">m1</span> = <span class="function"><span class="title">MyClass</span>()</span></span><br><span class="line">    <span class="variable">m2</span> = <span class="function"><span class="title">MyClass</span>()</span></span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="title">id</span>(<span class="variable">m1.name</span>))</span></span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="title">id</span>(<span class="variable">m2.name</span>))</span></span><br></pre></td></tr></table></figure>

<p>可以看到指向了相同的地址</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">2078100290056</span></span><br><span class="line"><span class="number">2078100290056</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h2><p>再 <code>__init__</code> 方法中创建的属性是实例属性</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">class</span> <span class="function"><span class="title">MyClass</span>(<span class="variable"><span class="class">object</span></span>):</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="variable">def</span> <span class="title">__init__</span>(<span class="variable">self</span>):</span></span><br><span class="line"><span class="function">        <span class="variable">self.name</span>: <span class="variable">list</span> = <span class="title">list</span>()</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="variable"><span class="keyword">if</span></span> <span class="variable">__name__</span> == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="variable">m1</span> = <span class="function"><span class="title">MyClass</span>()</span></span><br><span class="line">    <span class="variable">m2</span> = <span class="function"><span class="title">MyClass</span>()</span></span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="title">id</span>(<span class="variable">m1.name</span>))</span></span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="title">id</span>(<span class="variable">m2.name</span>))</span></span><br></pre></td></tr></table></figure>

<p>可以看到指向了不同的地址</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">1631300614792</span></span><br><span class="line"><span class="number">1631300614856</span></span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>类属性属于类所有, 所有实例共享一个属性</p>
<p>实例属性属于实例所有, 每个实例各自独享一个属性</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>不要对实例属性和类属性使用相同的名字，否则将产生难以发现的错误。</strong></p>
<blockquote>
<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017594591051072">https://www.liaoxuefeng.com/wiki/1016959663602400/1017594591051072</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Certbot docker部署letsencrypt证书</title>
    <url>/2020/09/15/%E5%9F%BA%E4%BA%8ECertbot-docker%E9%83%A8%E7%BD%B2letsencrypt%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<p>仓库地址</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>registry.hub.docker.com<span class="regexp">/r/</span>certbot/certbot</span><br></pre></td></tr></table></figure>

<p>官方参考</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>certbot.eff.org<span class="regexp">/docs/i</span>nstall.html<span class="comment">#running-with-docker</span></span><br></pre></td></tr></table></figure>


<p>pull 镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull certbot/certbot</span><br></pre></td></tr></table></figure>

<h2 id="基于内置webserver部署"><a href="#基于内置webserver部署" class="headerlink" title="基于内置webserver部署"></a>基于内置webserver部署</h2><p>这个方案的坏处是需要启动内置的nginx服务器占用80和443端口.</p>
<p>创建两个目录</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/</span>letsencrypt</span><br><span class="line"><span class="regexp">/var/</span>lib/letsencrypt</span><br></pre></td></tr></table></figure>

<p>运行镜像</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">docker run -<span class="literal">it</span> --rm --name certbot <span class="string">\</span></span><br><span class="line">            -v <span class="string">&quot;/etc/letsencrypt:/etc/letsencrypt&quot;</span> <span class="string">\</span></span><br><span class="line">            -v <span class="string">&quot;/var/lib/letsencrypt:/var/lib/letsencrypt&quot;</span> <span class="string">\</span></span><br><span class="line">            -p <span class="number">80</span>:<span class="number">80</span> -p <span class="number">443</span>:<span class="number">443</span>  <span class="string">\</span></span><br><span class="line">            certbot/certbot certonly</span><br></pre></td></tr></table></figure>

<p>提问用webserver部署或者用webroot</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">How would you like <span class="built_in">to</span> authenticate <span class="keyword">with</span> <span class="keyword">the</span> ACME CA?</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line"><span class="number">1</span>: Spin up <span class="keyword">a</span> temporary webserver (standalone)</span><br><span class="line"><span class="number">2</span>: Place <span class="built_in">files</span> <span class="keyword">in</span> webroot <span class="built_in">directory</span> (webroot)</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Select <span class="keyword">the</span> appropriate <span class="built_in">number</span> [<span class="number">1</span><span class="number">-2</span>] <span class="keyword">then</span> [enter] (press <span class="string">&#x27;c&#x27;</span> <span class="built_in">to</span> <span class="built_in">cancel</span>): <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们用临时服务器方便点所以选择1, 如果用2的话需要自己设置验证文件.</p>
<p>提示你输入邮箱</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Plugins selected: Authenticator standalone, Installer <span class="keyword">None</span></span><br><span class="line">Enter email address (used <span class="keyword">for</span> urgent renewal <span class="keyword">and</span> <span class="keyword">security</span> notices)</span><br><span class="line"> (Enter <span class="string">&#x27;c&#x27;</span> <span class="keyword">to</span> cancel):</span><br></pre></td></tr></table></figure>

<p>不用看了,就是我已阅读并同意….</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Please <span class="built_in">read</span> <span class="keyword">the</span> Terms <span class="keyword">of</span> Service <span class="keyword">at</span></span><br><span class="line"><span class="keyword">https</span>://letsencrypt.org/documents/LE-SA-v1<span class="number">.2</span>-November<span class="number">-15</span><span class="number">-2017.</span>pdf. You must</span><br><span class="line">agree <span class="keyword">in</span> order <span class="built_in">to</span> register <span class="keyword">with</span> <span class="keyword">the</span> ACME server <span class="keyword">at</span></span><br><span class="line"><span class="keyword">https</span>://acme-v02.api.letsencrypt.org/<span class="built_in">directory</span></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">(A)gree/(C)ancel: <span class="keyword">a</span></span><br></pre></td></tr></table></figure>

<p>想不想接受他给你发邮件</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">Would you be willing, once your first certificate <span class="built_in">is</span> successfully issued, <span class="keyword">to</span></span><br><span class="line">share your email address <span class="keyword">with</span> the Electronic Frontier Foundation, a founding</span><br><span class="line">partner <span class="keyword">of</span> the <span class="keyword">Let</span><span class="comment">&#x27;s Encrypt project and the non-profit organization that</span></span><br><span class="line">develops Certbot? We<span class="comment">&#x27;d like to send you email about our work encrypting the web,</span></span><br><span class="line">EFF news, campaigns, <span class="built_in">and</span> ways <span class="keyword">to</span> support digital freedom.</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">(Y)es/(N)o: y</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输入你的域名, 例如: yourself.hostname.xxx, 这里不要输错了, 输错无法后退, 只能重来.</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Please enter in your domain name(s) (comma<span class="built_in"> and/or </span>space separated)  (Enter &#x27;c&#x27;</span><br><span class="line">to cancel): yourself.hostname.xxx</span><br></pre></td></tr></table></figure>

<p>看到</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">IMPORTANT NOTES:</span><br><span class="line"> - Congratulations! Your certificate and chain have been saved at:</span><br><span class="line">   <span class="regexp">/etc/</span>letsencrypt<span class="regexp">/live/y</span>ourself.hostname.xxx/fullchain.pem</span><br><span class="line">   Your key <span class="keyword">file</span> has been saved at:</span><br><span class="line">   <span class="regexp">/etc/</span>letsencrypt<span class="regexp">/live/y</span>ourself.hostname.xxx/privkey.pem</span><br><span class="line">   Your cert will expire on <span class="number">2020</span>-<span class="number">12</span>-<span class="number">13</span>. To obtain a <span class="keyword">new</span> or tweaked</span><br><span class="line">   version of <span class="keyword">this</span> certificate in the future, simply run certbot</span><br><span class="line">   again. To non-interactively renew *all* of your certificates, run</span><br><span class="line">   <span class="string">&quot;certbot renew&quot;</span></span><br><span class="line"> - <span class="keyword">If</span> you like Certbot, please consider supporting our work by:</span><br><span class="line"></span><br><span class="line">   Donating to ISRG <span class="regexp">/ Let&#x27;s Encrypt:   https:/</span><span class="regexp">/letsencrypt.org/</span>donate</span><br><span class="line">   Donating to EFF:                    https:<span class="comment">//eff.org/donate-le</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>完成</p>
<p>证书保存在</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/</span>letsencrypt<span class="regexp">/live/y</span>ourself.hostname.xxx/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>删除Docker Hub仓库里的TAG</title>
    <url>/2020/12/19/%E5%88%A0%E9%99%A4Docker-Hub%E4%BB%93%E5%BA%93%E9%87%8C%E7%9A%84TAG/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">USERNAME=<span class="string">&quot;docker_username&quot;</span></span><br><span class="line">PASSWORD=<span class="string">&quot;docker_password&quot;</span></span><br><span class="line">ORGANIZATION=<span class="string">&quot;organization&quot;</span></span><br><span class="line">IMAGE=<span class="string">&quot;image&quot;</span></span><br><span class="line">TAG=<span class="string">&quot;tag&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">login_data</span></span>() &#123;</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;username&quot;: &quot;$USERNAME&quot;,</span></span><br><span class="line"><span class="string">  &quot;password&quot;: &quot;$PASSWORD&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TOKEN=`curl -s -H <span class="string">&quot;Content-Type: application/json&quot;</span> -X POST -d <span class="string">&quot;<span class="subst">$(login_data)</span>&quot;</span> <span class="string">&quot;https://hub.docker.com/v2/users/login/&quot;</span> | jq -r .token`</span><br><span class="line"></span><br><span class="line">curl <span class="string">&quot;https://hub.docker.com/v2/repositories/<span class="variable">$&#123;ORGANIZATION&#125;</span>/<span class="variable">$&#123;IMAGE&#125;</span>/tags/<span class="variable">$&#123;TAG&#125;</span>/&quot;</span> \</span><br><span class="line">-X DELETE \</span><br><span class="line">-H <span class="string">&quot;Authorization: JWT <span class="variable">$&#123;TOKEN&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://devopsheaven.com/docker/dockerhub/2018/04/09/delete-docker-image-tag-dockerhub.html">https://devopsheaven.com/docker/dockerhub/2018/04/09/delete-docker-image-tag-dockerhub.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Python实现的设计模式</title>
    <url>/2020/12/16/%E5%9F%BA%E4%BA%8EPython%E5%AE%9E%E7%8E%B0%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="1-Singleton-mode-单例模式"><a href="#1-Singleton-mode-单例模式" class="headerlink" title="1.Singleton mode 单例模式"></a>1.Singleton mode 单例模式</h1><h3 id="一个类最多创建一个实例"><a href="#一个类最多创建一个实例" class="headerlink" title="一个类最多创建一个实例"></a>一个类最多创建一个实例</h3><p>装饰器实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 装饰器实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">singleton</span>(<span class="params">class_</span>):</span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getInstance</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> class_ <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[class_] = class_(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instances[class_]</span><br><span class="line">    <span class="keyword">return</span> getInstance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>元类实现</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"># 元类实现</span><br><span class="line"><span class="keyword">class</span> <span class="constructor">Singleton(<span class="params">type</span>)</span>:</span><br><span class="line">    _instances = &#123;&#125;</span><br><span class="line">    def <span class="constructor">__call__(<span class="params">cls</span>, <span class="operator">*</span><span class="params">args</span>, <span class="operator">**</span><span class="params">kwargs</span>)</span>:</span><br><span class="line">        <span class="keyword">if</span> cls not <span class="keyword">in</span> cls._instances:</span><br><span class="line">            cls._instances<span class="literal">[<span class="identifier">cls</span>]</span> = super(Singleton, cls).<span class="constructor">__call__(<span class="operator">*</span><span class="params">args</span>, <span class="operator">**</span><span class="params">kwargs</span>)</span></span><br><span class="line">        return cls._instances<span class="literal">[<span class="identifier">cls</span>]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="constructor">MyClass(<span class="params">metaclass</span>=Singleton)</span>:</span><br><span class="line">    </span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>

<h1 id="2-The-Factory-Pattern-工厂模式"><a href="#2-The-Factory-Pattern-工厂模式" class="headerlink" title="2.The Factory Pattern 工厂模式"></a>2.The Factory Pattern 工厂模式</h1><h3 id="解决对象创建问题"><a href="#解决对象创建问题" class="headerlink" title="解决对象创建问题"></a>解决对象创建问题</h3><p>工厂模式属于创建型模式, 它提供了一种创建对象的最佳方式.<br>在工厂模式中, 我们在创建对象时不会对客户端暴露创建逻辑, 并且时通过使用一个共同的接口来指向新创建的对象.</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据品牌名生产不同的汽车</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bmw 生产线</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bmw</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我生产了一台BMW汽车&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># benz 生产线</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">benz</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我生产了一台Benz汽车&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个汽车工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MachineFactory</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(<span class="keyword">self</span>, brand)</span></span>:</span><br><span class="line">        <span class="keyword">if</span> brand == <span class="string">&quot;bmw&quot;</span>:</span><br><span class="line">            machine = bmw()</span><br><span class="line">            print(machine)</span><br><span class="line">        elif brand == <span class="string">&quot;benz&quot;</span>:</span><br><span class="line">            machine = benz()</span><br><span class="line">            print(machine)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">machineFactory = MachineFactory()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据不同的品牌名生产不同的汽车</span></span><br><span class="line">machineFactory.build(<span class="string">&quot;bmw&quot;</span>)</span><br><span class="line">machineFactory.build(<span class="string">&quot;benz&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="3-The-Builder-Pattern-构造模式"><a href="#3-The-Builder-Pattern-构造模式" class="headerlink" title="3.The Builder Pattern 构造模式"></a>3.The Builder Pattern 构造模式</h1><h3 id="控制复杂对象的构造"><a href="#控制复杂对象的构造" class="headerlink" title="控制复杂对象的构造"></a>控制复杂对象的构造</h3><p>当对象需要多个部分组合起来一步步创建，并且创建和表示分离的时候。可以这么理解，你要买电脑，工厂模式直接返回一个你需要型号的电脑，但是构造模式允许你自定义电脑各种配置类型，组装完成后给你。这个过程你可以传入builder从而自定义创建的方式。</p>
<p>假如我们要生产一台Computer, 我们需要首先定义一个Computer类, 他表示了一个Computer由那些组件组成. 然后定义一个Builer, Builer用于组装Computer. 最后定义一个Enginner, 工程师告诉Builer用那些配件参数生产Computer, 然后得到一台根据具体参数生产的Computer</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先我们先定义一个 Computer 类</span></span><br><span class="line"><span class="comment"># 它表示一个 Computer 都由那些参数设备组成</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, serialNumber</span>):</span><br><span class="line">        self.serial = serialNumber</span><br><span class="line">        self.memory = <span class="literal">None</span></span><br><span class="line">        self.ssd = <span class="literal">None</span></span><br><span class="line">        self.gpu = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        info = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Memory: &#123;&#125;GB</span></span><br><span class="line"><span class="string">        SSD   : &#123;&#125;GB</span></span><br><span class="line"><span class="string">        Graphics Card: &#123;&#125;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            self.memory,</span><br><span class="line">            self.ssd,</span><br><span class="line">            self.gpu</span><br><span class="line">        )</span><br><span class="line">        info = <span class="string">&quot;\n&quot;</span>.join(<span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x.strip(), info.split(<span class="string">&quot;\n&quot;</span>))))</span><br><span class="line">        <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个建造者, 用于构造一个 Computer</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputerBuilder</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.computer = Computer(<span class="string">&quot;W540&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setMemory</span>(<span class="params">self, amount</span>):</span><br><span class="line">        self.computer.memory = amount</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setSSD</span>(<span class="params">self, amount</span>):</span><br><span class="line">        self.computer.ssd = amount</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setGPU</span>(<span class="params">self, amount</span>):</span><br><span class="line">        self.computer.gpu = amount</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个工程师, 他告诉建造者该如何构造一个 Computer</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Engineer</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.builder = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buildComputer</span>(<span class="params">self, memory, ssd, gpu</span>):</span><br><span class="line">        self.builder =  ComputerBuilder()</span><br><span class="line">        self.builder.setMemory(memory)</span><br><span class="line">        self.builder.setSSD(ssd)</span><br><span class="line">        self.builder.setGPU(gpu)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">computer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.builder.computer</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 接下来我们创建一个 engineer 实例</span></span><br><span class="line">enginner = Engineer()</span><br><span class="line"><span class="comment"># engineer 构造了一个 computer</span></span><br><span class="line">enginner.buildComputer(</span><br><span class="line">    memory=<span class="number">32</span>,</span><br><span class="line">    ssd=<span class="number">1024</span>,</span><br><span class="line">    gpu=<span class="string">&quot;GeForce RTX 3090&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 获得 computer</span></span><br><span class="line">computer = enginner.computer</span><br><span class="line"><span class="built_in">print</span>(computer)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="4-The-Prototype-Pattern-原型模式"><a href="#4-The-Prototype-Pattern-原型模式" class="headerlink" title="4.The Prototype Pattern 原型模式"></a>4.The Prototype Pattern 原型模式</h1><h3 id="解决对象拷贝的问题"><a href="#解决对象拷贝的问题" class="headerlink" title="解决对象拷贝的问题"></a>解决对象拷贝的问题</h3><p>可以使用Python内置的copy模块实现. 拷贝分为深拷贝和浅拷贝, 这里我觉得有点像C里面的指针. 浅拷贝相当于复制了对象的指针, 还是指向同一个对象, 而深拷贝则完全复制了一个新的对象.<br>深拷贝的优点是对象之间完全独立互不影响, 但是这个操作会比较消耗资源.<br>浅拷贝的优点是仅仅复制了指向对象的指针, 因为引用的都是同一个对象, 这个操作比深拷贝消耗的资源要少得多, 但是因为指向同一个对象, 所以当对象需要进行某些操作时候要慎重考虑.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一本书</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, author, price, **kwargs</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.author = author</span><br><span class="line">        self.price = price</span><br><span class="line">        self.__dict__.update(kwargs)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.__dict__.keys())</span><br><span class="line">        attrNames = <span class="built_in">list</span>(self.__dict__.keys())</span><br><span class="line">        attrs = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> attrNames:</span><br><span class="line">            attrs.setdefault(name, <span class="built_in">getattr</span>(self, name))</span><br><span class="line">        <span class="keyword">return</span> json.dumps(attrs, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prototype</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.objects = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">self, identifier, obj</span>):</span><br><span class="line">        self.objects[identifier] = obj</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unregister</span>(<span class="params">self, identifiter</span>):</span><br><span class="line">        <span class="keyword">del</span> self.objects[identifiter]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clone</span>(<span class="params">self, identifier, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;克隆一个对象, 即对象的深拷贝&quot;&quot;&quot;</span></span><br><span class="line">        obj = self.objects.get(identifier)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> obj:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Incorrect object identifier: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(identifier))</span><br><span class="line">        newObj = copy.deepcopy(obj)</span><br><span class="line">        <span class="comment"># 实现拷贝时自定义更新</span></span><br><span class="line">        newObj.__dict__.update(kwargs)</span><br><span class="line">        <span class="keyword">return</span> newObj</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    </span><br><span class="line">    b1 = Book(</span><br><span class="line">        name=<span class="string">&quot;Python程序设计&quot;</span>,</span><br><span class="line">        author=<span class="string">&quot;闹闹&quot;</span>,</span><br><span class="line">        price=<span class="string">&quot;99&quot;</span>,</span><br><span class="line">        edition=<span class="string">&quot;1&quot;</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">property</span> = Prototype()</span><br><span class="line">    cid = <span class="string">&quot;A123456789&quot;</span></span><br><span class="line">    <span class="comment"># 注册了一本新书</span></span><br><span class="line">    <span class="built_in">property</span>.register(cid, b1)</span><br><span class="line">    <span class="comment"># 克隆一个新对象</span></span><br><span class="line">    b2 = <span class="built_in">property</span>.clone(cid, edition=<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> (b1, b2):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ID b1: &#123;&#125; b2: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>(b1), <span class="built_in">id</span>(b2)))</span><br></pre></td></tr></table></figure>

<h1 id="5-The-Adapter-Pattern-适配器模式"><a href="#5-The-Adapter-Pattern-适配器模式" class="headerlink" title="5.The Adapter Pattern 适配器模式"></a>5.The Adapter Pattern 适配器模式</h1><h3 id="解决接口不兼容问题"><a href="#解决接口不兼容问题" class="headerlink" title="解决接口不兼容问题"></a>解决接口不兼容问题</h3><p>未完待续…</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>文件系统特定的 LookupAndOpen[file] 实施失败</title>
    <url>/2022/02/21/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%89%B9%E5%AE%9A%E7%9A%84-LookupAndOpen-file-%E5%AE%9E%E6%96%BD%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<p>错误描述</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">文件系统特定的 LookupAndOpen[<span class="keyword">file</span>] 实施失败</span><br><span class="line">文件系统特定的 LookupAndOpen[<span class="keyword">file</span>] 实施失败</span><br><span class="line">文件系统特定的 LookupAndOpen[<span class="keyword">file</span>] 实施失败</span><br><span class="line">文件系统特定的 LookupAndOpen[<span class="keyword">file</span>] 实施失败</span><br><span class="line">文件系统特定的 LookupAndOpen[<span class="keyword">file</span>] 实施失败</span><br><span class="line">文件系统特定的 LookupAndOpen[<span class="keyword">file</span>] 实施失败</span><br><span class="line">对象类型需要托管的 I/O</span><br><span class="line">无法打开磁盘“<span class="regexp">/vmfs/</span>volumes<span class="regexp">/5ec70d97-8b7959b3-d45b-ecf4bbe3557c/</span>openwrt/openwrt-x86-<span class="number">64</span>-generic-squashfs-combined.vmdk”或其所依赖的快照磁盘之一。</span><br><span class="line">模块“Disk”打开电源失败。</span><br><span class="line">无法启动虚拟机。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解决方案, 找到对应的磁盘文件(可以在网页里查看到磁盘的挂载路径)</p>
<p>例如</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[datastore1]</span> openwrt/openwrt-x86-<span class="number">64</span>-generic-squashfs-combined<span class="selector-class">.vmdk</span> </span><br></pre></td></tr></table></figure>

<p>尝试修复</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vmkfstools -x repair <span class="regexp">/vmfs/</span>volumes<span class="regexp">/&lt;datastorepath&gt;/</span>&lt;vm name&gt;/&lt;vm name main base disk&gt;.vmdk</span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到该目录下</span></span><br><span class="line">cd <span class="regexp">/vmfs/</span>volumes<span class="regexp">/datastore1/</span>openwrt</span><br><span class="line"><span class="comment"># 修复</span></span><br><span class="line">vmkfstools -x repair openwrt-x86-<span class="number">64</span>-generic-squashfs-combined.vmdk</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">Disk was successfully repaired.</span><br></pre></td></tr></table></figure>

<p>磁盘修复成功, 可以打开了.</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><blockquote>
<p><a href="https://kb.vmware.com/s/article/2149438?lang=zh_CN">https://kb.vmware.com/s/article/2149438?lang=zh_CN</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
        <category>ESXI</category>
      </categories>
      <tags>
        <tag>ESXI</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派ubuntu更换国内源</title>
    <url>/2020/05/07/%E6%A0%91%E8%8E%93%E6%B4%BEubuntu%E6%9B%B4%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90/</url>
    <content><![CDATA[<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200507193511.png" alt="20200507193511"></p>
<h1 id="备份原始源"><a href="#备份原始源" class="headerlink" title="备份原始源"></a>备份原始源</h1><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">cd /etc/apt</span><br><span class="line"><span class="keyword">cp</span> sources<span class="meta">.list</span> sources<span class="meta">.list</span>.bak</span><br><span class="line">rm sources<span class="meta">.list</span></span><br></pre></td></tr></table></figure>

<h1 id="更改源"><a href="#更改源" class="headerlink" title="更改源"></a>更改源</h1><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">nano sources<span class="meta">.list</span></span><br></pre></td></tr></table></figure>
<p>然后填写以下内容。</p>
<h2 id="清华源"><a href="#清华源" class="headerlink" title="清华源"></a>清华源</h2><h3 id="ubuntu-20-04-focal-配置如下"><a href="#ubuntu-20-04-focal-配置如下" class="headerlink" title="ubuntu 20.04(focal) 配置如下"></a>ubuntu 20.04(focal) 配置如下</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu-ports/</span> focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu-ports/</span> focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu-ports/</span> focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu-ports/</span> focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>

<h2 id="阿里源"><a href="#阿里源" class="headerlink" title="阿里源"></a>阿里源</h2><h3 id="ubuntu-20-04-focal-配置如下-1"><a href="#ubuntu-20-04-focal-配置如下-1" class="headerlink" title="ubuntu 20.04(focal) 配置如下"></a>ubuntu 20.04(focal) 配置如下</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu-ports/</span> focal main restricted universe multiverse</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu-ports/</span> focal main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu-ports/</span> focal-security main restricted universe multiverse</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu-ports/</span> focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu-ports/</span> focal-updates main restricted universe multiverse</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu-ports/</span> focal-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu-ports/</span> focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu-ports/</span> focal-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu-ports/</span> focal-backports main restricted universe multiverse</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu-ports/</span> focal-backports main restricted universe multiverse</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其他版本根据版本号替换即可</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu-ports/</span> focal main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p>focal即版本号</p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">update</span> <span class="variable">&amp;&amp;</span> apt upgrade -y</span><br></pre></td></tr></table></figure>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200507194302.png" alt="20200507194302"></p>
<p>速度比官方源快很多。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>ubuntu-ports是Arm64，Armhf 等平台的 Ubuntu 软件仓库</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Raspberry</tag>
      </tags>
  </entry>
  <entry>
    <title>用Docker搭建饥荒服务器</title>
    <url>/2020/05/03/%E7%94%A8Docker%E6%90%AD%E5%BB%BA%E9%A5%A5%E8%8D%92%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="用Docker搭建饥荒服务器"><a href="#用Docker搭建饥荒服务器" class="headerlink" title="用Docker搭建饥荒服务器"></a>用Docker搭建饥荒服务器</h1><p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503210534.png" alt="20200503210534"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">docker pull jamesits/dst-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503210917.png" alt="20200503210917"></p>
<p>拉取到的镜像</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503213045.png" alt="20200503213045"></p>
<p>如果没有安装docker-compose建议安装，方便书写配置文件。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> docker-compose</span><br></pre></td></tr></table></figure>

<p>新建一个目录用于存放数据文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /<span class="variable">$&#123;HOME&#125;</span>/dst</span><br><span class="line"><span class="built_in">cd</span> /<span class="variable">$&#123;HOME&#125;</span>/dst</span><br></pre></td></tr></table></figure>

<p>打开本机饥荒</p>
<p>点账号</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503213529.png" alt="20200503213529"></p>
<p>查看我的游戏</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503213654.png" alt="20200503213654"></p>
<p>选择饥荒</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503214024.png" alt="20200503214024"></p>
<p>添加一个新服务器，起一个用于识别的名字</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503214359.png" alt="20200503214359"></p>
<p>复制那串key</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503214424.png" alt="20200503214424"></p>
<p>回到服务器</p>
<p>创建<code>docker-compose.yml</code>文件</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cat &gt; docker-compose.yaml &lt;&lt;&quot;EOF&quot;</span></span><br><span class="line"><span class="attribute">version</span><span class="punctuation">:</span> <span class="string">&#x27;3.5&#x27;</span></span><br><span class="line"><span class="attribute">services</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">dst-server</span><span class="punctuation">:</span></span><br><span class="line">     <span class="attribute">environment</span><span class="punctuation">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">DST_CLUSTER_TOKEN=这里粘贴刚才复制的那串key</span></span><br><span class="line">     <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">jamesits/dst-server:latest</span></span><br><span class="line">     <span class="attribute">restart</span><span class="punctuation">:</span> <span class="string">&quot;on-failure:5&quot;</span></span><br><span class="line">     <span class="attribute">ports</span><span class="punctuation">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;10999-11000:10999-11000/udp&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;12346-12347:12346-12347/udp&quot;</span></span><br><span class="line">     <span class="attribute">volumes</span><span class="punctuation">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/.klei/DoNotStarveTogether:/data</span></span><br><span class="line">     <span class="attribute">stop_grace_period</span><span class="punctuation">:</span> <span class="string">6m</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>创建并运行容器</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker-compose up</span></span><br></pre></td></tr></table></figure>

<p>看到这个</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503215417.png" alt="20200503215417"></p>
<p><code>ctrl+c</code>退出容器编辑配置文件</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">.klei/DoNotStarveTogether/DoNotStarveTogether/Cluster_1</span></span><br><span class="line">nano cluster.ini</span><br></pre></td></tr></table></figure>

<p>简单配置下，这里基本是关于游戏模式和服务器的设置。你也可以在本地新建一个房间，然后把配置文件拿过来替换掉服务器上的配置。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503220023.png" alt="20200503220023"></p>
<p>后台运行</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span></span><br><span class="line">docker-compose <span class="keyword">up</span> -d</span><br></pre></td></tr></table></figure>

<p>如果你的主机提供商有安全规则的话，你需要放行这样四个端口，UDP协议。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">10999</span>-<span class="number">11000</span></span><br><span class="line"><span class="attribute">12346</span>-<span class="number">12347</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503220519.png" alt="20200503220519"></p>
<h2 id="开始玩"><a href="#开始玩" class="headerlink" title="开始玩"></a>开始玩</h2><p>浏览游戏</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503220813.png" alt="20200503220813"></p>
<p>等待搜索完服务器列表</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503221138.png" alt="20200503221138"></p>
<p>过滤器输入我们刚才配置的服务器名字 NaonaoTencenCloud</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503220848.png" alt="20200503220848"></p>
<p>加入 </p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503222950.png" alt="20200503222950"></p>
<p>创建角色</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200503223240.png" alt="20200503223240"></p>
<p>可以愉快的玩耍了</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://hub.docker.com/r/jamesits/dst-server">https://hub.docker.com/r/jamesits/dst-server</a></p>
]]></content>
      <categories>
        <category>Games</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Games</tag>
      </tags>
  </entry>
  <entry>
    <title>用Docker部署识别12306验证码服务</title>
    <url>/2020/06/09/%E7%94%A8Docker%E9%83%A8%E7%BD%B2%E8%AF%86%E5%88%AB12306%E9%AA%8C%E8%AF%81%E7%A0%81%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="12306验证码识别"><a href="#12306验证码识别" class="headerlink" title="12306验证码识别"></a>12306验证码识别</h1><p>这是一个基于Flask，Tensorflow，Keras实现的12306验证码识别接口。</p>
<p>搭建好的接口：<a href="https://mark12306captcha.wudinaonao.com">https://mark12306captcha.wudinaonao.com</a></p>
<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull wudinaonao/flask-mark-<span class="number">12306</span>-captcha</span><br></pre></td></tr></table></figure>

<h1 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h1><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -dit -p <span class="number">8848</span>:<span class="number">8848</span> wudinaonao/flask-mark-<span class="number">12306</span>-captcha</span><br></pre></td></tr></table></figure>
<h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker compose"></a>docker compose</h2><figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">version</span><span class="punctuation">:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line"><span class="attribute">services</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">flask-mark-12306-captcha</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">wudinaonao/flask-mark-12306-captcha</span></span><br><span class="line">    <span class="attribute">container_name</span><span class="punctuation">:</span> <span class="string">flask-mark-12306-captcha</span></span><br><span class="line">    <span class="attribute">ports</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">8848:8848</span></span><br><span class="line">    <span class="attribute">restart</span><span class="punctuation">:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>

<h1 id="一个用于验证的前端"><a href="#一个用于验证的前端" class="headerlink" title="一个用于验证的前端"></a>一个用于验证的前端</h1><p>访问：<code>http://yourhostname:8848</code></p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200609204007.png" alt="20200609204007"></p>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="获取验证码"><a href="#获取验证码" class="headerlink" title="获取验证码"></a>获取验证码</h2><p>从12306获取一张测试的验证码</p>
<ul>
<li><p>Request</p>
<ul>
<li>Method: GET</li>
<li>Headers<ul>
<li><code>Content-Type: application/json</code></li>
</ul>
</li>
<li>URL: <code>/Mark12306Captcha/api/v1.0/get/captcha</code></li>
</ul>
</li>
<li><p>Response</p>
<ul>
<li>Headers<ul>
<li><code>Content-Type: application/json</code></li>
</ul>
</li>
<li>Body  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mark successfully&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;captcha base64 string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h2><h3 id="Full"><a href="#Full" class="headerlink" title="Full"></a>Full</h3><ul>
<li><p>Request</p>
<ul>
<li>Method: POST</li>
<li>Headers<ul>
<li><code>Content-Type: application/json</code></li>
</ul>
</li>
<li>URL: <code>/Mark12306Captcha/api/v1.0/mark</code></li>
<li>Body<ul>
<li><code>&#123;&quot;originCaptcha&quot;:&quot;captcha base64 string&quot;&#125;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>Response</p>
<ul>
<li>Headers<ul>
<li><code>Content-Type: application/json</code></li>
</ul>
</li>
<li>Body<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;mark successfully&quot;</span>,</span><br><span class="line">    <span class="string">&quot;result&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;originCaptcha&quot;</span>: <span class="string">&quot;origin captcha base64 string&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ids&quot;</span>: [</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            <span class="number">7</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;results&quot;</span>: [</span><br><span class="line">            [</span><br><span class="line">                <span class="number">190</span>,</span><br><span class="line">                <span class="number">165</span></span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="number">260</span>,</span><br><span class="line">                <span class="number">141</span></span><br><span class="line">            ]</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;markedCaptcha&quot;</span>: <span class="string">&quot;marked captcha base64 string&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Result 解释说明</p>
<ul>
<li>ids 图片的编号<ul>
<li><table>
<thead>
<tr>
<th>0</th>
<th>2</th>
<th>4</th>
<th>6</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>3</td>
<td>5</td>
<td>7</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li>results 一个列表，每个元素是标记的坐标</li>
<li>markedCaptcha 绘制好标记结果的验证码Base64字符串</li>
</ul>
</li>
</ul>
<h3 id="Lite"><a href="#Lite" class="headerlink" title="Lite"></a>Lite</h3><ul>
<li><p>Request</p>
<ul>
<li>Method: POST</li>
<li>Headers<ul>
<li><code>Content-Type: application/json</code></li>
</ul>
</li>
<li>URL: <code>/Mark12306Captcha/api/v1.0/mark/lite</code></li>
<li>Body<ul>
<li><code>&#123;&quot;originCaptcha&quot;:&quot;captcha base64 string&quot;&#125;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>Response</p>
<ul>
<li>Headers<ul>
<li><code>Content-Type: application/json</code></li>
</ul>
</li>
<li>Body<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;mark successfully&quot;</span>,</span><br><span class="line">    <span class="string">&quot;result&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">168</span>,</span><br><span class="line">            <span class="number">144</span></span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">274</span>,</span><br><span class="line">            <span class="number">125</span></span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Result 解释说明参见上面</li>
</ul>
</li>
</ul>
<h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p><a href="https://github.com/wudinaonao/FlaskMark12306Captcha/blob/master/LICENSE">Apache License</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>用Nginx搭建自己的私有Git服务器</title>
    <url>/2020/04/30/%E7%94%A8Nginx%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A7%81%E6%9C%89Git%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="用Nginx搭建自己的私有Git服务器"><a href="#用Nginx搭建自己的私有Git服务器" class="headerlink" title="用Nginx搭建自己的私有Git服务器"></a>用Nginx搭建自己的私有Git服务器</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>现在Github的私有仓库已经无限制免费了，但是Geek精神总是在召唤我似乎可以自己搭建一台自己的私有Git服务器？（你甚至可以写个后台前端搭建一个自己的Github！额，貌似是Gitlab？）</p>
<p>说干就干！</p>
<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>Ubuntu 20.04 LTS</li>
<li>git version 2.25.1</li>
<li>nginx version: nginx/1.17.10 (Ubuntu)</li>
</ul>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>搭建自己的私有Git仓库</li>
<li>通过http访问</li>
<li>增加ssl</li>
</ul>
<h2 id="搭建Git仓库"><a href="#搭建Git仓库" class="headerlink" title="搭建Git仓库"></a>搭建Git仓库</h2><p>个人习惯用root用户操作，不用每个命令前增加sudo。可以先切到root用户操作</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">sudo -<span class="selector-tag">i</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>安装 git</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> git -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 git 用户</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">adduser git</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化仓库</p>
<p>初始化你的Git仓库根目录，例如我放在<code>/home/git/wudinaonao/</code>这个目录</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/home/gi</span>t<span class="regexp">/wudinaonao/</span></span><br><span class="line">git init --bare test.git</span><br></pre></td></tr></table></figure>

<p>这样我们创建了一个测试仓库<code>test.git</code></p>
</li>
</ul>
<ul>
<li>禁用Git用户登录Shell</li>
</ul>
<p>编辑<code>/etc/passwd</code>文件找到这行</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git:</span><span class="symbol">x:</span><span class="number">1001</span><span class="symbol">:</span><span class="number">1001</span><span class="symbol">:</span>,,,<span class="symbol">:/home/git</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git:</span><span class="symbol">x:</span><span class="number">1001</span><span class="symbol">:</span><span class="number">1001</span><span class="symbol">:</span>,,,<span class="symbol">:/home/git</span><span class="symbol">:/usr/bin/git-shell</span></span><br></pre></td></tr></table></figure>
<ul>
<li>克隆远程仓库</li>
</ul>
<p>格式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">git clone <span class="tag">&lt;<span class="name">user</span>&gt;</span>@<span class="tag">&lt;<span class="name">host</span>&gt;</span>:<span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例如根据刚才我们创建的仓库我们输入</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">git clone git<span class="variable">@172</span>.<span class="number">16.105</span>.<span class="number">203</span><span class="symbol">:/home/git/wudinaonao/test</span>.git</span><br></pre></td></tr></table></figure>

<p>然后输入密码</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200430162047.png" alt="20200430162047"></p>
<p>这样就克隆到了本地。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200430162118.png" alt="20200430162118"></p>
<h2 id="使用Nginx通过HTTP访问Git仓库"><a href="#使用Nginx通过HTTP访问Git仓库" class="headerlink" title="使用Nginx通过HTTP访问Git仓库"></a>使用Nginx通过HTTP访问Git仓库</h2><ul>
<li><p>安装软件包</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install git-core nginx fcgiwrap</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 Nginx</p>
<p>例如我想通过<code>/wudinaonao/xxx.git</code>这样的路径来访问服务器上<code>xxx.git</code>仓库，我们可以修改nginx默认网站配置文件<code>/etc/nginx/sites-available/default</code><br>修改信息</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  wudinaonao 的 Git 仓库</span></span><br><span class="line">location ~ <span class="regexp">/wudinaonao(/</span>.*) &#123;</span><br><span class="line">		<span class="comment"># 使用 Basic 认证</span></span><br><span class="line">		auth_basic <span class="string">&quot;Restricted&quot;</span>;</span><br><span class="line">		<span class="comment"># 认证的用户文件</span></span><br><span class="line">		auth_basic_user_file <span class="regexp">/etc/</span>nginx/passwd;</span><br><span class="line">		<span class="comment"># FastCGI 参数</span></span><br><span class="line">		fastcgi_pass  unix:<span class="regexp">/var/</span>run/fcgiwrap.socket;</span><br><span class="line">		fastcgi_param SCRIPT_FILENAME <span class="regexp">/usr/</span>lib<span class="regexp">/git-core/gi</span>t-http-backend;</span><br><span class="line">		fastcgi_param GIT_HTTP_EXPORT_ALL <span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="comment"># git 库在服务器上的跟目录</span></span><br><span class="line">		fastcgi_param GIT_PROJECT_ROOT    <span class="regexp">/home/gi</span>t/wudinaonao;</span><br><span class="line">		fastcgi_param PATH_INFO           <span class="variable">$1</span>;</span><br><span class="line">		<span class="comment"># 将认证用户信息传递给 fastcgi 程序</span></span><br><span class="line">		fastcgi_param REMOTE_USER <span class="variable">$remote_user</span>;</span><br><span class="line">		<span class="comment"># 包涵默认的 fastcgi 参数；</span></span><br><span class="line">		include       fastcgi_params;</span><br><span class="line">		<span class="comment"># 将允许客户端 post 的最大值调整为 100 兆</span></span><br><span class="line">		<span class="comment"># max_client_body_size 100M;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>创建Nginx认证用户文件</p>
<p>参考 nginx ngx http auth basic module ， 用户认证文件格式如下：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># comment</span></span><br><span class="line"><span class="symbol">name1:</span>password1</span><br><span class="line"><span class="symbol">name2:</span>password2:comment</span><br><span class="line"><span class="symbol">name3:</span>password3</span><br></pre></td></tr></table></figure>

<p>推荐使用<code>htpasswd</code>命令创建用户，可以通过<code>apt install apache2-utils</code>安装</p>
<p>创建文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">touch <span class="regexp">/etc/</span>nginx/passwd</span><br></pre></td></tr></table></figure>

<p>创建一个用户 user</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">htpasswd <span class="regexp">/etc/</span>nginx/passwd user</span><br></pre></td></tr></table></figure>

<p>根据提示输入密码。</p>
</li>
<li><p>重启Nginx测试</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nginx -s reload</span></span><br></pre></td></tr></table></figure>

<p>格式</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone http:<span class="regexp">//</span>&lt;your hostname or ip&gt;<span class="regexp">/&lt;your path&gt;/</span>&lt;your repository&gt;.git</span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">105.205</span><span class="regexp">/wudinaonao/</span>test.git</span><br></pre></td></tr></table></figure>

</li>
</ul>
<ul>
<li>成功</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200430165326.png" alt="20200430165326"></p>
<h2 id="增加SSL证书"><a href="#增加SSL证书" class="headerlink" title="增加SSL证书"></a>增加SSL证书</h2><h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><ul>
<li>找你的域名提供商申请一个证书，或者用免费的letsencrypt证书。</li>
<li>申请过程不赘述</li>
</ul>
<h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><ul>
<li><p>配置 ssl</p>
<p>默认配置文件<code>/etc/nginx/sites-available/default</code>修改<code>server</code>段</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听 443 端口, https 协议的默认端口</span></span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定证书的域名</span></span><br><span class="line"><span class="attribute">server_name</span> git.wudinaonao.com;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 证书路径</span></span><br><span class="line"><span class="attribute">ssl_certificate</span> /etc/nginx/ssl/git.wudinaonao.com.crt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 私钥路径</span></span><br><span class="line"><span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/git.wudinaonao.com.key;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line"><span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line"><span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line"><span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>成功</p>
</li>
</ul>
<h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ul>
<li>FastCGI sent in stderr: “fatal: GIT_PROJECT_ROOT is set but PATH_INFO is not” while reading response header from upstream,</li>
</ul>
<p>克隆仓库时候服务器响应 code 5000</p>
<p> <img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200430164727.png" alt="20200430164727"></p>
<p>查看nginx日志</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200430164843.png" alt="20200430164843"></p>
<ul>
<li>可能的原因，设置了GIT_PROJECT_ROOT但是没有获取到PATH_INFO，网站路径设置错误</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200430165055.png" alt="20200430165055"></p>
<p>把</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">~ /wudinaonao</span></span><br></pre></td></tr></table></figure>
<p>这里改成</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">~ /wudinaonao</span>(/.*)</span><br></pre></td></tr></table></figure>

<ul>
<li>问题解决</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200430165259.png" alt="20200430165259"></p>
<h3 id="error-remote-unpack-failed-unable-to-create-temporary-object-directory"><a href="#error-remote-unpack-failed-unable-to-create-temporary-object-directory" class="headerlink" title="error: remote unpack failed: unable to create temporary object directory"></a>error: remote unpack failed: unable to create temporary object directory</h3><p>在 git push 的时候有时候会无法 push 上去的情况。</p>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200430193047.png" alt="20200430193047"></p>
<p>错误显示无法创建对象。这种错误一般是目录权限设置的问题。重新设置一下目录权限即可。</p>
<ul>
<li><p>例如如果我通过http的方式push，那么我需要设置目录的用户组和你web服务器的用户组一样。</p>
</li>
<li><p>例如我的nginx用户为www-data，那么远程主机的blog.wudinaonao.com.git目录的用户也要是www-data.</p>
</li>
<li><p>使用 chmod 设置权限，直接 chmod -R 777</p>
</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200430193424.png" alt="20200430193424"></p>
<ul>
<li>问题解决</li>
</ul>
<p><img data-src="https://wudinaonao-1257394124.cos.ap-beijing.myqcloud.com/20200430193439.png" alt="20200430193439"></p>
<blockquote>
<p>参考链接</p>
<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664">https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664</a></p>
<p><a href="https://beginor.github.io/2016/03/12/http-git-server-on-nginx.html">https://beginor.github.io/2016/03/12/http-git-server-on-nginx.html</a></p>
<p><a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-Smart-HTTP">https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-Smart-HTTP</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>编译Openwrt以及遇到的问题</title>
    <url>/2021/05/09/%E7%BC%96%E8%AF%91Openwrt%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="问题以及解决方案"><a href="#问题以及解决方案" class="headerlink" title="问题以及解决方案"></a>问题以及解决方案</h1><h2 id="you-should-not-run-configure-as-root-set-FORCE-UNSAFE-CONFIGURE-1-in-environment-to-bypass-this-check"><a href="#you-should-not-run-configure-as-root-set-FORCE-UNSAFE-CONFIGURE-1-in-environment-to-bypass-this-check" class="headerlink" title="you should not run configure as root (set FORCE_UNSAFE_CONFIGURE=1 in environment to bypass this check)"></a>you should not run configure as root (set FORCE_UNSAFE_CONFIGURE=1 in environment to bypass this check)</h2><p>错误提示:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">you should <span class="keyword">not</span> <span class="built_in">run</span> configure as root (<span class="built_in">set</span> <span class="attribute">FORCE_UNSAFE_CONFIGURE</span>=1 <span class="keyword">in</span> environment <span class="keyword">to</span> bypass this check)</span><br></pre></td></tr></table></figure>

<p>如果你以root用户运行编译, 会有这个提示. 有两个解决方案, 你可以换一个非root用户, 或者接忽略提示.</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">FORCE_UNSAFE_CONFIGURE</span>=1</span><br></pre></td></tr></table></figure>

<p>参考链接</p>
<blockquote>
<p><a href="https://blog.csdn.net/tx422/article/details/78593860">https://blog.csdn.net/tx422/article/details/78593860</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linuxe</category>
      </categories>
      <tags>
        <tag>OpenWRT</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现字符串插值</title>
    <url>/2022/07/01/Python%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%92%E5%80%BC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 WEB 开发技术中, 字符串插值是一种很常用的操作, 在各种 Web 前端框架中都能看到其身影.</p>
<p>例如 VUE 中, <code>&#123;&#123; &#125;&#125;</code> 用两个大括号包裹住可以表示一个表达式</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">name</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>简言之, 此时我们有变量</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">name</span> <span class="operator">=</span> <span class="string">&quot;naonao&quot;</span></span><br></pre></td></tr></table></figure>

<p>那么上面的 HTML 模板最终会被渲染为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>naonao<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们可以实现一个<code>render</code>函数, 像这样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">render</span>(<span class="params">templates: <span class="built_in">str</span>, values: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>目标</p>
<ul>
<li>接收一个模板字符串, 以及需要被替换的变量字典, 返回渲染后的结果字符串.</li>
<li>当模板串里的变量不存在于变量字典时, 抛出异常.</li>
<li>被 <code>&#123;&#123; &#125;&#125;</code> 包裹住的变量需要清除其前后的空白字符, 例如 <code>&#123;&#123; name &#125;&#125;</code>, <code>&#123;&#123;name&#125;&#125;</code>, <code>&#123;&#123; name&#125;&#125;</code> 都是等价的</li>
</ul>
<p>特别的</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;&#123;<span class="name">name</span>&#125;&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123; &#123;<span class="name">name</span>&#125; &#123;age&#125; &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>这些也应当是有效变量, 他们最终会被识别为</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&quot;</span><span class="template-variable">&#123;name&#125;</span><span class="language-xml">&quot;</span></span><br><span class="line"><span class="language-xml">&quot;</span><span class="template-variable">&#123;name&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;age&#125;</span><span class="language-xml">&quot;</span></span><br></pre></td></tr></table></figure>

<p>如何实现呢？</p>
<h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ol>
<li>先搜索出模板串里的变量</li>
<li>从变量字典里提取对应变量值并替换</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_search</span>(<span class="params">string: <span class="built_in">str</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;单次搜索模板串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        string:     目标字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Return:         模板串, 以及在原始字符串中的起止坐标</span></span><br><span class="line"><span class="string">                    当字符串里不存在插值模板时返回空值.</span></span><br><span class="line"><span class="string">                    例 -&gt;           (&#x27;&#x27;, (None, None))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    s_list = <span class="built_in">list</span>(string)</span><br><span class="line">    s_len = <span class="built_in">len</span>(s_list)</span><br><span class="line">    _stack = []</span><br><span class="line">    _temp = []</span><br><span class="line">    _start = <span class="literal">None</span></span><br><span class="line">    _end = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; s_len:</span><br><span class="line">        <span class="comment"># 仅查找第一个模板串</span></span><br><span class="line">        <span class="keyword">if</span> _start <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> _end <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当栈里面的 &#123; 符号数量大于等于 2 时,</span></span><br><span class="line">        <span class="comment"># 表示当前指针已经指向&quot;变量&quot;字符串, 所以</span></span><br><span class="line">        <span class="comment"># 需要开始记录</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(_stack) &gt;= <span class="number">2</span>:</span><br><span class="line">            _temp.append(s_list[i])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检测连续两个字符是否为 -&gt; &#123;&#123;</span></span><br><span class="line">        <span class="keyword">if</span> s_list[i] == <span class="string">&quot;&#123;&quot;</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                _<span class="built_in">next</span> = s_list[i + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">except</span> IndexError:</span><br><span class="line">                <span class="keyword">raise</span> SyntaxError(<span class="string">&quot;格式不正确, 缺少 &#123;&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> _<span class="built_in">next</span> == <span class="string">&quot;&#123;&quot;</span>:</span><br><span class="line">                _stack.append(s_list[i])</span><br><span class="line">                _stack.append(s_list[i + <span class="number">1</span>])</span><br><span class="line">                _temp.append(s_list[i])</span><br><span class="line">                _temp.append(s_list[i + <span class="number">1</span>])</span><br><span class="line">                _start = i</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 不连续时仅添加</span></span><br><span class="line">                _stack.append(s_list[i])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 消括号</span></span><br><span class="line">        <span class="keyword">if</span> s_list[i] == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">            <span class="comment"># 消括号时, 如果辅助栈里剩余 2 个括号, 则</span></span><br><span class="line">            <span class="comment"># 表示当前指向的字符与下一个字符一定是 -&gt; &#125;</span></span><br><span class="line">            <span class="comment"># 即应当是一个连续的 &#125;&#125;, 否则格式不正确</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(_stack) == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    _<span class="built_in">next</span> = s_list[i + <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">except</span> IndexError:</span><br><span class="line">                    <span class="keyword">raise</span> SyntaxError(<span class="string">&quot;格式不正确, 缺少 &#125;&quot;</span>)</span><br><span class="line">                <span class="comment"># 栈里只剩下两个元素时, 一定要出现两个连续的</span></span><br><span class="line">                <span class="comment"># &#125;&#125; 否则格式不正确</span></span><br><span class="line">                <span class="keyword">if</span> _<span class="built_in">next</span> != <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">                    <span class="keyword">raise</span> SyntaxError(<span class="string">&quot;格式不正确, 缺少 &#125;&quot;</span>)</span><br><span class="line">                <span class="comment"># 清空栈并记录结束坐标</span></span><br><span class="line">                _stack.clear()</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">                _temp.append(_<span class="built_in">next</span>)</span><br><span class="line">                _end = i</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果栈里存在元素就弹一个出来</span></span><br><span class="line">            <span class="keyword">if</span> _stack:</span><br><span class="line">                _stack.pop()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 指针 + 1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 辅助栈不为空则说明格式不正确</span></span><br><span class="line">    <span class="keyword">if</span> _stack:</span><br><span class="line">        <span class="keyword">raise</span> SyntaxError(<span class="string">&quot;格式不正确, 缺少 &#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="string">&quot;&quot;</span>.join(_temp), (_start, _end))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_var_name</span>(<span class="params">temp_string: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        var = temp_string[<span class="number">2</span>:-<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="keyword">raise</span> SyntaxError(<span class="string">&quot;格式不正确&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> var.strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_replace</span>(<span class="params">string: <span class="built_in">str</span>, k1: <span class="built_in">str</span>, k2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        string:     原始字符串</span></span><br><span class="line"><span class="string">        k1:         被替换的子串</span></span><br><span class="line"><span class="string">        k2:         替换后的子串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    s_list = <span class="built_in">list</span>(string)</span><br><span class="line">    s_len = <span class="built_in">len</span>(s_list)</span><br><span class="line"></span><br><span class="line">    k1, k2 = <span class="built_in">str</span>(k1), <span class="built_in">str</span>(k2)</span><br><span class="line">    k1_list, k2_list = <span class="built_in">list</span>(k1), <span class="built_in">list</span>(k2)</span><br><span class="line">    k1_len, k2_len = <span class="built_in">len</span>(k1_list), <span class="built_in">len</span>(k2_list)</span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    _temp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; s_len:</span><br><span class="line">        <span class="comment"># i 指针指向的位置匹配到了 k1 的首元素</span></span><br><span class="line">        <span class="comment"># 从该位置向后匹配, 检测是否完全匹配</span></span><br><span class="line">        <span class="keyword">if</span> s_list[i] == k1_list[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k1_len):</span><br><span class="line">                <span class="keyword">if</span> k1_list[j] == s_list[i + j]:</span><br><span class="line">                    _temp += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> _temp == k1_len:</span><br><span class="line">            res.extend(k2_list)</span><br><span class="line">            i += (k1_len - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res.append(s_list[i])</span><br><span class="line"></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        _temp = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render</span>(<span class="params">string: <span class="built_in">str</span>, values: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;渲染模板字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    逻辑概要</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        string = &quot;my &#123;&#123;  name     &#125;&#125; is, &#123;&#123; age &#125;&#125; !!&quot;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        查找到第一个模板串 &quot;&#123;&#123;  name     &#125;&#125;&quot;, 然后提取左串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            l_string = &quot;my &#123;&#123;  name     &#125;&#125;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        将左串替换后的结果增加到 s_list, 然后更新 _temp 为右串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            _temp = &quot; is, &#123;&#123; age &#125;&#125; !!&quot;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        直至搜索不到模板串, 替换完毕.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    s_list = <span class="built_in">list</span>()</span><br><span class="line">    _temp = string</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 查找模板串里的模板</span></span><br><span class="line">        t_string, (i_start, i_end) = _search(_temp)</span><br><span class="line">        <span class="keyword">if</span> i_start <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> i_end <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 取模板字符的具体值</span></span><br><span class="line">        name = _var_name(t_string)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> values:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f&quot;缺少关键字 <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">        value = <span class="built_in">str</span>(values[name])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 截取左串(第一个搜索到的模板串), 将替换后的结果</span></span><br><span class="line">        <span class="comment"># 添加到 s_list, 然后更新 _temp 变量为右串(原始字符串剩余部分)</span></span><br><span class="line">        l_string = _replace(_temp[: i_end], t_string, value)</span><br><span class="line">        s_list.append(l_string)</span><br><span class="line">        _temp = _temp[i_end:]</span><br><span class="line"></span><br><span class="line">    s_list.append(_temp)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(s_list)</span><br></pre></td></tr></table></figure>


<p>验证下效果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">strings = [</span><br><span class="line">    <span class="string">&quot;&#123;&#123;  name     &#125;&#125; is, &#123;&#123; age &#125;&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;my &#123;&#123;  name     &#125;&#125; is, &#123;&#123; age &#125;&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&#123;&#123;  name     &#125;&#125; is, &#123;&#123; age &#125;&#125; !!&quot;</span>,</span><br><span class="line">    <span class="string">&quot;my &#123;&#123;  name     &#125;&#125; is, &#123;&#123; age &#125;&#125; !!&quot;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> strings:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;|<span class="subst">&#123;render(string, &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;nao&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">16</span>&#125;</span>)&#125;|&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">|nao <span class="keyword">is</span>, <span class="number">16</span>|</span><br><span class="line">|my nao <span class="keyword">is</span>, <span class="number">16</span>|</span><br><span class="line">|nao <span class="keyword">is</span>, <span class="number">16</span> !!|</span><br><span class="line">|my nao <span class="keyword">is</span>, <span class="number">16</span> !!|</span><br></pre></td></tr></table></figure>

<p>达到预期效果!</p>
]]></content>
  </entry>
  <entry>
    <title>Nextcloud 反向代理登录不跳转</title>
    <url>/2022/07/11/Nextcloud-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%99%BB%E5%BD%95%E4%B8%8D%E8%B7%B3%E8%BD%AC/</url>
    <content><![CDATA[<p>在使用 Docker 部署 Nextcloud 并通过 Nginx 反向代理时，会发生登陆后不跳转的问题</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/07/11/image.png" alt=""></p>
<p>具体表现为上图，会一直卡在这里。</p>
<p>但是此时刷新页面可以看到登录后的页面。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在 <code>config/config.php</code> 这个文件中添加</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;overwriteprotocol&#x27;</span> =&gt; <span class="string">&#x27;https&#x27;</span>,</span><br></pre></td></tr></table></figure>

<p>像这样</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/07/11/image0d1234872a1d87b7.png" alt=""></p>
<p>参考链接</p>
<blockquote>
<p><a href="https://wangzhengzhen.com/2499.html">https://wangzhengzhen.com/2499.html</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>DP线连接显示器BIOS黑屏</title>
    <url>/2022/08/14/DP%E7%BA%BF%E8%BF%9E%E6%8E%A5%E6%98%BE%E7%A4%BA%E5%99%A8BIOS%E9%BB%91%E5%B1%8F/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>收了一个华硕 Z77 平台的 p8z77-v lx2， 但是使用 DP 线插在显卡（我的是980ti）上进入系统时黑屏，具体表现为无法看见 BIOS 启动画面。但是如果换成 HDMI，DVI 线则可以看到。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>英伟达有一个固件升级工具</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/08/15/image.png" alt=""></p>
<blockquote>
<p><a href="https://us.download.nvidia.com/Windows/uefi/firmware/1.0/NVIDIA_DisplayPort_Firmware_Updater_1.0-x64.exe">https://us.download.nvidia.com/Windows/uefi/firmware/1.0/NVIDIA_DisplayPort_Firmware_Updater_1.0-x64.exe</a></p>
</blockquote>
<p>下载该工具更新显卡固件即可解决</p>
<p>参考链接</p>
<blockquote>
<p><a href="https://diy.pconline.com.cn/1496/14961331.html">https://diy.pconline.com.cn/1496/14961331.html</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Gitlab配置external_url</title>
    <url>/2022/10/06/Gitlab%E9%85%8D%E7%BD%AEexternal-url/</url>
    <content><![CDATA[<p>Gitlab 里有一个配置选项 <code>external_url</code></p>
<p>顾名思义这里配置的是从外部机器访问 Gitlab 的链接，可以是域名或ip地址</p>
<p>在配置这个选项的时候需要注意一个问题，就是这个配置的是里 gitlab 最近的访问路径。</p>
<p>比如我们有如下一个结构</p>
<h2 id="基于-Docker-容器的结构"><a href="#基于-Docker-容器的结构" class="headerlink" title="基于 Docker 容器的结构"></a>基于 Docker 容器的结构</h2><p><strong>访客 -&gt; nginx 容器 -&gt; gitlab 容器</strong></p>
<p>此时，访客假如在浏览器输入网址<code>https://gitlab.wudinaonao.com</code>，浏览器将请求发送给 nginx 容器，nginx容器通过反向代理连接到 gitlab 容器</p>
<p>这个时候就要注意了，<code>external_url</code> 这个选项并不能设置为<code>https://gitlab.wudinaonao.com</code>(并不是绝对的)</p>
<p>为什么？</p>
<p>因为在上述结构里 <code>https://gitlab.wudinaonao.com</code> 并不是离 gitlab 最近的访问路径, nginx 通过反向代理向 gitlab 发出的请求才是离 gitlab 最近的链接.</p>
<p>例如, 如果我们通过 docker-compose 来配置 nginx 和 docker 镜像.</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">    Gitlab:</span></span><br><span class="line">        <span class="meta"># 省略其他配置 ...</span></span><br><span class="line"><span class="symbol">        </span></span><br><span class="line"><span class="symbol">    Nginx:</span></span><br><span class="line">        <span class="meta"># 省略其他配置 ...</span></span><br><span class="line"><span class="symbol">        depends_on:</span></span><br><span class="line">            - Gitlab</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在上述容器组中, Nginx 容器可以通过 <code>Gitlab</code> 来访问 Gitlab 容器, 可以在 Nginx 容器里使用ping命令测试<code>ping gitlab</code></p>
<p>那么在这样的结构里, <code>external_url</code>的值就应当配置为<code>http://Gitlab</code></p>
<h3 id="并不是绝对的"><a href="#并不是绝对的" class="headerlink" title="并不是绝对的"></a>并不是绝对的</h3><p>为什么设置成<code>http://Gitlab</code>并不是绝对的, 因为通过 Nginx 反向代理时, 其实可以更改请求头的 <code>host</code> 选项! </p>
<p>只需要将 <code>host</code> 和 <code>external_url</code> 匹配即可</p>
<h2 id="基于动态DNS的结构"><a href="#基于动态DNS的结构" class="headerlink" title="基于动态DNS的结构"></a>基于动态DNS的结构</h2><p><strong>访客 -&gt; 路由器 -&gt; 内网主机</strong></p>
<p>如果 gitlab 主机假设在一个私网里, 我们通过端口映射的方式来访问, 这种情况下, 我们需要设置</p>
<p><code>external_url</code> 的值为 <code>内网主机的 ip 地址</code></p>
<p>详细来说, 假设我们的路由器对外有一个公网ip, 我们通过动态dns的方式绑定了一个域名 abc.com, 然后我们将内网里的gitlab主机端口暴露出去, 比如为 8080</p>
<p>那么此时我们可以通过 http:abc.com:8080 的方式来访问内网的 gitlab 主机吗 ?</p>
<p>并不可以.</p>
<p>是因为 abc.com 并不是距离 gitlab 最近的请求, 所以我们需要设置 <code>external_url</code> 的值为 <code>内网主机的 ip 地址</code></p>
<p>此时才可以正常访问.</p>
<blockquote>
<p><a href="https://blog.csdn.net/atlasun/article/details/115749373">https://blog.csdn.net/atlasun/article/details/115749373</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>windows连接共享打印机错误</title>
    <url>/2022/10/08/windows%E8%BF%9E%E6%8E%A5%E5%85%B1%E4%BA%AB%E6%89%93%E5%8D%B0%E6%9C%BA%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>windows 连接共享打印机时有可能发生的错误以及解决方案 </p>
<h2 id="0x00004005"><a href="#0x00004005" class="headerlink" title="0x00004005"></a>0x00004005</h2><p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/08/image.png" alt=""></p>
<p>解决方式为手工添加打印机</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/08/image80cb3203c52b6421.png" alt=""></p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/08/image6a97ea3fbae18af6.png" alt=""></p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/08/image3e5ffb89721d0e2a.png" alt=""></p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/08/image16a477ed6c19edd2.png" alt=""></p>
<p>注意这个选项如何填写， 比如打印机共享在<code>192.168.1.48</code>下，像这样</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/08/image4321385c0ed8b097.png" alt=""></p>
<p>那么我们应当填写的值为</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">\\<span class="number">192.168.1.48</span>\EPSON L1800 Series</span><br></pre></td></tr></table></figure>

<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/08/image1c3ca96a71804b42.png" alt=""></p>
<p>像这样</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/08/image527c082dbaf808c5.png" alt=""></p>
<p>然后选择打印机对应的驱动， 可以通过 windows update 从 windows 下载，也可以自己下载然后选择从磁盘安装</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/08/imagecf3952f25cac9e3d.png" alt=""></p>
<p>然后我连接的是这个打印机，所以我选择这个驱动</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/08/image40ebb988b23f3332.png" alt=""></p>
<p>设置一个打印机名字</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/08/imaged44700059d0fbe77.png" alt=""></p>
<p>这一步问你是否共享这个打印机，如果不共享，选第一个选项就 OK。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/08/image66f2d9f08c5bf573.png" alt=""></p>
<p>然后就设置好了， 可以打印个测试页测试一下。</p>
<blockquote>
<p><a href="https://www.youtube.com/watch?v=ZTYPBpGzB_g">https://www.youtube.com/watch?v=ZTYPBpGzB_g</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>ERROR odoo odoo.modules.loading: Database odoo not initialized</title>
    <url>/2022/10/11/ERROR-odoo-odoo-modules-loading-Database-odoo-not-initialized/</url>
    <content><![CDATA[<h2 id="ERROR-odoo-odoo-modules-loading-Database-odoo-not-initialized"><a href="#ERROR-odoo-odoo-modules-loading-Database-odoo-not-initialized" class="headerlink" title="ERROR odoo odoo.modules.loading: Database odoo not initialized"></a>ERROR odoo odoo.modules.loading: Database odoo not initialized</h2><p>在使用 docker-compose 部署 odoo 时报错</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ERROR </span>odoo odoo.modules.loading: Database odoo not initialized, you can force it with -i base</span><br></pre></td></tr></table></figure>

<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/11/image.png" alt=""></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>数据库容器增加环境变量</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">POSTGRES_DB</span>=postgres</span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">version</span><span class="punctuation">:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">services</span><span class="punctuation">:</span></span><br><span class="line"><span class="punctuation"></span></span><br><span class="line">  <span class="attribute">odoo</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">odoo:15.0</span></span><br><span class="line">    <span class="attribute">depends_on</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attribute">ports</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8069:8069&quot;</span></span><br><span class="line">    <span class="attribute">volumes</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./odoo_web_data:/var/lib/odoo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/odoo.conf:/etc/odoo/odoo.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./addons:/mnt/extra-addons</span></span><br><span class="line">    <span class="attribute">environment</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">USER=odoo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PASSWORD=xxxxxxxxx</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">postgres</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">postgres:15rc2-alpine3.16</span></span><br><span class="line">    <span class="attribute">environment</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_DB=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=xxxxxxxxx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=odoo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGDATA=/var/lib/postgresql/data/pgdata</span></span><br><span class="line">    <span class="attribute">volumes</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./odoo_db_data:/var/lib/postgresql/data/pgdata</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p><a href="https://github.com/odoo/odoo/issues/27447">https://github.com/odoo/odoo/issues/27447</a></p>
</blockquote>
<blockquote>
<p><a href="https://github.com/lefilament/ansible_role_odoo_docker/issues/7">https://github.com/lefilament/ansible_role_odoo_docker/issues/7</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Linux 下设置 swap 分区</title>
    <url>/2022/10/08/Linux-%E4%B8%8B%E8%AE%BE%E7%BD%AE-swap-%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<p>最近在腾讯云购置了一台2C2G的服务器用来放置 Gitlab。但是发现 Gitlab 的 docker 镜像最少需要 4G 内存才能跑起来，所以尝试下启用 SWAP 来用硬盘空间代替内存空间</p>
<p>PS：腾讯云轻量服务器在内存消耗完毕时，会发生硬盘IO读写高的故障，导致无法通过SSH连接到服务器。笔者已经在两台服务器上测试过了，确实会发生这个BUG。</p>
<h2 id="SWAP"><a href="#SWAP" class="headerlink" title="SWAP"></a>SWAP</h2>]]></content>
  </entry>
  <entry>
    <title>KMP字符串匹配算法的理解</title>
    <url>/2022/10/12/KMP%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在计算机科学中, 字符串搜索是一个很常见的任务. 给定两个字符串A和B, 例如</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">A -&gt; ABC ABCDAB ABCDABCDABDE</span><br><span class="line">B -&gt; ABCDABD</span><br></pre></td></tr></table></figure>

<p>我们怎么知道 A 是否包含有 B ?</p>
<p>有很多种算法可以完成这个任务, Knuth-Morris-Pratt字符串查找算法（简称为KMP算法）是比较著名的一种.</p>
<p>这个算法由高德纳（Donald Knuth）和沃恩·普拉特（英语：Vaughan Pratt）在1974年构思，同年詹姆斯·H·莫里斯（英语：James H. Morris）也独立地设计出该算法，最终三人于1977年联合发表.</p>
<p>没错! 起头的那个 K 就是高德纳老爷子</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/image.png" alt=""></p>
<p>该算法的巧妙之处在于, 一个词在不匹配时本身就包含足够的信息来确定下一个匹配可能的开始位置，此算法利用这一特性以避免重新检查先前配對的字符。（来自维基百科）</p>
<p>emmm….</p>
<p>我觉得，上面的话似乎不太好懂，我个人的理解是，该算法设计了一种方法，利用已经匹配过的信息，来减少重新匹配的次数。</p>
<p>以下的文章基于阮一峰的网络日志，特地记录了下学习的过程，以加强理解。</p>
<h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/imagecc3ea0b9a4cb30b2.png" alt=""></p>
<p>如上图，首先字符串“BBC ABCDAB ABCDABCDABDE”的第一个字符与搜索词“ABCDABD”的第一个字符进行比较，因为B与A不匹配，所以我们将搜索词后移一位。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/image86dc56a4a494075f.png" alt=""></p>
<p>因为B与A不匹配，我们继续后移。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/imaged2ced97720283918.png" alt=""></p>
<p>如此直到字符串有一个字符与搜索词的第一个字符匹配到为止。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/image7477df616cfabb08.png" alt=""></p>
<p>接着比较字符串和搜索词的下一个字符，还是相同。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/imagef86cfd399129e1e5.png" alt=""></p>
<p>直到字符串有一个字符，与搜索词对应的字符不相同为止。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/imagefd15692621352466.png" alt=""></p>
<p>这时，最自然的反应是，将搜索词整个后移一位，再从头逐个比较。这样做虽然可行，但是效率很差，因为你要把”搜索位置”移到已经比较过的位置，重比一遍。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/imagef86cfd399129e1e5.png" alt=""></p>
<p>一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是”ABCDAB”。KMP算法的想法是，设法利用这个已知信息，不要把”搜索位置”移回已经比较过的位置，继续把它向后移，这样就提高了效率。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/imageb96657543b7badbc.png" alt=""></p>
<p>怎么做到这一点呢？可以针对搜索词，算出一张《部分匹配表》（Partial Match Table）。这张表是如何产生的，后面再介绍，这里只要会用就可以了。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/imagef86cfd399129e1e5.png" alt=""></p>
<p>已知空格与D不匹配时，前面六个字符”ABCDAB”是匹配的。查表可知，最后一个匹配字符B对应的”部分匹配值”为2，因此按照下面的公式算出向后移动的位数</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">移动位数 <span class="operator">=</span> 已匹配的字符数 - 对应的部分匹配值</span><br></pre></td></tr></table></figure>

<p>因为 6 - 2 等于4，所以将搜索词向后移动4位。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/image1b937471562a53b5.png" alt=""></p>
<p>因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（”AB”），对应的”部分匹配值”为0。所以，移动位数 = 2 - 0，结果为 2，于是将搜索词向后移2位。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/image3a680f9eeb1ae9f6.png" alt=""></p>
<p>因为空格与A不匹配，继续后移一位。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/imageb72b3b429bb59900.png" alt=""></p>
<p>逐位比较，直到发现C与D不匹配。于是，移动位数 = 6 - 2，继续将搜索词向后移动4位。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/image71addcc418b4bb22.png" alt=""></p>
<p>逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将搜索词向后移动7位，这里就不再重复了。</p>
<h2 id="如何计算部分匹配表"><a href="#如何计算部分匹配表" class="headerlink" title="如何计算部分匹配表"></a>如何计算部分匹配表</h2><p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/imagefff2d7818cf3d586.png" alt=""></p>
<p>首先，要了解两个概念：”前缀”和”后缀”。 “前缀”指除了最后一个字符以外，一个字符串的全部头部组合；”后缀”指除了第一个字符以外，一个字符串的全部尾部组合。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/imageb96657543b7badbc.png" alt=""></p>
<p>“部分匹配值”就是”前缀”和”后缀”的最长的共有元素的长度。以”ABCDABD”为例，</p>
<table>
<thead>
<tr>
<th>字符串</th>
<th>前缀</th>
<th>后缀</th>
<th>最长共有元素</th>
<th>最长共有元素的长度</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>空集</td>
<td>空集</td>
<td>无</td>
<td>0</td>
</tr>
<tr>
<td>AB</td>
<td>A</td>
<td>B</td>
<td>无</td>
<td>0</td>
</tr>
<tr>
<td>ABC</td>
<td>A, AB</td>
<td>BC, C</td>
<td>无</td>
<td>0</td>
</tr>
<tr>
<td>ABCD</td>
<td>A, AB, ABC</td>
<td>BCD, CD, D</td>
<td>无</td>
<td>0</td>
</tr>
<tr>
<td>ABCDA</td>
<td>A, AB, ABC, ABCD</td>
<td>BCDA, CDA, DA, A</td>
<td>A</td>
<td>1</td>
</tr>
<tr>
<td>ABCDAB</td>
<td>A, AB, ABC, ABCD, ABCDA</td>
<td>BCDAB, CDAB, DAB, AB, B</td>
<td>AB</td>
<td>2</td>
</tr>
<tr>
<td>ABCDABD</td>
<td>A, AB, ABC, ABCD, ABCDA, ABCDAB</td>
<td>BCDABD, CDABD, DABD, ABD, BD, D</td>
<td>无</td>
<td>0</td>
</tr>
</tbody></table>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/12/imageb72b3b429bb59900.png" alt=""></p>
<p><strong>“部分匹配”的实质是，有时候，字符串头部和尾部会有重复。比如，”ABCDAB”之中有两个”AB”，那么它的”部分匹配值”就是2（”AB”的长度）。搜索词移动的时候，第一个”AB”向后移动4位（搜索串长度-部分匹配值），就可以来到第二个”AB”的位置。</strong></p>
<h2 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">KMP</span>(<span class="params">text: <span class="built_in">str</span>, pattern: <span class="built_in">str</span>, search_all: <span class="built_in">bool</span> = <span class="literal">True</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;KMP字符串搜索算法&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    t_len = <span class="built_in">len</span>(text)</span><br><span class="line">    p_len = <span class="built_in">len</span>(pattern)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模式串长度小于待搜索的字符串</span></span><br><span class="line">    <span class="keyword">if</span> t_len &lt; p_len:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> i &lt; t_len:</span><br><span class="line">        is_match = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 匹配最后一部分时, 起始坐标加上模式串的</span></span><br><span class="line">        <span class="comment"># 长度大于文本长度时, 注定匹配失败, 所以</span></span><br><span class="line">        <span class="comment"># 不用多此一举匹配最后部分</span></span><br><span class="line">        <span class="keyword">if</span> i + p_len &gt; t_len:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pattern)):</span><br><span class="line">            <span class="keyword">if</span> text[i + j] != pattern[j]:</span><br><span class="line">                <span class="comment"># 第一位就不匹配</span></span><br><span class="line">                <span class="keyword">if</span> j == <span class="number">0</span>:</span><br><span class="line">                    is_match = <span class="literal">False</span></span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 其余位不匹配时, 计算偏移值(对应的部分匹配值)</span></span><br><span class="line">                is_match = <span class="literal">False</span></span><br><span class="line">                p_offset = partial_match(pattern[:j])</span><br><span class="line">                <span class="comment"># 移动位数 = 已匹配的字符数 - 偏移值(对应的部分匹配值)</span></span><br><span class="line">                i += j - p_offset</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> is_match:</span><br><span class="line">            result.append(i)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> search_all:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            i += p_len - partial_match(pattern)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partial_match</span>(<span class="params">p: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算部分匹配值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    例如:</span></span><br><span class="line"><span class="string">        in:     &quot;ABCDAB&quot;</span></span><br><span class="line"><span class="string">        out:    2</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    假设我们输入&quot;ABCDAB&quot;, 则可知道该字符串的长度为 6, 最大下标(max_index)为 5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        字符:   A B C D A B</span></span><br><span class="line"><span class="string">        下标:   0 1 2 3 4 5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    前缀和后缀的可选范围</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        Prefix: 0 1 2 3 4</span></span><br><span class="line"><span class="string">        Suffix:   1 2 3 4 5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    于是我们知道</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        i   prefix          suffix          diffrence(前缀和后缀的差值)</span></span><br><span class="line"><span class="string">        -                                   </span></span><br><span class="line"><span class="string">        0   0               5               5</span></span><br><span class="line"><span class="string">        1   0, 1            4, 5            4</span></span><br><span class="line"><span class="string">        2   0, 1, 2         3, 4, 5         3</span></span><br><span class="line"><span class="string">        3   0, 1, 2, 3      2, 3, 4, 5      2</span></span><br><span class="line"><span class="string">        4   0, 1, 2, 3, 4   1, 2, 3, 4, 5   1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    我们最多需要进行 5 次循环, i 表示当前循环的次数, prefix 和 suffix 分别</span></span><br><span class="line"><span class="string">    对应了该次循环时每个字符的下标, diffrence 表示了该次循环时, prefix 和</span></span><br><span class="line"><span class="string">    suffix 对应的下标的差值, 显然可知</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        diffrence = max_index - i</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    我们需要取最长的共有元素的长度, 很显然我们从大到小搜索效率最高, 我们只需要</span></span><br><span class="line"><span class="string">    搜索到一个有效值, 该值即是最优解. 对应上图即为从下往上搜索.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(p) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    max_macth_length = <span class="number">0</span></span><br><span class="line">    max_index = <span class="built_in">len</span>(p) - <span class="number">1</span></span><br><span class="line">    i = max_index - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从大到小搜索仅需要搜索到一个即是最优值</span></span><br><span class="line">    <span class="keyword">while</span> i &gt; -<span class="number">1</span>:</span><br><span class="line">        is_match = <span class="literal">True</span></span><br><span class="line">        diff = max_index - i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[j] != p[j + diff]:</span><br><span class="line">                is_match = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> is_match:</span><br><span class="line">            max_macth_length = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> max_macth_length</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="string">&quot;ABC ABCDAB ABCDABCDABDEABCDABD&quot;</span></span><br><span class="line">pattern = <span class="string">&quot;ABCDABD&quot;</span></span><br><span class="line"><span class="built_in">print</span>(KMP(text, pattern))</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="string">[15, 23]</span></span><br></pre></td></tr></table></figure>

<p>参考链接</p>
<blockquote>
<p><a href="https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html">https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins更新失败解决方案</title>
    <url>/2022/10/13/Jenkins%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>笔者使用 Docker 部署了一个 Jenkins 镜像，最近升级镜像版本时遇到问题。</p>
<p>现在记录解决方案</p>
<h2 id="java-lang-NoClassDefFoundError-org-jruby-javasupport-proxy-InternalJavaProxy"><a href="#java-lang-NoClassDefFoundError-org-jruby-javasupport-proxy-InternalJavaProxy" class="headerlink" title="java.lang.NoClassDefFoundError: org/jruby/javasupport/proxy/InternalJavaProxy"></a>java.lang.NoClassDefFoundError: org/jruby/javasupport/proxy/InternalJavaProxy</h2><p>参考该链接解决</p>
<blockquote>
<p><a href="https://community.jenkins.io/t/jenkins-war-update-caused-issue-when-ruby-runtime-plugin-is-installed/3282">https://community.jenkins.io/t/jenkins-war-update-caused-issue-when-ruby-runtime-plugin-is-installed/3282</a></p>
</blockquote>
<p>There may be deprecated plugins installed on your system that need to be removed.</p>
<p>The Jenkins project stopped distributing the Ruby runtime plugin, the Python runtime plugin, and plugins that depend on those two plugins in January 2022. You can find a detailed list of plugins and more information in the blog post:</p>
<p>大意是旧版本包含了已经弃用的插件。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Ruby runtime plugin</span></span><br></pre></td></tr></table></figure>

<p>这个插件在 2.373 版本已经弃用了，需要卸载之前安装的该插件。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/13/image.png" alt=""></p>
<p>启动旧版本docker镜像后，我们发现在控制台面板无法卸载。</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/13/image29d2887b0b56c1ea.png" alt=""></p>
<p>解决方案是，进入到<code>$JENKINS_HOME/plugins</code>目录，然后移除<code>ruby-runtime*</code></p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/13/image618cb411402d9219.png" alt=""></p>
<p>即这两个文件</p>
<p>然后更新镜像版本，一切正常</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/13/image2640e9e6bea963cb.png" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>docker-compose 日志限制</title>
    <url>/2022/10/13/docker-compose-%E6%97%A5%E5%BF%97%E9%99%90%E5%88%B6/</url>
    <content><![CDATA[<p>例：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">  redis:</span></span><br><span class="line"><span class="symbol">    image:</span> redis:alpine</span><br><span class="line"><span class="symbol">    container_name:</span> testredis</span><br><span class="line"></span><br><span class="line">    <span class="meta"># 增加如下键</span></span><br><span class="line"><span class="symbol">    logging:</span></span><br><span class="line"><span class="symbol">        driver:</span> <span class="string">&quot;json-file&quot;</span></span><br><span class="line"><span class="symbol">        options:</span></span><br><span class="line">            max-size: <span class="string">&quot;100M&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>max-size</code>限制该容器日志最大大小</p>
<blockquote>
<p><a href="https://yeasy.gitbook.io/docker_practice/compose/compose_file#logging">https://yeasy.gitbook.io/docker_practice/compose/compose_file#logging</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>docker-compose 限制内存，CPU</title>
    <url>/2022/10/13/docker-compose-%E9%99%90%E5%88%B6%E5%86%85%E5%AD%98%EF%BC%8CCPU/</url>
    <content><![CDATA[<p>docker-compose 使用3.7版本，然后加入 deploy，例如：</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">version</span><span class="punctuation">:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"><span class="attribute">services</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">redis</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">redis:alpine</span></span><br><span class="line">    <span class="attribute">container_name</span><span class="punctuation">:</span> <span class="string">testredis</span></span><br><span class="line">    <span class="attribute">deploy</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">resources</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">limits</span><span class="punctuation">:</span></span><br><span class="line">          <span class="attribute">cpus</span><span class="punctuation">:</span> <span class="string">&#x27;0.50&#x27;</span></span><br><span class="line">          <span class="attribute">memory</span><span class="punctuation">:</span> <span class="string">500M</span></span><br></pre></td></tr></table></figure>

<p>限制 CPU 使用率 50%， 500MB 内存</p>
<p><strong>需要注意的是，启动时需增加 –compatibility 选项</strong></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">docker-compose <span class="comment">--compatibility up -d</span></span><br></pre></td></tr></table></figure>

<p>否则会报错</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="symbol">WARNING: </span>Some services (mysql, rsnmp) use the <span class="emphasis">&#x27;deploy&#x27;</span> key, which will be ignored. Compose does not support <span class="emphasis">&#x27;deploy&#x27;</span> configuration - use <span class="code">`docker stack deploy`</span> to deploy to a swarm.</span><br></pre></td></tr></table></figure>

<p>注：</p>
<p>–compatibility是docker-compose 1.20.0加入，主要目的就是用来将deploy中的数据限制、replicas与重启策略直接转译为version 2的语法</p>
<blockquote>
<p><a href="https://www.cnblogs.com/yjt1993/p/12402394.htm">https://www.cnblogs.com/yjt1993/p/12402394.htm</a><br><a href="https://www.jianshu.com/p/ba5518476057">https://www.jianshu.com/p/ba5518476057</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Ubuntu从源码编译安装Python</title>
    <url>/2022/10/16/Ubuntu%E4%BB%8E%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Python/</url>
    <content><![CDATA[<p>事情源于我要给新装的Ubuntu安装Python3.10, 结果在官网居然没有发现安装包</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/16/image.png" alt=""></p>
<p>找了半天反正没找到, 只有源码没有发行版</p>
<p>没辙, 从源码编译安装吧</p>
<p>安装依赖</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">update</span></span><br><span class="line">apt install build-essential zlib1g-<span class="built_in">dev</span> libncurses5-<span class="built_in">dev</span> libgdbm-<span class="built_in">dev</span> libnss3-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span> libreadline-<span class="built_in">dev</span> libffi-<span class="built_in">dev</span> libsqlite3-<span class="built_in">dev</span> wget libbz2-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure>

<p>下载对应版本的Python, 例如这里是<code>3.10.8</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> https://www.python.org/ftp/python/<span class="number">3</span>.<span class="number">10</span>.<span class="number">6</span>/Python-<span class="number">3</span>.<span class="number">10</span>.<span class="number">8</span>.tgz</span><br></pre></td></tr></table></figure>

<p>解压</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -xf Python-<span class="number">3</span>.<span class="number">10</span>.*.tgz</span><br></pre></td></tr></table></figure>

<p>检查配置</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> Python-3.10.*/</span><br><span class="line"><span class="string">./configure</span> <span class="params">--enable-optimizations</span></span><br></pre></td></tr></table></figure>

<p>编译</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">make -j <span class="constructor">$(<span class="params">nproc</span>)</span></span><br></pre></td></tr></table></figure>

<p>安装到<code>/usr/bin/python</code></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">make altinstall</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://computingforgeeks.com/how-to-install-python-on-ubuntu-linux-system/">https://computingforgeeks.com/how-to-install-python-on-ubuntu-linux-system/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>解决 Win10 自带微软输入法卡顿</title>
    <url>/2022/10/26/%E8%A7%A3%E5%86%B3-Win10-%E8%87%AA%E5%B8%A6%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95%E5%8D%A1%E9%A1%BF/</url>
    <content><![CDATA[<p>具体表现为使用WIndows10自带的输入法输入中文时出现严重卡顿，比如在键盘上按下一个键，至少要反应几秒钟才能出现按的字符，注意，是字符！也就是说字符是一个一个蹦出来的，并不连贯！</p>
<p>解决方法</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"><span class="tag">%<span class="selector-tag">AppData</span></span>%\Microsoft\InputMethod\Chs</span><br></pre></td></tr></table></figure>

<p>把上面这个目录删掉！完美解决！</p>
<p>这个目录下有很多小文件</p>
<p><img data-src="https://chevereto.wudinaonao.com/images/2022/10/26/image.png" alt=""></p>
<p>推测是输入法缓存，因为删除了以后，之前输入法记住的常输的句子就木有了。</p>
<p>这个是在网上找的一键清除脚本，没试过不确定是不是有用</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27; Fix Win10 Chinese IME lag</span></span><br><span class="line"><span class="keyword">Option</span> <span class="keyword">Explicit</span></span><br><span class="line"><span class="keyword">Dim</span> WSHShell, FSO, Target</span><br><span class="line"><span class="keyword">Set</span> WSHShell = <span class="built_in">CreateObject</span>(<span class="string">&quot;WScript.Shell&quot;</span>)</span><br><span class="line"><span class="keyword">Set</span> FSO = <span class="built_in">CreateObject</span>(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line">Target = WshShell.ExpandEnvironmentStrings(<span class="string">&quot;%AppData%&quot;</span>) &amp; <span class="string">&quot;\Microsoft\InputMethod\Chs\&quot;</span></span><br><span class="line">FSO.DeleteFile Target &amp; <span class="string">&quot;UDP*.tmp&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://ibug.io/cn/2021/03/win10-microsoft-ime-lag/">https://ibug.io/cn/2021/03/win10-microsoft-ime-lag/</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Selenium Message: invaild cookie domain</title>
    <url>/2022/10/26/Selenium-Message-invaild-cookie-domain/</url>
    <content><![CDATA[<p>Cookie 的域无效, 这个大概率是写 Requests 写习惯了, 直接带这 cookie 请求</p>
<p>解决方法也很简单, 先用Selenium打开一下网址, 然后在加上Cookie重新访问即可</p>
]]></content>
  </entry>
</search>
